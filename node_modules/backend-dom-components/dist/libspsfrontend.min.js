(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["libspsfrontend"] = factory();
	else
		root["libspsfrontend"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Afk/AfkLogic.ts":
/*!*****************************!*\
  !*** ./src/Afk/AfkLogic.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AfkLogic: () => (/* binding */ AfkLogic)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");


var AfkLogic = /** @class */ (function () {
    function AfkLogic(controlScheme, afkTimeout) {
        this.warnTimeout = 0;
        this.closeTimeout = 10;
        this.active = false;
        this.warnTimer = undefined;
        this.countDown = 0;
        this.countDownTimer = undefined;
        this.warnTimeout = afkTimeout;
        this.controlScheme = controlScheme;
    }
    /**
     * The methods that occur when an afk event listener is clicked
     */
    AfkLogic.prototype.onAfkClick = function () {
        this.hideCurrentOverlay();
        clearInterval(this.countDownTimer);
        this.startAfkWarningTimer();
    };
    /**
     * Start the warning timer if a timeout is set greater that 0 seconds
     */
    AfkLogic.prototype.startAfkWarningTimer = function () {
        if (this.warnTimeout > 0) {
            this.active = true;
        }
        else {
            this.active = false;
        }
        this.resetAfkWarningTimer();
    };
    /**
     * Stop the afk warning timer
     */
    AfkLogic.prototype.stopAfkWarningTimer = function () {
        this.active = false;
        clearInterval(this.warnTimer);
        clearInterval(this.countDownTimer);
    };
    /**
     * Pause the timer which when elapsed will warn the user they are inactive.
     */
    AfkLogic.prototype.pauseAfkWarningTimer = function () {
        this.active = false;
    };
    /**
     * If the user interacts then reset the warning timer.
     */
    AfkLogic.prototype.resetAfkWarningTimer = function () {
        var _this = this;
        if (this.active) {
            clearTimeout(this.warnTimer);
            this.warnTimer = setTimeout(function () { return _this.activateAfkEvent(); }, this.warnTimeout * 1000);
        }
    };
    /**
     * Show the AFK overlay and begin the countDown
     */
    AfkLogic.prototype.activateAfkEvent = function () {
        var _this = this;
        // Pause the timer while the user is looking at the inactivity warning overlay
        this.pauseAfkWarningTimer();
        // instantiate a new overlay 
        this.showAfkOverlay();
        // update our countDown timer and overlay contents
        this.countDown = this.closeTimeout;
        this.updateAfkCountdown();
        // if we are in locked mouse exit pointerlock 
        if (this.controlScheme == _Config_Config__WEBPACK_IMPORTED_MODULE_0__.ControlSchemeType.LockedMouse) {
            // minor hack to alleviate ios not supporting pointerlock
            if (document.exitPointerLock) {
                document.exitPointerLock();
            }
        }
        // reset our countDown interval accordingly 
        this.countDownTimer = setInterval(function () {
            _this.countDown--;
            if (_this.countDown == 0) {
                // The user failed to click so hide the overlay and disconnect them.
                _this.hideCurrentOverlay();
                _this.setDisconnectMessageOverride("You have been disconnected due to inactivity");
                _this.closeWebSocket();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "You have been disconnected due to inactivity");
                // switch off the afk feature as stream has closed 
                _this.stopAfkWarningTimer();
            }
            else {
                // Update the countDown message.
                _this.updateAfkCountdown();
            }
        }, 1000);
    };
    /**
     * An override method for updating the afk countdown number in the overlay
     */
    AfkLogic.prototype.updateAfkCountdown = function () { };
    /**
     * An override method for showing the afk overlay
     */
    AfkLogic.prototype.showAfkOverlay = function () { };
    /**
     * An override method for hiding the afk overlay
     */
    AfkLogic.prototype.hideCurrentOverlay = function () { };
    /**
     * An  override method for setting the override for the disconnect message
     */
    AfkLogic.prototype.setDisconnectMessageOverride = function (message) { };
    /**
     * An override method for closing the websocket connection from the clients side
     */
    AfkLogic.prototype.closeWebSocket = function () { };
    return AfkLogic;
}());



/***/ }),

/***/ "./src/Config/Config.ts":
/*!******************************!*\
  !*** ./src/Config/Config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Config: () => (/* binding */ Config),
/* harmony export */   ControlSchemeType: () => (/* binding */ ControlSchemeType)
/* harmony export */ });
var Config = /** @class */ (function () {
    /**
     * @param signallingServerAddress - the address of the signaling server
     * @param playerElement - the player element ID
     */
    function Config(signallingServerAddress, playerElement, isMobile) {
        if (isMobile === void 0) { isMobile = false; }
        // PRESET OPTIONS
        // enable the auto connect of the websocket 
        this.enableSpsAutoConnect = false;
        // enable the autoplay of the video if enabled by browser
        this.enableSpsAutoplay = false;
        // start the video muted
        this.startVideoMuted = false;
        this.isIOS = false;
        // mobile user
        this.isMobile = false;
        // set the amount of wait time in seconds while there is inactivity for afk to occur 
        this.afkTimeout = 120;
        // The control scheme controls the behaviour of the mouse when it interacts with the WebRTC player.
        this.controlScheme = ControlSchemeType.LockedMouse;
        // Browser keys are those which are typically used by the browser UI. We usually want to suppress these to allow, for example, UE4 to show shader complexity with the F5 key without the web page refreshing.
        this.suppressBrowserKeys = true;
        // UE4 has a fake touches option which fakes a single finger touch when the user drags with their mouse. 
        // We may perform the reverse; a single finger touch may be converted into a mouse drag UE4 side. This allows a non-touch application to be controlled partially via a touch device.
        this.fakeMouseWithTouches = false;
        this.signallingServerAddress = signallingServerAddress;
        this.playerElement = playerElement;
        this.isMobile = isMobile;
    }
    return Config;
}());

/**
 * The enum associated with the mouse being locked or hovering
 */
var ControlSchemeType;
(function (ControlSchemeType) {
    ControlSchemeType[ControlSchemeType["LockedMouse"] = 0] = "LockedMouse";
    ControlSchemeType[ControlSchemeType["HoveringMouse"] = 1] = "HoveringMouse";
})(ControlSchemeType || (ControlSchemeType = {}));


/***/ }),

/***/ "./src/DataChannel/DataChannelController.ts":
/*!**************************************************!*\
  !*** ./src/DataChannel/DataChannelController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataChannelController: () => (/* binding */ DataChannelController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DataChannelReceiveMessageType */ "./src/DataChannel/DataChannelReceiveMessageType.ts");
/* harmony import */ var _InitialSettings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");




var at = /** @class */ (function () {
    function at(e, t, s) {
        this.inRange = e, this.x = t, this.y = s;
    }
    return at;
}());
var lt = /** @class */ (function () {
    function lt(e, t) {
        this.x = e, this.y = t;
    }
    return lt;
}());
var dt = /** @class */ (function () {
    function dt(e, t) {
        this.x = e, this.y = t;
    }
    return dt;
}());
var ot = /** @class */ (function () {
    function ot(e) {
        this.videoElementParent = null;
        this.videoElement = null;
        this.ratio = 0;
        this.videoElementProvider = e;
        this.normalizeAndQuantizeUnsignedFunc = function () {
            throw new Error("Normalize and quantize unsigned, method not implemented.");
        };
        this.normalizeAndQuantizeSignedFunc = function () {
            throw new Error("Normalize and unquantize signed, method not implemented.");
        };
        this.denormalizeAndUnquantizeUnsignedFunc = function () {
            throw new Error("Denormalize and unquantize unsigned, method not implemented.");
        };
    }
    ot.prototype.normalizeAndQuantizeUnsigned = function (e, t) {
        return this.normalizeAndQuantizeUnsignedFunc(e, t);
    };
    ot.prototype.unquantizeAndDenormalizeUnsigned = function (e, t) {
        return this.denormalizeAndUnquantizeUnsignedFunc(e, t);
    };
    ot.prototype.normalizeAndQuantizeSigned = function (e, t) {
        return this.normalizeAndQuantizeSignedFunc(e, t);
    };
    ot.prototype.setupNormalizeAndQuantize = function () {
        var _this = this;
        if ((this.videoElementParent = this.videoElementProvider.getVideoParentElement(), this.videoElement = this.videoElementProvider.getVideoElement(), this.videoElementParent && this.videoElement)) {
            var e = this.videoElementParent.clientHeight / this.videoElementParent.clientWidth;
            var t = this.videoElement.videoHeight / this.videoElement.videoWidth;
            if (e > t) {
                //console.log("Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio");
                this.ratio = e / t;
                this.normalizeAndQuantizeUnsignedFunc = function (e, t) { return _this.normalizeAndQuantizeUnsignedPlayerBigger(e, t); };
                this.normalizeAndQuantizeSignedFunc = function (e, t) { return _this.normalizeAndQuantizeSignedPlayerBigger(e, t); };
                this.denormalizeAndUnquantizeUnsignedFunc = function (e, t) { return _this.denormalizeAndUnquantizeUnsignedPlayerBigger(e, t); };
            }
            else {
                //console.log("Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio");
                this.ratio = t / e;
                this.normalizeAndQuantizeUnsignedFunc = function (e, t) { return _this.normalizeAndQuantizeUnsignedPlayerSmaller(e, t); };
                this.normalizeAndQuantizeSignedFunc = function (e, t) { return _this.normalizeAndQuantizeSignedPlayerSmaller(e, t); };
                this.denormalizeAndUnquantizeUnsignedFunc = function (e, t) { return _this.denormalizeAndUnquantizeUnsignedPlayerSmaller(e, t); };
            }
        }
    };
    ot.prototype.normalizeAndQuantizeUnsignedPlayerBigger = function (e, t) {
        var s = e / this.videoElementParent.clientWidth;
        var n = this.ratio * (t / this.videoElementParent.clientHeight - 0.5) + 0.5;
        return (s < 0 || s > 1 || n < 0 || n > 1 ? new at(!1, 65535, 65535) : new at(!0, 65536 * s, 65536 * n));
    };
    ot.prototype.denormalizeAndUnquantizeUnsignedPlayerBigger = function (e, t) {
        var s = e / 65536;
        var n = (t / 65536 - 0.5) / this.ratio + 0.5;
        return new lt(s * this.videoElementParent.clientWidth, n * this.videoElementParent.clientHeight);
    };
    ot.prototype.normalizeAndQuantizeSignedPlayerBigger = function (e, t) {
        var s = e / (0.5 * this.videoElementParent.clientWidth);
        var n = this.ratio * t / (0.5 * this.videoElementParent.clientHeight);
        return new dt(32767 * s, 32767 * n);
    };
    ot.prototype.normalizeAndQuantizeUnsignedPlayerSmaller = function (e, t) {
        var s = this.ratio * (e / this.videoElementParent.clientWidth - 0.5) + 0.5;
        var n = t / this.videoElementParent.clientHeight;
        return s < 0 || s > 1 || n < 0 || n > 1 ? new at(false, 65535, 65535) : new at(true, 65536 * s, 65536 * n);
    };
    ot.prototype.denormalizeAndUnquantizeUnsignedPlayerSmaller = function (e, t) {
        var s = (e / 65536 - 0.5) / this.ratio + 0.5;
        var n = t / 65536;
        return new lt(s * this.videoElementParent.clientWidth, n * this.videoElementParent.clientHeight);
    };
    ot.prototype.normalizeAndQuantizeSignedPlayerSmaller = function (e, t) {
        var s = this.ratio * e / (0.5 * this.videoElementParent.clientWidth);
        var n = t / (0.5 * this.videoElementParent.clientHeight);
        return new dt(32767 * s, 32767 * n);
    };
    return ot;
}());
/**
 * Handles the Sending and Receiving of messages to the UE Instance via the Data Channel
 */
var DataChannelController = /** @class */ (function () {
    function DataChannelController(videoElement, config) {
        this.isReceivingFreezeFrame = false;
        DataChannelController.coordinateConverter = new ot(videoElement);
        this.isIOS = config.isIOS;
    }
    DataChannelController.prototype.focusAndOpenKeyboard = function (el, timeout) {
        if (!timeout) {
            timeout = 100;
        }
        if (el) {
            // Align temp input element approximately where the input element is
            // so the cursor doesn't jump around
            var __tempEl__1 = document.createElement('input');
            __tempEl__1.style.position = 'absolute';
            __tempEl__1.style.top = el.offsetTop + 7 + "px";
            __tempEl__1.style.left = el.offsetLeft + "px";
            __tempEl__1.style.height = '0';
            __tempEl__1.style.opacity = '0';
            // Put this temp element as a child of the page <body> and focus on it
            document.body.appendChild(__tempEl__1);
            __tempEl__1.focus();
            // The keyboard is open. Now do a delayed focus on the target element
            setTimeout(function () {
                el.focus();
                el.click();
                // Remove the temp element
                document.body.removeChild(__tempEl__1);
            }, timeout);
        }
    };
    /**
     * To Create and Set up a Data Channel
     * @param peerConnection - The RTC Peer Connection
     * @param label - Label of the Data Channel
     * @param datachannelOptions - Optional RTC DataChannel options
     */
    DataChannelController.prototype.createDataChannel = function (peerConnection, label, datachannelOptions) {
        var _this = this;
        this.peerConnection = peerConnection;
        this.label = label;
        this.datachannelOptions = datachannelOptions;
        if (datachannelOptions == null) {
            this.datachannelOptions = {};
            this.datachannelOptions.ordered = true;
        }
        this.dataChannel = this.peerConnection.createDataChannel(this.label, this.datachannelOptions);
        //We Want an Array Buffer not a blob
        this.dataChannel.binaryType = "arraybuffer";
        this.dataChannel.onopen = function () { return _this.handleOnOpen(); };
        this.dataChannel.onclose = function () { return _this.handleOnClose(); };
        this.dataChannel.onmessage = function (ev) { _this.handleOnMessage(ev); };
    };
    /**
     * Handles when the Data Channel is opened
     */
    DataChannelController.prototype.handleOnOpen = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Data Channel: " + this.label + " is opened.", 7);
    };
    /**
     * Handles when the Data Channel is closed
     */
    DataChannelController.prototype.handleOnClose = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Data Channel: " + this.label + " is closed.", 7);
    };
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    DataChannelController.prototype.handleOnMessage = function (event) {
        var message = new Uint8Array(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Message incoming", 6);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Message:" + message, 6);
        switch (message[0]) {
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.QualityControlOwnership: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.QualityControlOwnership", 6);
                var QualityOwnership = new Boolean(message[1]).valueOf();
                this.onQualityControlOwnership(QualityOwnership);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Response: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Response", 6);
                this.onResponse(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.Command: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Command", 6);
                this.onCommand(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.FreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.FreezeFrame", 6);
                this.processFreezeFrameMessage(message);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.UnfreezeFrame: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.FreezeFrame", 6);
                this.isReceivingFreezeFrame = false;
                this.onUnFreezeFrame();
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.VideoEncoderAvgQP: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.VideoEncoderAvgQP", 6);
                var AvgQP = Number(new TextDecoder("utf-16").decode(message.slice(1)));
                this.onVideoEncoderAvgQP(AvgQP);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.latencyTest: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.latencyTest", 6);
                var latencyAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iLatencyTestResults = JSON.parse(latencyAsString);
                var latencyTestResults = new _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_3__.LatencyTestResults();
                Object.assign(latencyTestResults, iLatencyTestResults);
                latencyTestResults.processFields();
                this.onLatencyTestResult(latencyTestResults);
                break;
            }
            case _DataChannelReceiveMessageType__WEBPACK_IMPORTED_MODULE_1__.DataChannelReceiveMessageType.InitialSettings: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.InitialSettings", 6);
                var payloadAsString = new TextDecoder("utf-16").decode(message.slice(1));
                var iInitialSettings = JSON.parse(payloadAsString);
                var initialSettings = new _InitialSettings__WEBPACK_IMPORTED_MODULE_2__.InitialSettings();
                Object.assign(initialSettings, iInitialSettings);
                initialSettings.ueCompatible();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), payloadAsString, 6);
                this.OnInitialSettings(initialSettings);
                break;
            }
            default: {
                //Logger.Log(Logger.GetStackTrace(), message[0].toString());
                //Logger.Error(Logger.GetStackTrace(), "unknown message sent on the Data channel");
                break;
            }
        }
    };
    /**
     * Fired when a Response message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onResponse = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Response", 6);
        var response = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), response, 6);
        // add to response handlers 
        /*for (let listener of responseEventListeners.values()) {
            listener(response);
        }*/
        var t = JSON.parse(response);
        console.log(response);
        if (t.name == 'selectedText') {
            navigator.clipboard.writeText(t.data);
        }
        if (t.command == 'Join Session') {
            console.log("Join Session");
            this.ueDescriptorUi.sendUiInteraction(JSON.stringify({
                "Password": "Palatial",
                "IP": "palatial.tenant-palatial-platform.coreweave.cloud:2222"
            }));
        }
    };
    /**
     * Fired when a Command message is sent from the UE Instance
     * @param message - Message Data Uint8Array
     */
    DataChannelController.prototype.onCommand = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "DataChannelReceiveMessageType.Command", 6);
        var commandAsString = new TextDecoder("utf-16").decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Data Channel Command: " + commandAsString, 6);
        var command = JSON.parse(commandAsString);
        if (command.command === "onScreenKeyboard") {
            //show on screen Keyboard
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Show on screen keyboard: " + commandAsString, 6);
            this.showOnScreenKeyboard(command);
        }
    };
    DataChannelController.prototype.showOnScreenKeyboard = function (command) {
        var hiddenInput = DataChannelController.hiddenInput;
        if (command.showOnScreenKeyboard) {
            if (true) { // this.isIOS
                // Show the 'edit text' button.
                DataChannelController.editTextButton.classList.remove('hiddenState');
                // Place the 'edit text' button near the UE input widget.
                var pos = DataChannelController.coordinateConverter.unquantizeAndDenormalizeUnsigned(command.x, command.y);
                if (pos.x != 0 && pos.y != 0) {
                    DataChannelController.editTextButton.style.top = pos.y.toString() + 'px';
                    DataChannelController.editTextButton.style.left = (pos.x - 40).toString() + 'px';
                }
            }
            else {}
        }
        else {
            // Hide the 'edit text' button.
            DataChannelController.editTextButton.classList.add('hiddenState');
            // Hide the on-screen keyboard.
            DataChannelController.hiddenInput.blur();
        }
    };
    /**
     * Send Data over the Data channel to the UE Instance
     * @param data - Message Data Array Buffer
     */
    DataChannelController.prototype.sendData = function (data) {
        // reset the afk inactivity
        this.resetAfkWarningTimerOnDataSend();
        if (this.dataChannel && this.dataChannel.readyState == "open") {
            this.dataChannel.send(data);
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Message Failed: " + new Uint8Array(data));
        }
    };
    /**
     * Fired when the UE Instance updates who has Quality Ownership
     * @param hasQualityOwnership - Does the client have Quality Ownership
     */
    DataChannelController.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    /**
     * Fired when the UE Instance sends freeze frame data
     * @param message - Freeze Frame Data
     */
    DataChannelController.prototype.processFreezeFrameMessage = function (message) { };
    /**
     * Fired when the UE Instance sends a un Freeze Frame
     */
    DataChannelController.prototype.onUnFreezeFrame = function () { };
    /**
     * Fired when the UE Instance sends the Video Encoder Avg QP
     * @param AvgQP - Avg QP
     */
    DataChannelController.prototype.onVideoEncoderAvgQP = function (AvgQP) { };
    /**
     * Fired when the UE Instance sends Latency test Results
     * @param latencyTestResults - Latency Test Results
     */
    DataChannelController.prototype.onLatencyTestResult = function (latencyTestResults) { };
    /**
     * Fired when the UE Instance sends Initial Settings
     * @param InitialSettings - Initial Settings
     */
    DataChannelController.prototype.OnInitialSettings = function (InitialSettings) { };
    /**
     * An override method for resetting the Afk warning timer when data is sent over the data channel
     */
    DataChannelController.prototype.resetAfkWarningTimerOnDataSend = function () { };
    // If the user focuses on a UE input widget then we show them a button to open
    // the on-screen keyboard. JavaScript security means we can only show the
    // on-screen keyboard in response to a user interaction.
    DataChannelController.editTextButton = undefined;
    // A hidden input text box which is used only for focusing and opening the
    // on-screen keyboard.
    DataChannelController.hiddenInput = undefined;
    return DataChannelController;
}());



/***/ }),

/***/ "./src/DataChannel/DataChannelReceiveMessageType.ts":
/*!**********************************************************!*\
  !*** ./src/DataChannel/DataChannelReceiveMessageType.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataChannelReceiveMessageType: () => (/* binding */ DataChannelReceiveMessageType)
/* harmony export */ });
/**
 * Data Channel Receives Message Type
 */
var DataChannelReceiveMessageType;
(function (DataChannelReceiveMessageType) {
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["QualityControlOwnership"] = 0] = "QualityControlOwnership";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Response"] = 1] = "Response";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["Command"] = 2] = "Command";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["FreezeFrame"] = 3] = "FreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["UnfreezeFrame"] = 4] = "UnfreezeFrame";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["VideoEncoderAvgQP"] = 5] = "VideoEncoderAvgQP";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["latencyTest"] = 6] = "latencyTest";
    DataChannelReceiveMessageType[DataChannelReceiveMessageType["InitialSettings"] = 7] = "InitialSettings";
})(DataChannelReceiveMessageType || (DataChannelReceiveMessageType = {}));


/***/ }),

/***/ "./src/DataChannel/InitialSettings.ts":
/*!********************************************!*\
  !*** ./src/DataChannel/InitialSettings.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Encoder: () => (/* binding */ Encoder),
/* harmony export */   InitialSettings: () => (/* binding */ InitialSettings),
/* harmony export */   PixelStreaming: () => (/* binding */ PixelStreaming),
/* harmony export */   WebRTC: () => (/* binding */ WebRTC)
/* harmony export */ });
/**
 * Latency Test Results Data
 */
var InitialSettings = /** @class */ (function () {
    function InitialSettings() {
        this.PixelStreaming = new PixelStreaming();
        this.Encoder = new Encoder();
        this.WebRTC = new WebRTC();
    }
    InitialSettings.prototype.ueCompatible = function () {
        if (this.WebRTC.MaxFPS != null) {
            this.WebRTC.FPS = this.WebRTC.MaxFPS;
        }
    };
    return InitialSettings;
}());

var PixelStreaming = /** @class */ (function () {
    function PixelStreaming() {
    }
    return PixelStreaming;
}());

var Encoder = /** @class */ (function () {
    function Encoder() {
    }
    return Encoder;
}());

var WebRTC = /** @class */ (function () {
    function WebRTC() {
    }
    return WebRTC;
}());



/***/ }),

/***/ "./src/DataChannel/LatencyTestResults.ts":
/*!***********************************************!*\
  !*** ./src/DataChannel/LatencyTestResults.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LatencyTestResults: () => (/* binding */ LatencyTestResults)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Latency Test Results Data
 */
var LatencyTestResults = /** @class */ (function () {
    function LatencyTestResults() {
        //Fields Set from the latency payload regardless of version
        this.ReceiptTimeMs = null;
        this.TransmissionTimeMs = null;
        //Fields Set from the latency payload from 4.27.2
        this.PreCaptureTimeMs = null;
        this.PostCaptureTimeMs = null;
        this.PreEncodeTimeMs = null;
        this.PostEncodeTimeMs = null;
        //Fields Set from the latency payload from 5.0
        this.EncodeMs = null;
        this.CaptureToSendMs = null;
        //Fields Set when processed
        this.testStartTimeMs = 0;
        this.browserReceiptTimeMs = 0;
        //Fields set from calculations
        this.latencyExcludingDecode = 0;
        this.testDuration = 0;
        //ueLatency: number = 0;
        this.networkLatency = 0;
        this.browserSendLatency = 0;
        this.frameDisplayDeltaTimeMs = 0;
        this.endToEndLatency = 0;
        //uePixelStreamLatency: number = 0;
        this.encodeLatency = 0;
    }
    /**
     * Sets the Delta Time Milliseconds
     * @param DeltaTimeMs - Delta Time Milliseconds
     */
    LatencyTestResults.prototype.setFrameDisplayDeltaTime = function (DeltaTimeMs) {
        if (this.frameDisplayDeltaTimeMs == 0) {
            this.frameDisplayDeltaTimeMs = Math.round(DeltaTimeMs);
        }
    };
    LatencyTestResults.prototype.processFields = function () {
        if (this.EncodeMs == null && (this.PreEncodeTimeMs != null || this.PostEncodeTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Setting Encode Ms \n " + this.PostEncodeTimeMs + " \n " + this.PreEncodeTimeMs, 6);
            this.EncodeMs = this.PostEncodeTimeMs - this.PreEncodeTimeMs;
        }
        if (this.CaptureToSendMs == null && (this.PreCaptureTimeMs != null || this.PostCaptureTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Setting CaptureToSendMs Ms \n " + this.PostCaptureTimeMs + " \n " + this.PreCaptureTimeMs, 6);
            this.CaptureToSendMs = this.PostCaptureTimeMs - this.PreCaptureTimeMs;
        }
    };
    return LatencyTestResults;
}());



/***/ }),

/***/ "./src/Delegate/DelegateBase.ts":
/*!**************************************!*\
  !*** ./src/Delegate/DelegateBase.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DelegateBase: () => (/* binding */ DelegateBase)
/* harmony export */ });
/**
 * Provides common base functionality for delegates that implement the IDelegate interface
*/
var DelegateBase = /** @class */ (function () {
    /**
     * @param config - A newly instantiated config object
     * returns the base delegate object with the config inside it along with a new instance of the Overlay controller class
     */
    function DelegateBase(config) {
        this.showActionOrErrorOnDisconnect = true;
        this.config = config;
    }
    DelegateBase.prototype.setConfigTimeout = function (time) {
        this.config.afkTimeout = time;
    };
    /**
     * Shows the disconnect overlay
     */
    DelegateBase.prototype.showDisconnectOverlay = function (updateText) {
        this.hideCurrentOverlay();
        this.updateDisconnectOverlay(updateText);
        this.disconnectOverlay.show();
        this.currentOverlay = this.disconnectOverlay;
    };
    /**
     * Update the disconnect overlays span text
     * @param updateText the new countdown number
     */
    DelegateBase.prototype.updateDisconnectOverlay = function (updateText) {
        this.disconnectOverlay.update(updateText);
    };
    /**
     * Activates the disconnect overlays action
     */
    DelegateBase.prototype.onDisconnectionAction = function () {
        this.disconnectOverlay.activate();
    };
    /**
     * Hides the current overlay
     */
    DelegateBase.prototype.hideCurrentOverlay = function () {
        if (this.currentOverlay != null) {
            this.currentOverlay.hide();
            this.currentOverlay = null;
        }
    };
    /**
     * Shows the connect overlay
     */
    DelegateBase.prototype.showConnectOverlay = function () {
        this.hideCurrentOverlay();
        this.connectOverlay.show();
        this.currentOverlay = this.connectOverlay;
    };
    /**
     * Shows the play overlay
     */
    DelegateBase.prototype.showPlayOverlay = function () {
        this.hideCurrentOverlay();
        this.playOverlay.show();
        this.currentOverlay = this.playOverlay;
    };
    /**
     * Shows the text overlay
     */
    DelegateBase.prototype.showTextOverlay = function (text) {
        this.hideCurrentOverlay();
        this.infoOverlay.update(text);
        this.infoOverlay.show();
        this.currentOverlay = this.infoOverlay;
    };
    /**
     * Shows the error overlay
     */
    DelegateBase.prototype.showErrorOverlay = function (text) {
        this.hideCurrentOverlay();
        this.errorOverlay.update(text);
        this.errorOverlay.show();
        this.currentOverlay = this.errorOverlay;
    };
    /**
     * Activates the connect overlays action
     */
    DelegateBase.prototype.onConnectAction = function () {
        this.connectOverlay.activate();
    };
    /**
     * Activates the play overlays action
     */
    DelegateBase.prototype.onPlayAction = function () {
        this.playOverlay.activate();
    };
    /**
     * Shows the afk overlay
     * @param countDown the countdown number for the afk countdown
     */
    DelegateBase.prototype.showAfkOverlay = function (countDown) {
        this.hideCurrentOverlay();
        this.updateAfkOverlay(countDown);
        this.afkOverlay.show();
        this.currentOverlay = this.afkOverlay;
    };
    /**
     * Update the afk overlays countdown number
     * @param countDown the new countdown number
     */
    DelegateBase.prototype.updateAfkOverlay = function (countDown) {
        this.afkOverlay.updateCountdown(countDown);
    };
    /**
     * Activates the afk overlays action
     */
    DelegateBase.prototype.onAfkAction = function () {
        this.afkOverlay.activate();
    };
    /**
     * Instantiate the WebRTCPlayerController interface to provide WebRTCPlayerController functionality within this class and set up anything that requires it
     * @param iWebRtcPlayerController
     */
    DelegateBase.prototype.setIWebRtcPlayerController = function (iWebRtcPlayerController) {
        var _this = this;
        this.iWebRtcController = iWebRtcPlayerController;
        this.iWebRtcController.resizePlayerStyle();
        this.disconnectOverlay.onAction(function () {
            _this.onWebRtcAutoConnect();
            _this.iWebRtcController.connectToSignallingSever();
        });
        // Build the webRtc connect overlay Event Listener and show the connect overlay
        this.connectOverlay.onAction(function () { return _this.iWebRtcController.connectToSignallingSever(); });
        // set up the afk overlays action 
        this.afkOverlay.onAction(function () { return _this.iWebRtcController.onAfkClick(); });
        // set up the play overlays action 
        this.playOverlay.onAction(function () {
            _this.onStreamLoading();
            _this.iWebRtcController.playStream();
        });
        // set up the connect overlays action
        this.showConnectOrAutoConnectOverlays();
    };
    /**
     * Show the Connect Overlay or auto connect
     */
    DelegateBase.prototype.showConnectOrAutoConnectOverlays = function () {
        // set up if the auto play will be used or regular click to start
        if (!this.config.enableSpsAutoConnect) {
            this.showConnectOverlay();
        }
        else {
            // if autoplaying show an info overlay while while waiting for the connection to begin 
            this.onWebRtcAutoConnect();
            this.iWebRtcController.connectToSignallingSever();
        }
    };
    /**
     * Show the webRtcAutoConnect Overlay and connect
     */
    DelegateBase.prototype.onWebRtcAutoConnect = function () {
        this.showTextOverlay("Auto Connecting Now");
        this.showActionOrErrorOnDisconnect = true;
    };
    /**
     * Set up functionality to happen when an instance state change occurs
     * @param instanceState - the message instance state
     */
    DelegateBase.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Set up functionality to happen when receiving an auth response
     * @param authResponse - the auth response message type
     */
    DelegateBase.prototype.onAuthenticationResponse = function (authResponse) { };
    /**
     * Set up functionality to happen when receiving a webRTC answer
     */
    DelegateBase.prototype.onWebRtcAnswer = function () {
        this.showTextOverlay("RTC Answer");
    };
    /**
     * Shows a text overlay to alert the user the stream is currently loading
     */
    DelegateBase.prototype.onStreamLoading = function () {
        this.showTextOverlay("Loading Stream");
    };
    /**
     * Event fired when the video is disconnected
     */
    DelegateBase.prototype.onDisconnect = function (eventString) {
        // if we have overridden the default disconnection messsage, assign the new value here
        if (this.iWebRtcController.getDisconnectMessageOverride() != "" && this.iWebRtcController.getDisconnectMessageOverride() !== undefined && this.iWebRtcController.getDisconnectMessageOverride() != null) {
            eventString = this.iWebRtcController.getDisconnectMessageOverride();
            this.iWebRtcController.setDisconnectMessageOverride('');
        }
        if (this.showActionOrErrorOnDisconnect == false) {
            this.showErrorOverlay("Disconnected: " + eventString);
            this.showActionOrErrorOnDisconnect = true;
        }
        else {
            this.showDisconnectOverlay("Disconnected: " + eventString + "  \n Click To Restart");
        }
    };
    /**
     * Handles when Web Rtc is connecting
     */
    DelegateBase.prototype.onWebRtcConnecting = function () {
        this.showTextOverlay("Starting connection to server, please wait");
    };
    /**
     * Handles when Web Rtc has connected
     */
    DelegateBase.prototype.onWebRtcConnected = function () {
        this.showTextOverlay("WebRTC connected, waiting for video");
    };
    /**
     * Handles when Web Rtc fails to connect
     */
    DelegateBase.prototype.onWebRtcFailed = function () {
        this.showErrorOverlay("Unable to setup video");
    };
    /**
     * Set up methods and functions to run when the video is initialised
     */
    DelegateBase.prototype.onVideoInitialised = function () { };
    /**
     * Set up functionality to happen when receiving latency test results
     * @param latency - latency test results object
     */
    DelegateBase.prototype.onLatencyTestResult = function (latency) { };
    /**
     * Set up functionality to happen when receiving video statistics
     * @param videoStats - video statistics as a aggregate stats object
     */
    DelegateBase.prototype.onVideoStats = function (videoStats) { };
    /**
     * Set up functionality to happen when calculating the average video encoder qp
     * @param QP - the quality number of the stream
     */
    DelegateBase.prototype.onVideoEncoderAvgQP = function (QP) { };
    /**
     * Set up functionality to happen when receiving and handling initial settings for the UE app
     * @param settings - initial UE app settings
     */
    DelegateBase.prototype.onInitialSettings = function (settings) { };
    /**
     * Set up functionality to happen when setting quality control ownership of a stream
     * @param hasQualityOwnership - does this user have quality ownership of the stream true / false
     */
    DelegateBase.prototype.onQualityControlOwnership = function (hasQualityOwnership) { };
    return DelegateBase;
}());



/***/ }),

/***/ "./src/FreezeFrame/FreezeFrame.ts":
/*!****************************************!*\
  !*** ./src/FreezeFrame/FreezeFrame.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FreezeFrame: () => (/* binding */ FreezeFrame)
/* harmony export */ });
/**
 * A class for managing the freeze frame object
 */
var FreezeFrame = /** @class */ (function () {
    /**
     * Construct a freeze frame
     * @param rootDiv the div that a freeze frame element will be created into
     */
    function FreezeFrame(rootDiv) {
        this.freezeFrameHeight = 0;
        this.freezeFrameWidth = 0;
        this.rootDiv = rootDiv;
        // create the overlay
        this.rootElement = document.createElement('div');
        this.rootElement.id = 'freezeFrame';
        this.rootElement.style.display = 'none';
        this.rootElement.style.pointerEvents = 'none';
        this.rootElement.style.position = 'absolute';
        this.rootElement.style.zIndex = '20';
        // create the image place holder
        this.imageElement = document.createElement('img');
        this.imageElement.style.position = 'absolute';
        // append the image into the root element and append the element to the root div
        this.rootElement.appendChild(this.imageElement);
        this.rootDiv.appendChild(this.rootElement);
    }
    /**
     * Set the freeze frame element for showing
     */
    FreezeFrame.prototype.setElementForShow = function () {
        this.rootElement.style.display = 'block';
    };
    /**
     * Set the freeze frame element for hiding
     */
    FreezeFrame.prototype.setElementForHide = function () {
        this.rootElement.style.display = 'none';
    };
    /**
     * Update the freeze frames image source
     * @param jpeg the freeze frame image as a byte array data
     */
    FreezeFrame.prototype.updateImageElementSource = function (jpeg) {
        var base64 = btoa(jpeg.reduce(function (data, byte) { return data + String.fromCharCode(byte); }, ''));
        this.imageElement.src = 'data:image/jpeg;base64,' + base64;
    };
    /**
     * Set the dimensions for the freeze frame from the element and resize it
     */
    FreezeFrame.prototype.setDimensionsFromElementAndResize = function () {
        this.freezeFrameHeight = this.imageElement.naturalHeight;
        this.freezeFrameWidth = this.imageElement.naturalWidth;
        this.resize();
    };
    /**
     * Resize a freeze frame element
     */
    FreezeFrame.prototype.resize = function () {
        if (this.freezeFrameWidth !== 0 && this.freezeFrameHeight !== 0) {
            var displayWidth = 0;
            var displayHeight = 0;
            var displayTop = 0;
            var displayLeft = 0;
            if (this.enlargeDisplayToFillWindow === null || this.enlargeDisplayToFillWindow === true) {
                var windowAspectRatio = window.innerWidth / window.innerHeight;
                var videoAspectRatio = this.freezeFrameWidth / this.freezeFrameHeight;
                if (windowAspectRatio < videoAspectRatio) {
                    displayWidth = window.innerWidth;
                    displayHeight = Math.floor(window.innerWidth / videoAspectRatio);
                    displayTop = Math.floor((window.innerHeight - displayHeight) * 0.5);
                    displayLeft = 0;
                }
                else {
                    displayWidth = Math.floor(window.innerHeight * videoAspectRatio);
                    displayHeight = window.innerHeight;
                    displayTop = 0;
                    displayLeft = Math.floor((window.innerWidth - displayWidth) * 0.5);
                }
            }
            else {
                // Video is coming in at native resolution, we care more about the player size
                var playerAspectRatio = this.rootDiv.offsetWidth / this.rootDiv.offsetHeight;
                var videoAspectRatio = this.freezeFrameWidth / this.freezeFrameHeight;
                if (playerAspectRatio < videoAspectRatio) {
                    displayWidth = this.rootDiv.offsetWidth;
                    displayHeight = Math.floor(this.rootDiv.offsetWidth / videoAspectRatio);
                    displayTop = Math.floor((this.rootDiv.offsetHeight - displayHeight) * 0.5);
                    displayLeft = 0;
                }
                else {
                    displayWidth = Math.floor(this.rootDiv.offsetHeight * videoAspectRatio);
                    displayHeight = this.rootDiv.offsetHeight;
                    displayTop = 0;
                    displayLeft = Math.floor((this.rootDiv.offsetWidth - displayWidth) * 0.5);
                }
            }
            this.rootElement.style.width = this.rootDiv.offsetWidth + 'px';
            this.rootElement.style.height = this.rootDiv.offsetHeight + 'px';
            this.rootElement.style.left = 0 + 'px';
            this.rootElement.style.top = 0 + 'px';
            this.imageElement.style.width = displayWidth + 'px';
            this.imageElement.style.height = displayHeight + 'px';
            this.imageElement.style.left = displayLeft + 'px';
            this.imageElement.style.top = displayTop + 'px';
        }
    };
    return FreezeFrame;
}());



/***/ }),

/***/ "./src/FreezeFrame/FreezeFrameController.ts":
/*!**************************************************!*\
  !*** ./src/FreezeFrame/FreezeFrameController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FreezeFrameController: () => (/* binding */ FreezeFrameController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _FreezeFrame__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FreezeFrame */ "./src/FreezeFrame/FreezeFrame.ts");


/**
 * A class for controlling freeze frame functionality
 */
var FreezeFrameController = /** @class */ (function () {
    /**
     * Construct a freeze frame controller
     * @param rootDiv the div that a freeze frame element will be created into
     */
    function FreezeFrameController(rootDiv) {
        this.receiving = false;
        this.size = 0;
        this.jpeg = undefined;
        this.valid = false;
        this.freezeFrame = new _FreezeFrame__WEBPACK_IMPORTED_MODULE_1__.FreezeFrame(rootDiv);
    }
    /**
     * Show the freeze frame if it is valid
     */
    FreezeFrameController.prototype.showFreezeFrame = function () {
        if (this.valid) {
            this.freezeFrame.setElementForShow();
        }
    };
    /**
     * Hide the freeze frame and set the validity to false
     */
    FreezeFrameController.prototype.hideFreezeFrame = function () {
        this.valid = false;
        this.freezeFrame.setElementForHide();
    };
    /**
     * Update the freeze frames image source and load it
     * @param jpeg the freeze frame image as a byte array data
     * @param onLoadCallBack a call back for managing if the play overlay needs to be shown or not
     */
    FreezeFrameController.prototype.updateFreezeFrameAndShow = function (jpeg, onLoadCallBack) {
        var _this = this;
        this.freezeFrame.updateImageElementSource(jpeg);
        this.freezeFrame.imageElement.onload = function () {
            _this.freezeFrame.setDimensionsFromElementAndResize();
            onLoadCallBack();
        };
    };
    /**
     * Process the new freeze frame image and update it
     * @param view the freeze frame image as a byte array data
     * @param onLoadCallBack a call back for managing if the play overlay needs to be shown or not
     */
    FreezeFrameController.prototype.processFreezeFrameMessage = function (view, onLoadCallBack) {
        // Reset freeze frame if we got a freeze frame message and we are not "receiving" yet.
        if (!this.receiving) {
            this.receiving = true;
            this.valid = false;
            this.size = 0;
            this.jpeg = undefined;
        }
        // Extract total size of freeze frame (across all chunks)
        this.size = (new DataView(view.slice(1, 5).buffer)).getInt32(0, true);
        // Get the jpeg part of the payload
        var jpegBytes = view.slice(1 + 4);
        // Append to existing jpeg that holds the freeze frame
        if (this.jpeg) {
            var jpeg = new Uint8Array(this.jpeg.length + jpegBytes.length);
            jpeg.set(this.jpeg, 0);
            jpeg.set(jpegBytes, this.jpeg.length);
            this.jpeg = jpeg;
        }
        // No existing freeze frame jpeg, make one
        else {
            this.jpeg = jpegBytes;
            this.receiving = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received first chunk of freeze frame: " + this.jpeg.length + "/" + this.size, 6);
        }
        // Finished receiving freeze frame, we can show it now
        if (this.jpeg.length === this.size) {
            this.receiving = false;
            this.valid = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received complete freeze frame " + this.size, 6);
            this.updateFreezeFrameAndShow(this.jpeg, onLoadCallBack);
        }
        // We received more data than the freeze frame payload message indicate (this is an error)
        else if (this.jpeg.length > this.size) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received bigger freeze frame than advertised: " + this.jpeg.length + "/" + this.size);
            this.jpeg = undefined;
            this.receiving = false;
        }
    };
    return FreezeFrameController;
}());



/***/ }),

/***/ "./src/Inputs/FakeTouchController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/FakeTouchController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FakeTouchController: () => (/* binding */ FakeTouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Allows for the usage of fake touch events and implements ITouchController
 * @param dataChannelController - The controller for the Data channel
 * @param videoPlayerElement - The video player DOM element
 */
var FakeTouchController = /** @class */ (function () {
    function FakeTouchController(dataChannelController, videoPlayerElement) {
        var _this = this;
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
        this.videoPlayerElement = videoPlayerElement;
        this.fingers = [];
        document.ontouchstart = function (ev) { return _this.onTouchStart(ev); };
        document.ontouchend = function (ev) { return _this.onTouchEnd(ev); };
        document.ontouchmove = function (ev) { return _this.onTouchMove(ev); };
    }
    /**
     * When a touch event begins
     * @param touch - the activating touch event
     */
    FakeTouchController.prototype.onTouchStart = function (touch) {
        var touchInfo = touch.changedTouches[0];
        var fingerInfo = {
            ID: touchInfo.identifier,
            X: touchInfo.clientX - this.videoPlayerElement.getBoundingClientRect().left,
            Y: touchInfo.clientY - -this.videoPlayerElement.getBoundingClientRect().top
        };
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "Touch start", 6);
        this.fingers.push(fingerInfo);
        var mouseEvent = new MouseEvent(touch.type, touchInfo);
        this.videoPlayerElement.onmouseenter(mouseEvent);
        this.ueInputMouseMessage.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, fingerInfo.X, fingerInfo.Y);
    };
    /**
     * When a touch event ends
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchEnd = function (touch) {
        var touchInfo = touch.changedTouches[0];
        for (var i = 0; i < this.fingers.length; i++) {
            if (touchInfo.identifier === this.fingers[i].ID) {
                var x = touchInfo.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touchInfo.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                this.ueInputMouseMessage.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, x, y);
                var mouseEvent = new MouseEvent(touch.type, touch);
                this.videoPlayerElement.onmouseleave(mouseEvent);
                this.fingers[i] = this.fingers[this.fingers.length - 1];
                this.fingers.pop();
            }
        }
    };
    /**
     * On a Move touch event
     * @param touchEvent - the activating touch event
     */
    FakeTouchController.prototype.onTouchMove = function (touchEvent) {
        var touchInfo = touchEvent.changedTouches[0];
        for (var i = 0; i < this.fingers.length; i++) {
            if (touchInfo.identifier === this.fingers[i].ID) {
                var x = touchInfo.clientX - this.videoPlayerElement.getBoundingClientRect().left;
                var y = touchInfo.clientY - this.videoPlayerElement.getBoundingClientRect().top;
                this.ueInputMouseMessage.sendMouseMove(x, y, x - this.fingers[i].X, y - this.fingers[i].Y);
                this.fingers[i].X = x;
                this.fingers[i].Y = y;
            }
        }
    };
    return FakeTouchController;
}());



/***/ }),

/***/ "./src/Inputs/GamepadController.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/GamepadController.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GamePadController: () => (/* binding */ GamePadController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputGamePadMessage */ "./src/UeInstanceMessage/UeInputGamePadMessage.ts");


/**
 * The class that handles the functionality of gamepads and controllers
 */
var GamePadController = /** @class */ (function () {
    /**
     * @param dataChannelController - the data chanel controller
     */
    function GamePadController(dataChannelController) {
        var _this = this;
        this.ueInputGamePadMessage = new _UeInstanceMessage_UeInputGamePadMessage__WEBPACK_IMPORTED_MODULE_1__.UeInputGamePadMessage(dataChannelController);
        if ("GamepadEvent" in window) {
            window.addEventListener("gamepadconnected", function (ev) { return _this.gamePadConnectHandler(ev); });
            window.addEventListener("gamepaddisconnected", function (ev) { return _this.gamePadDisconnectHandler(ev); });
        }
        else if ("WebKitGamepadEvent" in window) {
            window.addEventListener("webkitgamepadconnected", function (ev) { return _this.gamePadConnectHandler(ev); });
            window.addEventListener("webkitgamepaddisconnected", function (ev) { return _this.gamePadDisconnectHandler(ev); });
        }
        this.controllers = [];
    }
    /**
     * Connects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadConnectHandler = function (gamePadEvent) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Gamepad connect handler", 6);
        var gamepad = gamePadEvent.gamepad;
        var temp = {
            currentState: gamepad,
            prevState: gamepad
        };
        this.controllers.push(temp);
        this.controllers[gamepad.index].currentState = gamepad;
        this.controllers[gamepad.index].prevState = gamepad;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "gamepad: " + gamepad.id + " connected", 6);
        window.requestAnimationFrame(function () { return _this.updateStatus(); });
    };
    /**
     * Disconnects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    GamePadController.prototype.gamePadDisconnectHandler = function (gamePadEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Gamepad disconnect handler", 6);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "gamepad: " + gamePadEvent.gamepad.id + " disconnected", 6);
        delete this.controllers[gamePadEvent.gamepad.index];
        this.controllers = this.controllers.filter(function (controller) { return controller !== undefined; });
    };
    /**
     * Scan for connected gamepads
     */
    GamePadController.prototype.scanGamePads = function () {
        var gamepads = ((navigator.getGamepads) ? navigator.getGamepads() : []); //  : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
        for (var i = 0; i < gamepads.length; i++) {
            if (gamepads[i] && (gamepads[i].index in this.controllers)) {
                this.controllers[gamepads[i].index].currentState = gamepads[i];
            }
        }
    };
    /**
     * Updates the status of the gamepad and sends the inputs
     */
    GamePadController.prototype.updateStatus = function () {
        var _this = this;
        this.scanGamePads();
        // Iterate over multiple controllers in the case the multiple gamepads are connected
        for (var _i = 0, _a = this.controllers; _i < _a.length; _i++) {
            var controller = _a[_i];
            try {
                var currentState = controller.currentState;
                for (var i = 0; i < controller.currentState.buttons.length; i++) {
                    var currentButton = controller.currentState.buttons[i];
                    var previousButton = controller.prevState.buttons[i];
                    // Button 6 is actually the left trigger, send it to UE as an analog axis
                    // Button 7 is actually the right trigger, send it to UE as an analog axis
                    // The rest are normal buttons. Treat as such
                    if (currentButton.pressed && !previousButton.pressed) {
                        // New press
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, false);
                        }
                    }
                    else if (!currentButton.pressed && previousButton.pressed) {
                        // release
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, 0);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, 0);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonReleased(currentState.index, i);
                        }
                    }
                    else if (currentButton.pressed && previousButton.pressed) {
                        // repeat press / hold
                        if (i == 6) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 5, currentButton.value);
                        }
                        else if (i == 7) {
                            this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 6, currentButton.value);
                        }
                        else {
                            this.ueInputGamePadMessage.sendControllerButtonPressed(currentState.index, i, true);
                        }
                    }
                    // Last case is button isn't currently pressed and wasn't pressed before. This doesn't need an else block
                }
                for (var i = 0; i < currentState.axes.length; i += 2) {
                    var x = parseFloat(currentState.axes[i].toFixed(4));
                    // https://w3c.github.io/gamepad/#remapping Gamepad browser side standard mapping has positive down, negative up. This is downright disgusting. So we fix it.
                    var y = -parseFloat(currentState.axes[i + 1].toFixed(4));
                    if (i === 0) {
                        // left stick
                        // axis 1 = left horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 1, x);
                        // axis 2 = left vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 2, y);
                    }
                    else if (i === 2) {
                        // right stick
                        // axis 3 = right horizontal
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 3, x);
                        // axis 4 = right vertical
                        this.ueInputGamePadMessage.sendControllerAxisMove(currentState.index, 4, y);
                    }
                }
                this.controllers[currentState.index].prevState = currentState;
            }
            catch (error) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Oh dear the gamepad poll loop has thrown an error");
            }
        }
        window.requestAnimationFrame(function () { return _this.updateStatus(); });
    };
    return GamePadController;
}());



/***/ }),

/***/ "./src/Inputs/GyroController.ts":
/*!**************************************!*\
  !*** ./src/Inputs/GyroController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GyroController: () => (/* binding */ GyroController)
/* harmony export */ });
/**
 * The Class that handles gyro input
 */
var GyroController = /** @class */ (function () {
    function GyroController(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    return GyroController;
}());



/***/ }),

/***/ "./src/Inputs/InputController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/InputController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InputController: () => (/* binding */ InputController)
/* harmony export */ });
/* harmony import */ var _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FakeTouchController */ "./src/Inputs/FakeTouchController.ts");
/* harmony import */ var _KeyboardController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./KeyboardController */ "./src/Inputs/KeyboardController.ts");
/* harmony import */ var _MouseController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MouseController */ "./src/Inputs/MouseController.ts");
/* harmony import */ var _TouchController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TouchController */ "./src/Inputs/TouchController.ts");
/* harmony import */ var _GamepadController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GamepadController */ "./src/Inputs/GamepadController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerMouseLockedEvents */ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts");
/* harmony import */ var _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayerMouseHoverEvents */ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts");
/* harmony import */ var _GyroController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./GyroController */ "./src/Inputs/GyroController.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");










/**
 * Class for handling inputs for mouse and keyboard
 */
var InputController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     */
    function InputController(dataChannelController, ueDescriptorUi, videoElementProvider) {
        this.dataChannelController = dataChannelController;
        this.videoElementProvider = videoElementProvider;
        this.ueDescriptorUi = ueDescriptorUi;
    }
    /**
     * registers browser key events
     * @param suppressBrowserKeys - option to suppress browser keys
     */
    InputController.prototype.registerKeyBoard = function (suppressBrowserKeys) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Register Keyboard Events", 7);
        this.keyboardController = new _KeyboardController__WEBPACK_IMPORTED_MODULE_1__.KeyboardController(this.dataChannelController, this.ueDescriptorUi, suppressBrowserKeys);
        this.keyboardController.registerKeyBoardEvents();
    };
    /**
     * register mouse events based on a control type
     * @param controlScheme - if the mouse is either hovering or locked
     */
    InputController.prototype.registerMouse = function (controlScheme) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Register Mouse Events", 7);
        // casting these as any as they do not have the moz attributes we require
        var videoElement = this.videoElementProvider.getVideoElement();
        var videoInputBindings;
        this.mouseController = new _MouseController__WEBPACK_IMPORTED_MODULE_2__.MouseController(this.dataChannelController, this.videoElementProvider);
        switch (controlScheme) {
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.LockedMouse:
                videoInputBindings = new _VideoPlayer_VideoPlayerMouseLockedEvents__WEBPACK_IMPORTED_MODULE_6__.VideoPlayerMouseLockedEvents(this.videoElementProvider, this.mouseController);
                videoElement.onclick = function (event) { return _this.videoElementProvider.setClickActions(event); };
                document.addEventListener('pointerlockchange', function () { return videoInputBindings.handleLockStateChange(); }, false);
                document.addEventListener('mozpointerlockchange', function () { return videoInputBindings.handleLockStateChange(); }, false);
                break;
            case _Config_Config__WEBPACK_IMPORTED_MODULE_5__.ControlSchemeType.HoveringMouse:
                videoInputBindings = new _VideoPlayer_VideoPlayerMouseHoverEvents__WEBPACK_IMPORTED_MODULE_7__.VideoPlayerMouseHoverEvents(this.mouseController);
                // set the onclick to null if the input bindings were previously set to pointerlock
                videoElement.onclick = null;
                document.addEventListener("mousemove", function (mouseEvent) { return videoInputBindings.handleMouseMove(mouseEvent); }, { passive: false });
                document.addEventListener("wheel", function (mouseEvent) { return videoInputBindings.handleMouseWheel(mouseEvent); }, { passive: false });
                videoElement.onmousedown = function (mouseEvent) { return videoInputBindings.handleMouseDown(mouseEvent); };
                videoElement.onmouseup = function (mouseEvent) { return videoInputBindings.handleMouseUp(mouseEvent); };
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "unknown Control Scheme Type Defaulting to Locked Mouse Events");
                break;
        }
    };
    /**
     * register touch events
     * @param fakeMouseTouch - the faked mouse touch event
     * @param playerElement - the player elements DOM
     */
    InputController.prototype.registerTouch = function (fakeMouseTouch, playerElement) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Registering Touch", 6);
        if (fakeMouseTouch) {
            //(<HTMLVideoElement>playerElement.getElementsByTagName("video")[0])
            this.touchController = new _FakeTouchController__WEBPACK_IMPORTED_MODULE_0__.FakeTouchController(this.dataChannelController, playerElement);
        }
        else {
            this.touchController = new _TouchController__WEBPACK_IMPORTED_MODULE_3__.TouchController(this.dataChannelController, playerElement, this.videoElementProvider);
        }
    };
    /**
     * registers a gamepad
     */
    InputController.prototype.registerGamePad = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Register Game Pad", 7);
        this.gamePadController = new _GamepadController__WEBPACK_IMPORTED_MODULE_4__.GamePadController(this.dataChannelController);
    };
    /**
     * registers a gyro device
     */
    InputController.prototype.registerGyro = function () {
        this.gyroController = new _GyroController__WEBPACK_IMPORTED_MODULE_8__.GyroController(this.dataChannelController);
    };
    return InputController;
}());



/***/ }),

/***/ "./src/Inputs/KeyboardController.ts":
/*!******************************************!*\
  !*** ./src/Inputs/KeyboardController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   KeyboardController: () => (/* binding */ KeyboardController)
/* harmony export */ });
/* harmony import */ var _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SpecialKeyCodes */ "./src/Inputs/SpecialKeyCodes.ts");
/* harmony import */ var _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputKeyboardMessage */ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Keyboard Inputs for the document
 */
var KeyboardController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     * @param suppressBrowserKeys - Suppress Browser Keys
     */
    function KeyboardController(dataChannelController, ueDescriptorUi, suppressBrowserKeys) {
        this.ueInputKeyBoardMessage = new _UeInstanceMessage_UeInputKeyboardMessage__WEBPACK_IMPORTED_MODULE_1__.UeInputKeyboardMessage(dataChannelController);
        this.ueDescriptorUi = ueDescriptorUi;
        this.suppressBrowserKeys = suppressBrowserKeys;
    }
    /**
     * Registers document keyboard events with the controller
     */
    KeyboardController.prototype.registerKeyBoardEvents = function () {
        var _this = this;
        document.onkeydown = function (ev) { return _this.handleOnKeyDown(ev); };
        document.onkeyup = function (ev) { return _this.handleOnKeyUp(ev); };
        //This has been deprecated as at Jun 13 2021
        document.onkeypress = function (ev) { return _this.handleOnKeyPress(ev); };
    };
    /**
     * Handles When a key is down
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyDown = function (keyboardEvent) {
        if (keyboardEvent.ctrlKey) {
            if (keyboardEvent.key == 'v') {
                var self_1 = this;
                navigator.clipboard.readText().then(function (text) {
                    for (var i = 0; i < text.length; i++) {
                        var char = text.charAt(i);
                        var key = char.charCodeAt(0);
                        self_1.ueInputKeyBoardMessage.sendKeyDown(key, keyboardEvent.repeat);
                        document.onkeypress(new KeyboardEvent("keypress", { charCode: key }));
                    }
                }).catch(function (err) {
                    console.error('Failed to read clipboard contents: ', err);
                });
            }
            if (keyboardEvent.key == 'b') {
                console.log('name');
                this.ueDescriptorUi.sendUiInteraction(JSON.stringify({ "Name": 'RandomName' }));
            }
            if (keyboardEvent.key == 'c') {
                console.log('copy');
                //this.ueDescriptorUi.sendUiConsoleInteraction("requestInputSelection");
            }
            if (this.getKeycode(keyboardEvent) == _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.backSpace) {
                // clear input box
            }
        }
        else {
            var key = keyboardEvent.key;
            if (key == 'Unidentified') {
                return;
            }
            this.ueInputKeyBoardMessage.sendKeyDown(this.getKeycode(keyboardEvent), keyboardEvent.repeat);
            // backSpace is not considered a keypress in JavaScript but we need it
            // to be so characters may be deleted in a UE4 text entry field.
            if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.backSpace) {
                document.onkeypress(new KeyboardEvent("keypress", { charCode: _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.backSpace }));
            }
        }
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * handles when a key is up
     * @param keyboardEvent - Keyboard event
     */
    KeyboardController.prototype.handleOnKeyUp = function (keyboardEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "handleOnKeyUp", 6);
        this.ueInputKeyBoardMessage.sendKeyUp(this.getKeycode(keyboardEvent));
        if (this.suppressBrowserKeys && this.isKeyCodeBrowserKey(keyboardEvent.keyCode)) {
            keyboardEvent.preventDefault();
        }
    };
    /**
     * Handles when a key is press
     * @param keyboard - Keyboard Event
     */
    KeyboardController.prototype.handleOnKeyPress = function (keyboard) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "handleOnkeypress", 6);
        this.ueInputKeyBoardMessage.sendKeyPress(keyboard.charCode);
    };
    /**
     * Gets the Keycode of the Key pressed
     * @param keyboardEvent - Key board Event
     * @returns the key code of the Key
     */
    KeyboardController.prototype.getKeycode = function (keyboardEvent) {
        //Need to move this to a newer version using keyboard event location. as keyboardEvent.keycode is deprecated
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.shift && keyboardEvent.code === 'ShiftRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightShift;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.control && keyboardEvent.code === 'ControlRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightControl;
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.alt && keyboardEvent.code === 'AltRight')
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_0__.SpecialKeyCodes.rightAlt;
        else
            return keyboardEvent.keyCode;
    };
    /**
     * Browser keys do not have a charCode so we only need to test keyCode.
     */
    KeyboardController.prototype.isKeyCodeBrowserKey = function (keyCode) {
        // Function keys or tab key.
        if (keyCode == 116 || keyCode == 122)
            return false;
        return keyCode >= 112 && keyCode <= 123 || keyCode === 9;
    };
    return KeyboardController;
}());

/* 5457524f4d4d */


/***/ }),

/***/ "./src/Inputs/MouseButtons.ts":
/*!************************************!*\
  !*** ./src/Inputs/MouseButtons.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MouseButton: () => (/* binding */ MouseButton),
/* harmony export */   MouseButtonsMask: () => (/* binding */ MouseButtonsMask)
/* harmony export */ });
/**
 * Mouse Button Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button}
 */
var MouseButton = /** @class */ (function () {
    function MouseButton() {
    }
    MouseButton.mainButton = 0; // Left button.
    MouseButton.auxiliaryButton = 1; // Wheel button.
    MouseButton.secondaryButton = 2; // Right button.
    MouseButton.fourthButton = 3; // Browser Back button.
    MouseButton.fifthButton = 4; // Browser Forward button.
    return MouseButton;
}());

/**
 * Mouse Button Mask Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}
 */
var MouseButtonsMask = /** @class */ (function () {
    function MouseButtonsMask() {
    }
    MouseButtonsMask.primaryButton = 1; // Left button.
    MouseButtonsMask.secondaryButton = 2; // Right button.
    MouseButtonsMask.auxiliaryButton = 4; // Wheel button.
    MouseButtonsMask.fourthButton = 8; // Browser Back button.
    MouseButtonsMask.fifthButton = 16; // Browser Forward button.
    return MouseButtonsMask;
}());



/***/ }),

/***/ "./src/Inputs/MouseController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/MouseController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MouseController: () => (/* binding */ MouseController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputMouseMessage */ "./src/UeInstanceMessage/UeInputMouseMessage.ts");
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");



/**
 * Handles the Mouse Inputs for the document
 */
var MouseController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function MouseController(dataChannelController, videoElementProvider) {
        this.unsignedOutOfRange = 65535;
        this.signedOutOfRange = 32767;
        this.printInputs = false;
        this.ueInputMouseMessage = new _UeInstanceMessage_UeInputMouseMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputMouseMessage(dataChannelController);
        this.videoElementProvider = videoElementProvider;
    }
    /**
     * Handle when a mouse button is released
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.releaseMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse button is pressed
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    MouseController.prototype.pressMouseButtons = function (buttons, X, Y) {
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.primaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.secondaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.secondaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.auxiliaryButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fourthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fourthButton, X, Y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButtonsMask.fifthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.fifthButton, X, Y);
        }
    };
    /**
     * Handle when a mouse is moved
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     * @param deltaX - Mouse Delta X Coordinate
     * @param deltaY - Mouse Delta Y Coordinate
     */
    MouseController.prototype.sendMouseMove = function (X, Y, deltaX, deltaY) {
        if (this.printInputs) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "x: " + X + ", y:" + Y + ", dX: " + deltaX + ", dY: " + deltaY, 7);
        }
        var mouseCord = this.normaliseAndQuantiseUnsigned(X, Y);
        var deltaCode = this.normaliseAndQuantiseSigned(deltaX, deltaY);
        this.ueInputMouseMessage.sendMouseMove(mouseCord.x, mouseCord.y, deltaCode.x, deltaCode.y);
    };
    /**
     * Handles when a mouse button is pressed down
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseDown = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "mouse button " + button + " down at (" + X + ", " + Y + ")", 6);
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseDown(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse button is pressed up
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseUp = function (button, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "mouse button " + button + " up at (" + X + ", " + Y + ")", 6);
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseUp(button, coord.x, coord.y);
    };
    /**
     * Handles when a mouse wheel event
     * @param deltaY - Mouse Wheel data
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    MouseController.prototype.sendMouseWheel = function (deltaY, X, Y) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "mouse wheel with delta " + deltaY + " at (" + X + ", " + Y + ")", 6);
        var coord = this.normaliseAndQuantiseUnsigned(X, Y);
        this.ueInputMouseMessage.sendMouseWheel(deltaY * -1, coord.x, coord.y);
    };
    /**
     * Handles mouse enter
     */
    MouseController.prototype.sendMouseEnter = function () {
        this.ueInputMouseMessage.sendMouseEnter();
    };
    /**
     * Handles mouse Leave
     */
    MouseController.prototype.sendMouseLeave = function () {
        this.ueInputMouseMessage.sendMouseLeave();
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Unsigned Data Type
     */
    MouseController.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / rootDiv.clientWidth;
                var normalizedY = ratio * (y / rootDiv.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = ratio * (x / rootDiv.clientWidth - 0.5) + 0.5;
                var normalizedY = y / rootDiv.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    /**
     * Denormalises and unquantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - unquantise and Denormalize Unsigned Data Type
     */
    MouseController.prototype.unquantiseAndDenormaliseUnsigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (this.unsignedOutOfRange + 1);
                var normalizedY = (y / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                return {
                    x: normalizedX * rootDiv.clientWidth,
                    y: normalizedY * rootDiv.clientHeight
                };
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned.
                var normalizedX = (x / (this.unsignedOutOfRange + 1) - 0.5) / ratio + 0.5;
                var normalizedY = y / (this.unsignedOutOfRange + 1);
                return {
                    x: normalizedX * rootDiv.clientWidth,
                    y: normalizedY * rootDiv.clientHeight
                };
            }
        }
    };
    /**
     * Normalises and Quantised the Mouse Coordinates
     * @param x - Mouse X Coordinate
     * @param y - Mouse Y Coordinate
     * @returns - Normalize And Quantize Signed Data Type
     */
    MouseController.prototype.normaliseAndQuantiseSigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / (0.5 * rootDiv.clientWidth);
                var normalizedY = (ratio * y) / (0.5 * rootDiv.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Signed.
                var normalizedX = (ratio * x) / (0.5 * rootDiv.clientWidth);
                var normalizedY = y / (0.5 * rootDiv.clientHeight);
                return {
                    x: normalizedX * this.signedOutOfRange,
                    y: normalizedY * this.signedOutOfRange
                };
            }
        }
    };
    return MouseController;
}());



/***/ }),

/***/ "./src/Inputs/SpecialKeyCodes.ts":
/*!***************************************!*\
  !*** ./src/Inputs/SpecialKeyCodes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SpecialKeyCodes: () => (/* binding */ SpecialKeyCodes)
/* harmony export */ });
/**
 * Registers the Special Key codes
 *  Must be kept in sync with JavaScriptKeyCodeToFKey C++ array.
 * The index of the entry in the array is the special key code given below.
 */
var SpecialKeyCodes = /** @class */ (function () {
    function SpecialKeyCodes() {
    }
    SpecialKeyCodes.backSpace = 8;
    SpecialKeyCodes.shift = 16;
    SpecialKeyCodes.control = 17;
    SpecialKeyCodes.alt = 18;
    SpecialKeyCodes.rightShift = 253;
    SpecialKeyCodes.rightControl = 254;
    SpecialKeyCodes.rightAlt = 255;
    return SpecialKeyCodes;
}());



/***/ }),

/***/ "./src/Inputs/TouchController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/TouchController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TouchController: () => (/* binding */ TouchController)
/* harmony export */ });
/* harmony import */ var _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../UeInstanceMessage/UeInputTouchMessage */ "./src/UeInstanceMessage/UeInputTouchMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");


/**
 * Handles the Touch input Events
 */
var TouchController = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - the data channel controller
     * @param playerElement - the player element DOM
     */
    function TouchController(dataChannelController, playerElement, videoElementProvider) {
        var _this = this;
        this.ueInputTouchMessage = new _UeInstanceMessage_UeInputTouchMessage__WEBPACK_IMPORTED_MODULE_0__.UeInputTouchMessage(dataChannelController, videoElementProvider);
        this.playerElement = playerElement;
        this.playerElement.ontouchstart = function (ev) { return _this.onTouchStart(ev); };
        this.playerElement.ontouchend = function (ev) { return _this.onTouchEnd(ev); };
        this.playerElement.ontouchmove = function (ev) { return _this.onTouchMove(ev); };
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "Touch Events Registered", 6);
    }
    /**
     * When a touch event starts
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchStart = function (touchEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "on Touch Start", 6);
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            var finger = this.ueInputTouchMessage.fingers.pop();
            if (finger === undefined) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "who has more then 10 fingers", 6);
            }
            this.ueInputTouchMessage.fingersIds[touch.identifier] = finger;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "touch.identifier: " + touch.identifier, 6);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "finger: " + finger, 6);
        }
        this.ueInputTouchMessage.sendTouchStart(touchEvent.changedTouches);
        touchEvent.preventDefault();
    };
    /**
     * When a touch event ends
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchEnd = function (touchEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "on Touch END", 6);
        for (var i = 0; i < touchEvent.changedTouches.length; i++) {
            var touch = touchEvent.changedTouches[i];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "on Forget Touch", 6);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "touch id: " + touch.identifier, 6);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "Fingers id Touch id: " + this.ueInputTouchMessage.fingersIds[touch.identifier], 6);
            this.ueInputTouchMessage.fingers.push(this.ueInputTouchMessage.fingersIds[touch.identifier]);
            this.ueInputTouchMessage.fingers.sort(function (a, b) { return b - a; });
            delete this.ueInputTouchMessage.fingersIds[touch.identifier];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "touch.identifier: " + touch.identifier, 6);
        }
        this.ueInputTouchMessage.sendTouchEnd(touchEvent.changedTouches);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), "Sucessful touch END", 6);
        touchEvent.preventDefault();
    };
    /**
     * when a moving touch event occurs
     * @param event - the touch event being intercepted
     */
    TouchController.prototype.onTouchMove = function (touchEvent) {
        this.ueInputTouchMessage.sendTouchMove(touchEvent.touches);
        touchEvent.preventDefault();
    };
    return TouchController;
}());



/***/ }),

/***/ "./src/Logger/Logger.ts":
/*!******************************!*\
  !*** ./src/Logger/Logger.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Logger: () => (/* binding */ Logger)
/* harmony export */ });
var Logger = /** @class */ (function () {
    function Logger() {
    }
    /**
     * Captures the stack and returns it
     * @returns the current stack
     */
    Logger.GetStackTrace = function () {
        var error = new Error();
        var formattedStack = "No Stack Available for this browser";
        // format the error
        if (error.stack) {
            formattedStack = error.stack.toString().replace(/Error/g, '');
        }
        return formattedStack;
    };
    ;
    /**
     * Set the log verbosity level
     */
    Logger.SetLoggerVerbosity = function (verboseLogLevel) {
        if (this.verboseLogLevel != null) {
            this.verboseLogLevel = verboseLogLevel;
        }
    };
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    Logger.Log = function (stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        var returnString = "Level: Log, Caller: " + stack + ", Msg: " + message;
        console.log(returnString);
    };
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    Logger.Info = function (stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        var returnString = "Level: Info, Msg: " + message;
        console.info(returnString);
    };
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     */
    Logger.Error = function (stack, message) {
        var returnString = "Level: Error, Caller: " + stack + ", Msg: " + message;
        console.error(returnString);
    };
    Logger.verboseLogLevel = 5;
    return Logger;
}());



/***/ }),

/***/ "./src/MicPlayer/MicController.ts":
/*!****************************************!*\
  !*** ./src/MicPlayer/MicController.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MicController: () => (/* binding */ MicController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

var MicController = /** @class */ (function () {
    function MicController(urlParams) {
        // get the mic status from the url 
        this.useMic = urlParams.has('useMic');
        if (this.useMic) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Microphone access is enabled IT IS EXPERIMENTAL AND IS NOT PROPERLY SUPPORTED ACROSS UE. IF IT DOES NOT WORK ITS YOUR OWN FAULT! YOU HAVE BEEN TOLD.");
        }
        // if (!this.useMic) {
        //     Logger.Log(Logger.GetStackTrace(), "Microphone access is not enabled. Pass ?useMic in the url to enable it.");
        // }
        // check if the connection is not local and is https or mic will not work 
        this.isLocalhostConnection = location.hostname === "localhost" || location.hostname === "127.0.0.1";
        this.isHttpsConnection = location.protocol === 'https:';
        if (this.useMic && !this.isLocalhostConnection && !this.isHttpsConnection) {
            this.useMic = false;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.");
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
        }
    }
    return MicController;
}());



/***/ }),

/***/ "./src/PeerConnectionController/AggregatedStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/AggregatedStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AggregatedStats: () => (/* binding */ AggregatedStats)
/* harmony export */ });
/* harmony import */ var _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InboundAudioStats */ "./src/PeerConnectionController/InboundAudioStats.ts");
/* harmony import */ var _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InboundVideoStats */ "./src/PeerConnectionController/InboundVideoStats.ts");
/* harmony import */ var _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _CandidateStat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./OutBoundVideoStats */ "./src/PeerConnectionController/OutBoundVideoStats.ts");
/* harmony import */ var _StreamStats__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StreamStats */ "./src/PeerConnectionController/StreamStats.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};








var AggregatedStats = /** @class */ (function () {
    function AggregatedStats() {
        this.inboundVideoStats = new _InboundVideoStats__WEBPACK_IMPORTED_MODULE_1__.inboundVideoStats();
        this.inboundAudioStats = new _InboundAudioStats__WEBPACK_IMPORTED_MODULE_0__.inboundAudioStats();
        this.candidatePair = new _CandidatePairStats__WEBPACK_IMPORTED_MODULE_4__.CandidatePairStats();
        this.dataChannelStats = new _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__.dataChannelStats();
        this.outBoundVideoStats = new _OutBoundVideoStats__WEBPACK_IMPORTED_MODULE_5__.OutBoundVideoStats();
        this.streamStats = new _StreamStats__WEBPACK_IMPORTED_MODULE_6__.StreamStats();
    }
    /**
     * Gather all the information from the RTC Peer Connection Report
     * @param rtcStatsReport - RTC Stats Report
     */
    AggregatedStats.prototype.processStats = function (rtcStatsReport) {
        var _this = this;
        this.localCandidates = new Array();
        this.remoteCandidates = new Array();
        rtcStatsReport.forEach(function (stat) {
            var type = stat.type;
            switch (type) {
                case "candidate-pair":
                    _this.handleCandidatePair(stat);
                    break;
                case "certificate":
                    break;
                case "codec":
                    break;
                case "csrc":
                    break;
                case "data-channel":
                    _this.handleDataChannel(stat);
                    break;
                case "inbound-rtp":
                    _this.handleInBoundRTP(stat);
                    break;
                case "local-candidate":
                    _this.handleLocalCandidate(stat);
                    break;
                case "media-source":
                    break;
                case "outbound-rtp":
                    break;
                case "peer-connection":
                    break;
                case "remote-candidate":
                    _this.handleRemoteCandidate(stat);
                    break;
                case "remote-inbound-rtp":
                    break;
                case "remote-outbound-rtp":
                    _this.handleRemoteOutBound(stat);
                    break;
                case "track":
                    _this.handleTrack(stat);
                    break;
                case "transport":
                    break;
                case "stream":
                    _this.handleStream(stat);
                    break;
                default:
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.GetStackTrace(), "unhandled Stat Type");
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.GetStackTrace(), stat);
                    break;
            }
        });
    };
    /**
     * Process stream stats data from webrtc
     *
     * @param stat the stats coming in from webrtc
     */
    AggregatedStats.prototype.handleStream = function (stat) {
        this.streamStats = stat;
    };
    /**
     * Process the Ice Candidate Pair Data
     */
    AggregatedStats.prototype.handleCandidatePair = function (stat) {
        this.candidatePair.bytesReceived = stat.bytesReceived;
        this.candidatePair.bytesSent = stat.bytesSent;
        this.candidatePair.localCandidateId = stat.localCandidateId;
        this.candidatePair.remoteCandidateId = stat.remoteCandidateId;
        this.candidatePair.nominated = stat.nominated;
        this.candidatePair.readable = stat.readable;
        this.candidatePair.selected = stat.selected;
        this.candidatePair.writable = stat.writable;
        this.candidatePair.state = stat.state;
        this.candidatePair.currentRoundTripTime = stat.currentRoundTripTime;
    };
    /**
     * Process the Data Channel Data
     */
    AggregatedStats.prototype.handleDataChannel = function (stat) {
        this.dataChannelStats.bytesReceived = stat.dataytesReceived;
        this.dataChannelStats.bytesSent = stat.bytesSent;
        this.dataChannelStats.dataChannelIdentifier = stat.dataChannelIdentifier;
        this.dataChannelStats.id = stat.id;
        this.dataChannelStats.label = stat.label;
        this.dataChannelStats.messagesReceived = stat.messagesReceived;
        this.dataChannelStats.messagesSent = stat.messagesSent;
        this.dataChannelStats.protocol = stat.protocol;
        this.dataChannelStats.state = stat.state;
        this.dataChannelStats.timestamp = stat.timestamp;
    };
    /**
     * Process the Local Ice Candidate Data
     */
    AggregatedStats.prototype.handleLocalCandidate = function (stat) {
        var localCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        localCandidate.label = "local-candidate";
        localCandidate.address = stat.address;
        localCandidate.port = stat.port;
        localCandidate.protocol = stat.protocol;
        localCandidate.candidateType = stat.candidateType;
        localCandidate.id = stat.id;
        this.localCandidates.push(localCandidate);
    };
    /**
     * Process the Remote Ice Candidate Data
     */
    AggregatedStats.prototype.handleRemoteCandidate = function (stat) {
        var RemoteCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_3__.CandidateStat();
        RemoteCandidate.label = "local-candidate";
        RemoteCandidate.address = stat.address;
        RemoteCandidate.port = stat.port;
        RemoteCandidate.protocol = stat.protocol;
        RemoteCandidate.id = stat.id;
        RemoteCandidate.candidateType = stat.candidateType;
        this.remoteCandidates.push(RemoteCandidate);
    };
    /**
     * Process the Inbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleInBoundRTP = function (stat) {
        switch (stat.kind) {
            case "video":
                this.inboundVideoStats.timestamp = stat.timestamp;
                this.inboundVideoStats.bytesReceived = stat.bytesReceived;
                this.inboundVideoStats.framesDecoded = stat.framesDecoded;
                this.inboundVideoStats.packetsLost = stat.packetsLost;
                this.inboundVideoStats.jitter = stat.jitter;
                this.inboundVideoStats.bytesReceivedStart = (this.inboundVideoStats.bytesReceivedStart == null) ? stat.bytesReceived : this.inboundVideoStats.bytesReceivedStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                this.inboundVideoStats.timestampStart = (this.inboundVideoStats.timestampStart == null) ? stat.timestamp : this.inboundVideoStats.timestampStart;
                this.inboundVideoStats.framesDecodedStart = (this.inboundVideoStats.framesDecodedStart == null) ? stat.framesDecoded : this.inboundVideoStats.framesDecodedStart;
                if (this.lastVideoStats != undefined) {
                    this.inboundVideoStats.bitrate = 8 * (stat.bytesReceived - this.lastVideoStats.bytesReceived) / (stat.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.bitrate = Math.floor(this.inboundVideoStats.bitrate);
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.lowBitrate == undefined || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.lowBitrate = (this.inboundVideoStats.bitrate < this.inboundVideoStats.lowBitrate || Number.isNaN(this.inboundVideoStats.lowBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.lowBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.highBitrate == undefined || Number.isNaN(this.inboundVideoStats.highBitrate)) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.highBitrate = (this.inboundVideoStats.bitrate > this.inboundVideoStats.highBitrate) ? this.inboundVideoStats.bitrate : this.inboundVideoStats.highBitrate;
                    this.inboundVideoStats.avgBitrate = 8 * (this.inboundVideoStats.bytesReceived - this.lastVideoStats.bytesReceived) / (this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp);
                    this.inboundVideoStats.avgBitrate = Math.floor(this.inboundVideoStats.avgBitrate);
                    this.inboundVideoStats.framerate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecoded) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestamp) / 1000);
                    this.inboundVideoStats.framerate = Math.floor(this.inboundVideoStats.framerate);
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.lowFramerate == undefined || Number.isNaN(this.inboundVideoStats.lowFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.lowFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.lowFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.lowFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.highFramerate == undefined || Number.isNaN(this.inboundVideoStats.highFramerate)) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.highFramerate = (this.inboundVideoStats.framerate < this.inboundVideoStats.highFramerate) ? this.inboundVideoStats.framerate : this.inboundVideoStats.highFramerate;
                    this.inboundVideoStats.averageFrameRate = (this.inboundVideoStats.framesDecoded - this.lastVideoStats.framesDecodedStart) / ((this.inboundVideoStats.timestamp - this.lastVideoStats.timestampStart) / 1000);
                    this.inboundVideoStats.averageFrameRate = Math.floor(this.inboundVideoStats.averageFrameRate);
                }
                this.lastVideoStats = __assign({}, this.inboundVideoStats);
                break;
            case "audio":
                this.inboundAudioStats.bytesReceived = stat.bytesReceived;
                this.inboundAudioStats.jitter = stat.jitter;
                this.inboundAudioStats.packetsLost = stat.packetslost;
                this.inboundAudioStats.timestamp = stat.timestamp;
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_7__.Logger.GetStackTrace(), "Kind is not handled");
                break;
        }
    };
    /**
     * Process the outbound RTP Audio and Video Data
     */
    AggregatedStats.prototype.handleRemoteOutBound = function (stat) {
        switch (stat.kind) {
            case "video":
                this.outBoundVideoStats.bytesSent = stat.bytesSent;
                this.outBoundVideoStats.id = stat.id;
                this.outBoundVideoStats.localId = stat.localId;
                this.outBoundVideoStats.packetsSent = stat.packetsSent;
                this.outBoundVideoStats.remoteTimestamp = stat.remoteTimestamp;
                this.outBoundVideoStats.timestamp = stat.timestamp;
                break;
            case "audio":
                break;
            default:
                break;
        }
    };
    /**
     * Process the Inbound Video Track Data
     */
    AggregatedStats.prototype.handleTrack = function (stat) {
        // we only want to extract stats from the video track
        if (stat.type === 'track' && (stat.trackIdentifier === 'video_label' || stat.kind === 'video')) {
            this.inboundVideoStats.framesDropped = stat.framesDropped;
            this.inboundVideoStats.framesReceived = stat.framesReceived;
            this.inboundVideoStats.framesDroppedPercentage = stat.framesDropped / stat.framesReceived * 100;
            this.inboundVideoStats.frameHeight = stat.frameHeight;
            this.inboundVideoStats.frameWidth = stat.frameWidth;
            this.inboundVideoStats.frameHeightStart = (this.inboundVideoStats.frameHeightStart == null) ? stat.frameHeight : this.inboundVideoStats.frameHeightStart;
            this.inboundVideoStats.frameWidthStart = (this.inboundVideoStats.frameWidthStart == null) ? stat.frameWidth : this.inboundVideoStats.frameWidthStart;
        }
    };
    /**
     * Check if a value coming in from our stats is actually a number
     */
    AggregatedStats.prototype.isNumber = function (value) {
        return typeof value === 'number' && isFinite(value);
    };
    return AggregatedStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidatePairStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/CandidatePairStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CandidatePairStats: () => (/* binding */ CandidatePairStats)
/* harmony export */ });
/**
 * ICE Candidate Pair Stats collected from the RTC Stats Report
 */
var CandidatePairStats = /** @class */ (function () {
    function CandidatePairStats() {
    }
    return CandidatePairStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/CandidateStat.ts":
/*!*******************************************************!*\
  !*** ./src/PeerConnectionController/CandidateStat.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CandidateStat: () => (/* binding */ CandidateStat)
/* harmony export */ });
/**
 * ICE Candidate Stat collected from the RTC Stats Report
 */
var CandidateStat = /** @class */ (function () {
    function CandidateStat() {
    }
    return CandidateStat;
}());



/***/ }),

/***/ "./src/PeerConnectionController/DataChannelStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/DataChannelStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dataChannelStats: () => (/* binding */ dataChannelStats)
/* harmony export */ });
/**
 * Data Channel Stats collected from the RTC Stats Report
 */
var dataChannelStats = /** @class */ (function () {
    function dataChannelStats() {
    }
    return dataChannelStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundAudioStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundAudioStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   inboundAudioStats: () => (/* binding */ inboundAudioStats)
/* harmony export */ });
/**
 * Inbound Audio Stats collected from the RTC Stats Report
 */
var inboundAudioStats = /** @class */ (function () {
    function inboundAudioStats() {
    }
    return inboundAudioStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/InboundVideoStats.ts":
/*!***********************************************************!*\
  !*** ./src/PeerConnectionController/InboundVideoStats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   inboundVideoStats: () => (/* binding */ inboundVideoStats)
/* harmony export */ });
/**
 * Inbound Video Stats collected from the RTC Stats Report
 */
var inboundVideoStats = /** @class */ (function () {
    function inboundVideoStats() {
        this.receiveToCompositeMs = 0;
        this.timestamp = 0;
        this.bytesReceived = 0;
        this.framesDecoded = 0;
        this.packetsLost = 0;
        this.bytesReceivedStart = 0;
        this.framesDecodedStart = 0;
        this.timestampStart = 0;
        this.bitrate = 0;
        this.lowBitrate = 0;
        this.highBitrate = 0;
        this.avgBitrate = 0;
        this.framerate = 0;
        this.lowFramerate = 0;
        this.highFramerate = 0;
        this.averageFrameRate = 0;
        this.framesDropped = 0;
        this.framesReceived = 0;
        this.framesDroppedPercentage = 0;
        this.frameHeight = 0;
        this.frameWidth = 0;
        this.frameHeightStart = 0;
        this.frameWidthStart = 0;
        this.jitter = 0;
    }
    return inboundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/OutBoundVideoStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/OutBoundVideoStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   OutBoundVideoStats: () => (/* binding */ OutBoundVideoStats)
/* harmony export */ });
/**
 * Outbound Video Stats collected from the RTC Stats Report
 */
var OutBoundVideoStats = /** @class */ (function () {
    function OutBoundVideoStats() {
    }
    return OutBoundVideoStats;
}());



/***/ }),

/***/ "./src/PeerConnectionController/PeerConnectionController.ts":
/*!******************************************************************!*\
  !*** ./src/PeerConnectionController/PeerConnectionController.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PeerConnectionController: () => (/* binding */ PeerConnectionController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


/**
 * Handles the Peer Connection
 */
var PeerConnectionController = /** @class */ (function () {
    /**
     * Create a new RTC Peer Connection client
     * @param options - Peer connection Options
     */
    function PeerConnectionController(options, turnState) {
        var _this = this;
        // Set the turn state to true or false for rtc options
        this.forceTurn = turnState;
        if (this.forceTurn === true) {
            options.iceTransportPolicy = "relay";
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Forcing TURN usage by setting ICE Transport Policy in peer connection config.", 6);
        }
        // build a new peer connection with the options
        this.peerConnection = new RTCPeerConnection(options);
        this.peerConnection.onsignalingstatechange = function (ev) { return _this.handleSignalStateChange(ev); };
        this.peerConnection.oniceconnectionstatechange = function (ev) { return _this.handleIceConnectionStateChange(ev); };
        this.peerConnection.onicegatheringstatechange = function (ev) { return _this.handleIceGatheringStateChange(ev); };
        this.peerConnection.ontrack = function (ev) { return _this.handleOnTrack(ev); };
        this.peerConnection.onicecandidate = function (ev) { return _this.handelIceCandidate(ev); };
        this.aggregatedStats = new _AggregatedStats__WEBPACK_IMPORTED_MODULE_1__.AggregatedStats();
    }
    /**
     * Create an offer for the Web RTC handshake and send the offer to the signaling server via websocket
     * @param offerOptions - RTC Offer Options
     */
    PeerConnectionController.prototype.createOffer = function (offerOptions, useMic) {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Create Offer", 6);
        this.setupTracksToSendAsync(useMic).finally(function () { });
        this.peerConnection.createOffer(offerOptions).then(function (offer) {
            _this.showTextOverlayConnecting();
            offer.sdp = _this.mungeOffer(offer.sdp, useMic);
            _this.peerConnection.setLocalDescription(offer);
            _this.onSendWebRTCOffer(offer);
        }).catch(function (onRejectedReason) {
            _this.showTextOverlaySetupFailure();
        });
    };
    /**
     * Generate Aggregated Stats and then fire a onVideo Stats event
     */
    PeerConnectionController.prototype.generateStats = function () {
        /*this.peerConnection.getStats(null).then((StatsData: RTCStatsReport) => {
            this.aggregatedStats.processStats(StatsData);
            this.onVideoStats(this.aggregatedStats);
        });*/
    };
    /**
     * Close The Peer Connection
     */
    PeerConnectionController.prototype.close = function () {
        if (this.peerConnection) {
            this.peerConnection.close();
            this.peerConnection = null;
        }
    };
    /**
     * Modify the Session Descriptor
     * @param sdp - Session Descriptor as a string
     * @param useMic - Is the microphone in use
     * @returns A modified Session Descriptor
     */
    PeerConnectionController.prototype.mungeOffer = function (sdp, useMic) {
        var temp = sdp;
        temp.replace(/(a=fmtp:\d+ .*level-asymmetry-allowed=.*)\r\n/gm, "$1;x-google-start-bitrate=10000;x-google-max-bitrate=100000\r\n");
        temp.replace('useinbandfec=1', 'useinbandfec=1;stereo=1;sprop-maxcapturerate=48000');
        // Increase the capture rate of audio so we can have higher quality audio over mic
        if (useMic) {
            temp = temp.replace('useinbandfec=1', 'useinbandfec=1;sprop-maxcapturerate=48000;maxaveragebitrate=510000');
        }
        return temp;
    };
    /**
     * Set the Remote Descriptor from the signaling server to the RTC Peer Connection
     * @param sdpAnswer - RTC Session Descriptor from the Signaling Server
     */
    PeerConnectionController.prototype.handleAnswer = function (sdpAnswer) {
        this.peerConnection.setRemoteDescription(sdpAnswer);
    };
    /**
     * When a Ice Candidate is received add to the RTC Peer Connection
     * @param iceCandidate - RTC Ice Candidate from the Signaling Server
     */
    PeerConnectionController.prototype.handleOnIce = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "peerconnection handleOnIce", 6);
        // // if forcing TURN, reject any candidates not relay
        if (this.forceTurn) {
            // check if no relay address is found, if so, we are assuming it means no TURN server
            if (iceCandidate.candidate.indexOf("relay") < 0) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Dropping candidate because it was not TURN relay. | Type= " + iceCandidate.type + " | Protocol= " + iceCandidate.protocol + " | Address=" + iceCandidate.address + " | Port=" + iceCandidate.port + " |", 6);
                return;
            }
        }
        this.peerConnection.addIceCandidate(iceCandidate);
    };
    /**
     * When the RTC Peer Connection Signaling server state Changes
     * @param state - Signaling Server State Change Event
     */
    PeerConnectionController.prototype.handleSignalStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'signaling state change: ' + state, 6);
    };
    /**
     * Handle when the Ice Connection State Changes
     * @param state - Ice Connection State
     */
    PeerConnectionController.prototype.handleIceConnectionStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'ice connection state change: ' + state, 6);
    };
    /**
     * Handle when the Ice Gathering State Changes
     * @param state - Ice Gathering State Change
     */
    PeerConnectionController.prototype.handleIceGatheringStateChange = function (state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'ice gathering state change: ' + JSON.stringify(state), 6);
    };
    /**
     * Activates the onTrack method
     * @param event - The webRtc track event
     */
    PeerConnectionController.prototype.handleOnTrack = function (event) {
        this.onTrack(event);
    };
    /**
     * Activates the onPeerIceCandidate
     * @param event - The peer ice candidate
     */
    PeerConnectionController.prototype.handelIceCandidate = function (event) {
        this.onPeerIceCandidate(event);
    };
    /**
     * An override method for onTrack for use outside of the PeerConnectionController
     * @param trackEvent - The webRtc track event
     */
    PeerConnectionController.prototype.onTrack = function (trackEvent) { };
    /**
     * An override method for onPeerIceCandidate for use outside of the PeerConnectionController
     * @param peerConnectionIceEvent - The peer ice candidate
     */
    PeerConnectionController.prototype.onPeerIceCandidate = function (peerConnectionIceEvent) { };
    /**
     * Setup tracks on the RTC Peer Connection
     */
    PeerConnectionController.prototype.setupTracksToSendAsync = function (useMic) {
        return __awaiter(this, void 0, void 0, function () {
            var hasTransceivers, audioOptions, mediaSendOptions, stream, _i, _a, transceiver, _b, _c, track, _d, _e, track;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        hasTransceivers = this.peerConnection.getTransceivers().length > 0;
                        // Setup a transceiver for getting UE video
                        this.peerConnection.addTransceiver("video", { direction: "recvonly" });
                        if (!!useMic) return [3 /*break*/, 1];
                        this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        return [3 /*break*/, 3];
                    case 1:
                        audioOptions = useMic ?
                            {
                                autoGainControl: false,
                                channelCount: 1,
                                echoCancellation: false,
                                latency: 0,
                                noiseSuppression: false,
                                sampleRate: 48000,
                                sampleSize: 16,
                                volume: 1.0
                            } : false;
                        mediaSendOptions = {
                            video: false,
                            audio: audioOptions,
                        };
                        return [4 /*yield*/, navigator.mediaDevices.getUserMedia(mediaSendOptions)];
                    case 2:
                        stream = _f.sent();
                        if (stream) {
                            if (hasTransceivers) {
                                for (_i = 0, _a = this.peerConnection.getTransceivers(); _i < _a.length; _i++) {
                                    transceiver = _a[_i];
                                    if (transceiver && transceiver.receiver && transceiver.receiver.track && transceiver.receiver.track.kind === "audio") {
                                        for (_b = 0, _c = stream.getTracks(); _b < _c.length; _b++) {
                                            track = _c[_b];
                                            if (track.kind && track.kind == "audio") {
                                                transceiver.sender.replaceTrack(track);
                                                transceiver.direction = "sendrecv";
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                for (_d = 0, _e = stream.getTracks(); _d < _e.length; _d++) {
                                    track = _e[_d];
                                    if (track.kind && track.kind == "audio") {
                                        this.peerConnection.addTransceiver(track, { direction: "sendrecv" });
                                    }
                                }
                            }
                        }
                        else {
                            this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
                        }
                        _f.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * And override event for when the video stats are fired
     * @param event - Aggregated Stats
     */
    PeerConnectionController.prototype.onVideoStats = function (event) { };
    /**
     * Event to send the RTC offer to the Signaling server
     * @param offer - RTC Offer
     */
    PeerConnectionController.prototype.onSendWebRTCOffer = function (offer) { };
    /**
     * An override for showing the Peer connection connecting Overlay
     */
    PeerConnectionController.prototype.showTextOverlayConnecting = function () { };
    /**
     * An override for showing the Peer connection Failed overlay
     */
    PeerConnectionController.prototype.showTextOverlaySetupFailure = function () { };
    return PeerConnectionController;
}());



/***/ }),

/***/ "./src/PeerConnectionController/StreamStats.ts":
/*!*****************************************************!*\
  !*** ./src/PeerConnectionController/StreamStats.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StreamStats: () => (/* binding */ StreamStats)
/* harmony export */ });
/**
 * Class to hold the stream stats data coming in from webRtc
 */
var StreamStats = /** @class */ (function () {
    function StreamStats() {
    }
    return StreamStats;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeControlMessage.ts":
/*!***************************************************!*\
  !*** ./src/UeInstanceMessage/UeControlMessage.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UeControlMessage: () => (/* binding */ UeControlMessage)
/* harmony export */ });
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
/* harmony import */ var _UeDescriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles Sending control messages to the UE Instance
 */
var UeControlMessage = /** @class */ (function (_super) {
    __extends(UeControlMessage, _super);
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeControlMessage(dataChannelController) {
        return _super.call(this, dataChannelController) || this;
    }
    /**
     * Send IFrame Request to the UE Instance
     */
    UeControlMessage.prototype.SendIFrameRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.iFrameRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Request to Take Quality Control to the UE Instance
     */
    UeControlMessage.prototype.SendRequestQualityControl = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestQualityControl]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Max FPS Request to the UE Instance
     */
    UeControlMessage.prototype.SendMaxFpsRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.maxFpsRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send Average Bitrate Request to the UE Instance
     */
    UeControlMessage.prototype.SendAverageBitrateRequest = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.averageBitrateRequest]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Start Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStartStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.startStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Stop Streaming Message to the UE Instance
     */
    UeControlMessage.prototype.SendStopStreaming = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.stopStreaming]);
        this.sendData(payload.buffer);
    };
    /**
     * Send a Latency Test to the UE Instance
     * @param StartTimeMs - Start Time of the Latency test
     */
    UeControlMessage.prototype.sendLatencyTest = function (StartTimeMs) {
        var payload = {
            StartTime: StartTimeMs,
        };
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.latencyTest, JSON.stringify(payload));
    };
    /**
     * Send a Request Initial Settings to the UE Instance
     */
    UeControlMessage.prototype.SendRequestInitialSettings = function () {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_0__.UeMessageType.requestInitialSettings]);
        this.sendData(payload.buffer);
    };
    return UeControlMessage;
}(_UeDescriptor__WEBPACK_IMPORTED_MODULE_1__.UeDescriptor));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDataMessage.ts":
/*!************************************************!*\
  !*** ./src/UeInstanceMessage/UeDataMessage.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UeDataMessage: () => (/* binding */ UeDataMessage)
/* harmony export */ });
/**
 * Handles sending a message to the UE Instance
 */
var UeDataMessage = /** @class */ (function () {
    /**
     *
     * @param dataChannelController - Data Channel Controller
     */
    function UeDataMessage(dataChannelController) {
        this.dataChannelController = dataChannelController;
    }
    /**
     * Send an Array Buffer to the UE Instance
     * @param buffer - Message Buffer Array
     */
    UeDataMessage.prototype.sendData = function (buffer) {
        this.dataChannelController.sendData(buffer);
    };
    return UeDataMessage;
}());



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptor.ts":
/*!***********************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptor.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UeDescriptor: () => (/* binding */ UeDescriptor)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending a Descriptor to the UE Instance
 */
var UeDescriptor = /** @class */ (function (_super) {
    __extends(UeDescriptor, _super);
    /**
    * @param datachannelController - Data Channel Controller
    */
    function UeDescriptor(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send a Descriptor to the UE Instances
     * @param messageType - UE Message Type
     * @param JSODescriptor - Descriptor Message as JSON
     */
    UeDescriptor.prototype.sendDescriptor = function (messageType, JSODescriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending: " + JSODescriptor, 6);
        // Add the UTF-16 JSON string to the array byte buffer, going two bytes at
        // a time.
        var data = new DataView(new ArrayBuffer(1 + 2 + 2 * JSODescriptor.length));
        var byteIdx = 0;
        data.setUint8(byteIdx, messageType);
        byteIdx++;
        data.setUint16(byteIdx, JSODescriptor.length, true);
        byteIdx += 2;
        for (var i = 0; i < JSODescriptor.length; i++) {
            data.setUint16(byteIdx, JSODescriptor.charCodeAt(i), true);
            byteIdx += 2;
        }
        this.sendData(data.buffer);
    };
    return UeDescriptor;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeDescriptorUi.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeDescriptorUi.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UeDescriptorUi: () => (/* binding */ UeDescriptorUi)
/* harmony export */ });
/* harmony import */ var _UeDescriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDescriptor */ "./src/UeInstanceMessage/UeDescriptor.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles the Sending of a UI Descriptor to the UE Instance
 */
var UeDescriptorUi = /** @class */ (function (_super) {
    __extends(UeDescriptorUi, _super);
    /**
     * @param dataChannelController - Data Channel Controller
     */
    function UeDescriptorUi(dataChannelController, config) {
        var _this = _super.call(this, dataChannelController) || this;
        _this.dataChannelController = dataChannelController;
        _this.config = config;
        return _this;
    }
    /**
     * Send a set res UI Descriptor to UE Instance
     * @param width - Width of res
     * @param height - Height of res
     */
    UeDescriptorUi.prototype.sendUpdateVideoStreamSize = function (width, height) {
        if (this.config.isMobile) {
            width *= 2;
            height *= 2;
        }
        var s = JSON.stringify({
            "Resolution.Width": width,
            "Resolution.Height": height
        });
        var n = {
            id: 51
        };
        var r = new DataView(new ArrayBuffer(3 + 2 * s.length));
        var o = 0;
        r.setUint8(o, n.id), o++, r.setUint16(o, s.length, !0), o += 2;
        for (var e = 0; e < s.length; e++) {
            r.setUint16(o, s.charCodeAt(e), !0);
            o += 2;
        }
        this.dataChannelController.sendData(r.buffer);
    };
    /**
     * Send a stat fps UI Descriptor to UE Instance
     */
    UeDescriptorUi.prototype.sendShowFps = function () {
        this.sendUiConsoleInteraction("stat fps");
    };
    /**
     * Send a Encoder Rate Control to UE Instance
     * @param rateControl - Rate Control "CBR" | "VBR" | "ConstQP"
     */
    UeDescriptorUi.prototype.sendEncoderRateControl = function (rateControl) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.RateControl " + rateControl);
    };
    /**
     * Send Encoder Target Bit Rate to the UE Instance
     * @param targetBitRate - Send a Target Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderTargetBitRate = function (targetBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.TargetBitrate " + (targetBitRate > 0 ? targetBitRate : -1));
    };
    /**
     * Send Encoder Max Bit Rate VBR to UE Instance
     * @param maxBitRate - Send A Max Bit Rate
     */
    UeDescriptorUi.prototype.sendEncoderMaxBitrateVbr = function (maxBitRate) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxBitrateVBR " + (maxBitRate > 0 ? maxBitRate : 1));
    };
    /**
     * Send the Minimum Quantization Parameter to the UE Instance
     * @param minQP - Minimum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMinQP = function (minQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MinQP " + minQP);
    };
    /**
     * Send the Maximum Quantization Parameter to the UE Instance
     * @param maxQP - Maximum Quantization Parameter
     */
    UeDescriptorUi.prototype.sendEncoderMaxQP = function (maxQP) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.MaxQP " + maxQP);
    };
    /**
     * Send Enable Filler Data to the UE Instance
     * @param enable - True
     */
    UeDescriptorUi.prototype.sendEncoderEnableFillerData = function (enable) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.EnableFillerData " + Number(enable).valueOf());
    };
    /**
     * Send Encoder MultiPass to UE Instance
     * @param multiPass - MultiPass "DISABLED" | "QUARTER" | "FULL"
     */
    UeDescriptorUi.prototype.sendEncoderMultiPass = function (multiPass) {
        this.sendUiConsoleInteraction("PixelStreaming.Encoder.Multipass " + multiPass);
    };
    /**
     * Send a Web RTC Degradation Preference to UE Instance
     * @param DegradationPreference - Degradation Preference "BALANCED" | "MAINTAIN_FRAMERATE" | "MAINTAIN_RESOLUTION"
     */
    UeDescriptorUi.prototype.sendWebRtcDegradationPreference = function (DegradationPreference) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.DegradationPreference " + DegradationPreference);
    };
    /**
     * Sends the Max FPS to the UE Instance
     * @param MaxFps - Web RTC Max Frames Per Second
     */
    UeDescriptorUi.prototype.sendWebRtcMaxFps = function (MaxFps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxFps " + MaxFps);
    };
    /**
    * Sends the FPS to the UE Instance used un UE 5.0
    * @param Fps - Web RTC Frames Per Second
    */
    UeDescriptorUi.prototype.sendWebRtcFps = function (Fps) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.Fps " + Fps);
    };
    /**
     * Sends the Minimum bit rate to the UE Instance
     * @param MinBitrate - Web RTC Minimum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMinBitrate = function (MinBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MinBitrate " + MinBitrate);
    };
    /**
     * Sends the Maximum bit rate to the UE Instance
     * @param MaxBitrate - Web RTC Maximum Bitrate
     */
    UeDescriptorUi.prototype.sendWebRtcMaxBitrate = function (MaxBitrate) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.MaxBitrate " + MaxBitrate);
    };
    /**
     * Sends the Low Quantization Parameter Threshold level to the UE Instance
     * @param LowQpThreshold - Low Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcLowQpThreshold = function (LowQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.LowQpThreshold " + LowQpThreshold);
    };
    /**
     * Sends the High Quantization Parameter Threshold level to the UE Instance
     * @param HighQpThreshold - High Quantization Parameter Threshold Level
     */
    UeDescriptorUi.prototype.sendWebRtcHighQpThreshold = function (HighQpThreshold) {
        this.sendUiConsoleInteraction("PixelStreaming.WebRTC.HighQpThreshold " + HighQpThreshold);
    };
    /**
     * Sends a descriptor string to the UE Interaction Instance
     * @param descriptor - the String descriptor to send
     */
    UeDescriptorUi.prototype.sendUiInteraction = function (descriptor) {
        this.sendDescriptor(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.uiInteraction, descriptor);
    };
    /**
     * Sends a console descriptor
     * @param descriptor - The string descriptor to send
     */
    UeDescriptorUi.prototype.sendUiConsoleInteraction = function (descriptor) {
        var payload = {
            Console: descriptor
        };
        this.sendUiInteraction(JSON.stringify(payload));
    };
    UeDescriptorUi.prototype.sendCommand = function (payload) {
        this.sendUiInteraction(JSON.stringify(payload));
    };
    return UeDescriptorUi;
}(_UeDescriptor__WEBPACK_IMPORTED_MODULE_0__.UeDescriptor));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputGamePadMessage.ts":
/*!********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputGamePadMessage.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UeInputGamePadMessage: () => (/* binding */ UeInputGamePadMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * The class for handling UE Input GamePad Messages. It implements the UeDataMessage class
 */
var UeInputGamePadMessage = /** @class */ (function (_super) {
    __extends(UeInputGamePadMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputGamePadMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send the controller button press data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex - the button index number
     * @param isRepeat - is this a repeat press
     */
    UeInputGamePadMessage.prototype.sendControllerButtonPressed = function (controllerIndex, buttonIndex, isRepeat) {
        var Data = new DataView(new ArrayBuffer(4));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonPressed);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
        Data.setUint8(3, Number(isRepeat).valueOf());
        this.sendData(Data.buffer);
    };
    /**
     * Send the controller button release data through the data channel
     * @param controllerIndex - the controller index number
     * @param buttonIndex  - the button index number
     */
    UeInputGamePadMessage.prototype.sendControllerButtonReleased = function (controllerIndex, buttonIndex) {
        var Data = new DataView(new ArrayBuffer(3));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadButtonReleased);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, buttonIndex);
        this.sendData(Data.buffer);
    };
    /**
     * Send controller axis data through the data channel
     * @param controllerIndex - the controller index number
     * @param axisIndex - the axis index number
     * @param analogValue - the analogue value number
     */
    UeInputGamePadMessage.prototype.sendControllerAxisMove = function (controllerIndex, axisIndex, analogValue) {
        var Data = new DataView(new ArrayBuffer(11));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.gamepadAnalog);
        Data.setUint8(1, controllerIndex);
        Data.setUint8(2, axisIndex);
        Data.setFloat64(3, analogValue, true);
        this.sendData(Data.buffer);
    };
    return UeInputGamePadMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputKeyboardMessage.ts":
/*!*********************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputKeyboardMessage.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UeInputKeyboardMessage: () => (/* binding */ UeInputKeyboardMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Keyboard Messages to the UE Instance
 */
var UeInputKeyboardMessage = /** @class */ (function (_super) {
    __extends(UeInputKeyboardMessage, _super);
    /**
     *
     * @param datachannelController - Data Channel Controller
     */
    function UeInputKeyboardMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Sends the key down to the UE Instance
     * @param keyCode - Key code
     * @param isRepeat - Is the key repeating
     */
    UeInputKeyboardMessage.prototype.sendKeyDown = function (keyCode, isRepeat) {
        var Payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyDown, keyCode, Number(isRepeat).valueOf()]);
        this.sendData(Payload.buffer);
    };
    /**
     * Sends the Key Up to the UE Instance
     * @param keyCode - Key code
     */
    UeInputKeyboardMessage.prototype.sendKeyUp = function (keyCode) {
        var payload = new Uint8Array([_UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyUp, keyCode]);
        this.sendData(payload.buffer);
    };
    /**
     * Sends the key press to the UE Instance
     * @param CharCode - character code of a key pressed
     */
    UeInputKeyboardMessage.prototype.sendKeyPress = function (CharCode) {
        var data = new DataView(new ArrayBuffer(3));
        data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.keyPress);
        data.setUint16(1, CharCode, true);
        this.sendData(data.buffer);
    };
    return UeInputKeyboardMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputMouseMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputMouseMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UeInputMouseMessage: () => (/* binding */ UeInputMouseMessage)
/* harmony export */ });
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


/**
 * Handles sending Mouse Messages to the UE Instance
 */
var UeInputMouseMessage = /** @class */ (function (_super) {
    __extends(UeInputMouseMessage, _super);
    /**
    * @param datachannelController - Data channel Controller
    */
    function UeInputMouseMessage(datachannelController) {
        return _super.call(this, datachannelController) || this;
    }
    /**
     * Send Mouse Enter to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseEnter = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseEnter);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Leave to the UE Instance
     */
    UeInputMouseMessage.prototype.sendMouseLeave = function () {
        var Data = new DataView(new ArrayBuffer(1));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseLeave);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Down to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseDown = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseDown);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Up to the UE Instance
     * @param button - Mouse Button
     * @param X - X Coordinate Value of mouse
     * @param Y - Y Coordinate Value of mouse
     */
    UeInputMouseMessage.prototype.sendMouseUp = function (button, X, Y) {
        var Data = new DataView(new ArrayBuffer(6));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseUp);
        Data.setUint8(1, button);
        Data.setUint16(2, X, true);
        Data.setUint16(4, Y, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse Move to the UE Instance
     * @param mouseCordX - X Mouse Coordinate
     * @param mouseCordY - Y Mouse Coordinate
     * @param deltaX - X Mouse Delta Coordinate
     * @param deltaY - Y Mouse Delta Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseMove = function (mouseCordX, mouseCordY, deltaX, deltaY) {
        var Data = new DataView(new ArrayBuffer(9));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseMove);
        Data.setUint16(1, mouseCordX, true);
        Data.setUint16(3, mouseCordY, true);
        Data.setInt16(5, deltaX, true);
        Data.setInt16(7, deltaY, true);
        this.sendData(Data.buffer);
    };
    /**
     * Send Mouse wheel event to the UE Instance
     * @param deltaY - Mouse Wheel delta Y
     * @param X - Mouse X Coordinate
     * @param Y - Mouse Y Coordinate
     */
    UeInputMouseMessage.prototype.sendMouseWheel = function (deltaY, X, Y) {
        var Data = new DataView(new ArrayBuffer(7));
        Data.setUint8(0, _UeMessageTypes__WEBPACK_IMPORTED_MODULE_1__.UeMessageType.mouseWheel);
        Data.setInt16(1, deltaY, true);
        Data.setUint16(3, X, true);
        Data.setUint16(5, Y, true);
        this.sendData(Data.buffer);
    };
    return UeInputMouseMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_0__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeInputTouchMessage.ts":
/*!******************************************************!*\
  !*** ./src/UeInstanceMessage/UeInputTouchMessage.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UeInputTouchMessage: () => (/* binding */ UeInputTouchMessage)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UeDataMessage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UeDataMessage */ "./src/UeInstanceMessage/UeDataMessage.ts");
/* harmony import */ var _UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UeMessageTypes */ "./src/UeInstanceMessage/UeMessageTypes.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



/**
 * Handles Sending Touch messages to the UE Instance
 */
var UeInputTouchMessage = /** @class */ (function (_super) {
    __extends(UeInputTouchMessage, _super);
    /**
     * @param datachannelController - Data channel Controller
     */
    function UeInputTouchMessage(datachannelController, videoElementProvider) {
        var _this = _super.call(this, datachannelController) || this;
        _this.unsignedOutOfRange = 65535;
        _this.signedOutOfRange = 32767;
        _this.videoElementProvider = videoElementProvider;
        _this.fingersIds = {};
        _this.fingers = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        _this.printInputs = false;
        return _this;
    }
    /**
     * Handles Touch event Start
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchStart = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchStart, touches);
    };
    /**
     * Handles Touch event End
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchEnd = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchEnd, touches);
    };
    /**
     * Handles Touch event Move
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouchMove = function (touches) {
        this.sendTouch(_UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchMove, touches);
    };
    /**
     * Handles Sending the Touch Event to the UE Instance via the Data channel
     * @param touches - Touch List
     */
    UeInputTouchMessage.prototype.sendTouch = function (touchType, touches) {
        var data = new DataView(new ArrayBuffer(2 + 7 * touches.length));
        data.setUint8(0, touchType);
        data.setUint8(1, touches.length);
        var byte = 2;
        for (var t = 0; t < touches.length; t++) {
            var touch = touches[t];
            //	    let offsetLeft = this.videoElementProvider.getVideoElement().getBoundingClientRect().left;
            //          let offsetTop = this.videoElementProvider.getVideoElement().getBoundingClientRect().top;
            var x = touch.clientX;
            var y = touch.clientY;
            if (touchType === _UeMessageTypes__WEBPACK_IMPORTED_MODULE_2__.UeMessageType.touchMove) {
                x -= this.videoElementProvider.getVideoElement().getBoundingClientRect().left;
                y -= this.videoElementProvider.getVideoElement().getBoundingClientRect().top;
            }
            var coord = this.normaliseAndQuantiseUnsigned(x, y);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "X: " + x + " Y: " + y, 6);
            //      byte =  2
            data.setUint16(byte, coord.x, true);
            byte += 2;
            //      byte =  4
            data.setUint16(byte, coord.y, true);
            byte += 2;
            //      byte =  6
            data.setUint8(byte, this.fingersIds[touch.identifier]);
            byte += 1;
            //      byte =  7
            data.setUint8(byte, 255 * touch.force); // force is between 0.0 and 1.0 so quantize into byte.
            byte += 1;
            //      byte =  8
            data.setUint8(byte, coord.inRange ? 1 : 0); // mark the touch as in the player or not
            byte += 1;
        }
        this.sendData(data.buffer);
    };
    /**
     * TO DO
     * @param x - X Coordinate
     * @param y - Y Coordinate
     * @returns - Normalised and Quantised Unsigned values
     */
    UeInputTouchMessage.prototype.normaliseAndQuantiseUnsigned = function (x, y) {
        var rootDiv = this.videoElementProvider.getVideoParentElement();
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rootDiv && videoElement) {
            var playerAspectRatio = rootDiv.clientHeight / rootDiv.clientWidth;
            var videoAspectRatio = videoElement.videoHeight / videoElement.videoWidth;
            // Unsigned XY positions are the ratio (0.0..1.0) along a viewport axis,
            // quantized into an uint16 (0..65536).
            // Signed XY deltas are the ratio (-1.0..1.0) along a viewport axis,
            // quantized into an int16 (-32767..32767).
            // This allows the browser viewport and client viewport to have a different
            // size.
            // Hack: Currently we set an out-of-range position to an extreme (65535)
            // as we can't yet accurately detect mouse enter and leave events
            // precisely inside a video with an aspect ratio which causes mattes.
            if (playerAspectRatio > videoAspectRatio) {
                var ratio = playerAspectRatio / videoAspectRatio;
                // Unsigned.
                var normalizedX = x / rootDiv.clientWidth;
                var normalizedY = ratio * (y / rootDiv.clientHeight - 0.5) + 0.5;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
            else {
                if (this.printInputs) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                }
                var ratio = videoAspectRatio / playerAspectRatio;
                // Unsigned. 
                var normalizedX = ratio * (x / rootDiv.clientWidth - 0.5) + 0.5;
                var normalizedY = y / rootDiv.clientHeight;
                if (normalizedX < 0.0 || normalizedX > 1.0 || normalizedY < 0.0 || normalizedY > 1.0) {
                    return {
                        inRange: false,
                        x: this.unsignedOutOfRange,
                        y: this.unsignedOutOfRange
                    };
                }
                else {
                    return {
                        inRange: true,
                        x: normalizedX * (this.unsignedOutOfRange + 1),
                        y: normalizedY * (this.unsignedOutOfRange + 1)
                    };
                }
            }
        }
    };
    return UeInputTouchMessage;
}(_UeDataMessage__WEBPACK_IMPORTED_MODULE_1__.UeDataMessage));



/***/ }),

/***/ "./src/UeInstanceMessage/UeMessageTypes.ts":
/*!*************************************************!*\
  !*** ./src/UeInstanceMessage/UeMessageTypes.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UeMessageType: () => (/* binding */ UeMessageType)
/* harmony export */ });
/**
 * The Type of message sent to the UE instance over the data channel
 * Must be kept in sync with PixelStreamingProtocol::EToUE4Msg C++ enum.
 * {@link https://github.com/EpicGames/UnrealEngine/blob/release/Engine/Plugins/Media/PixelStreaming/Source/PixelStreaming/Private/ProtocolDefs.h} Requires Login
 */
var UeMessageType = /** @class */ (function () {
    function UeMessageType() {
    }
    /**********************************************************************/
    /*
     * Control Messages. Range = 0..49.
     */
    UeMessageType.iFrameRequest = 0;
    UeMessageType.requestQualityControl = 1;
    UeMessageType.maxFpsRequest = 2;
    UeMessageType.averageBitrateRequest = 3;
    UeMessageType.startStreaming = 4;
    UeMessageType.stopStreaming = 5;
    UeMessageType.latencyTest = 6;
    UeMessageType.requestInitialSettings = 7;
    /**********************************************************************/
    /*
     * Input Messages. Range = 50..89.
     */
    // Generic Input Messages. Range = 50..59.
    UeMessageType.uiInteraction = 50;
    UeMessageType.command = 51;
    // Keyboard Input Message. Range = 60..69.
    UeMessageType.keyDown = 60;
    UeMessageType.keyUp = 61;
    UeMessageType.keyPress = 62;
    // Mouse Input Messages. Range = 70..79.
    UeMessageType.mouseEnter = 70;
    UeMessageType.mouseLeave = 71;
    UeMessageType.mouseDown = 72;
    UeMessageType.mouseUp = 73;
    UeMessageType.mouseMove = 74;
    UeMessageType.mouseWheel = 75;
    // Touch Input Messages. Range = 80..89.
    UeMessageType.touchStart = 80;
    UeMessageType.touchEnd = 81;
    UeMessageType.touchMove = 82;
    // Gamepad Input Messages. Range = 90..99
    UeMessageType.gamepadButtonPressed = 90;
    UeMessageType.gamepadButtonReleased = 91;
    UeMessageType.gamepadAnalog = 92;
    return UeMessageType;
}());



/***/ }),

/***/ "./src/Ui/UiController.ts":
/*!********************************!*\
  !*** ./src/Ui/UiController.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   UiController: () => (/* binding */ UiController),
/* harmony export */   playerStyleAttributes: () => (/* binding */ playerStyleAttributes)
/* harmony export */ });
/**
 * The Ui Controller class handles all methods that interact with the UI
 */
var UiController = /** @class */ (function () {
    function UiController(videoPlayerProvider) {
        var _this = this;
        this.lastTimeResized = new Date().getTime();
        this.videoPlayerProvider = videoPlayerProvider;
        this.playerStyleAttributes = new playerStyleAttributes();
        // set resize events to the windows if it is resized or its orientation is changed
        window.addEventListener('resize', function () { return _this.resizePlayerStyle(); }, true);
        window.addEventListener('orientationchange', function () { return _this.onOrientationChange(); });
    }
    /**
     * Resizes the player element to fill the window
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToFillWindow = function (playerElement) {
        var videoElement = this.videoPlayerProvider.getVideoElement();
        // Fill the player display in window, keeping picture's aspect ratio.
        var windowAspectRatio = window.innerHeight / window.innerWidth;
        var playerAspectRatio = playerElement.clientHeight / playerElement.clientWidth;
        // We want to keep the video ratio correct for the video stream
        var videoWidth;
        var videoHeight;
        if (!videoElement === undefined) {
            videoWidth = parseInt(videoElement.getAttribute("videoWidth"));
            videoHeight = parseInt(videoElement.getAttribute("videoHeight"));
        }
        var videoAspectRatio = videoHeight / videoWidth;
        if (isNaN(videoAspectRatio)) {
            //Video is not initialised yet so set playerElement to size of window
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
        else if (windowAspectRatio < playerAspectRatio) {
            // Window height is the constraining factor so to keep aspect ratio change width appropriately
            this.playerStyleAttributes.styleWidth = Math.floor(window.innerHeight / videoAspectRatio);
            this.playerStyleAttributes.styleHeight = window.innerHeight;
            this.playerStyleAttributes.styleTop = 0;
            this.playerStyleAttributes.styleLeft = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
        else {
            // Window width is the constraining factor so to keep aspect ratio change height appropriately
            this.playerStyleAttributes.styleWidth = window.innerWidth;
            this.playerStyleAttributes.styleHeight = Math.floor(window.innerWidth * videoAspectRatio);
            this.playerStyleAttributes.styleTop = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            this.playerStyleAttributes.styleLeft = 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
    };
    /**
     * Resizes the player element to fit the actual size of the stream
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToActualSize = function (playerElement) {
        var videoElement = this.videoPlayerProvider.getVideoElement();
        var videoElementLength;
        if (!videoElement === undefined) {
            videoElementLength = parseInt(videoElement.getAttribute("length"));
        }
        if (videoElementLength > 0) {
            // Display image in its actual size
            this.playerStyleAttributes.styleWidth = videoElement.videoWidth;
            this.playerStyleAttributes.styleHeight = videoElement.videoHeight;
            var Top = Math.floor((window.innerHeight - this.playerStyleAttributes.styleHeight) * 0.5);
            var Left = Math.floor((window.innerWidth - this.playerStyleAttributes.styleWidth) * 0.5);
            this.playerStyleAttributes.styleTop = (Top > 0) ? Top : 0;
            this.playerStyleAttributes.styleLeft = (Left > 0) ? Left : 0;
            playerElement.setAttribute('style', "top: " + this.playerStyleAttributes.styleTop + "px; left: " + this.playerStyleAttributes.styleLeft + "px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
        }
    };
    /**
     * Resizes the player element to fit an arbitrary size
     * @param playerElement - the player DOM element
     */
    UiController.prototype.resizePlayerStyleToArbitrarySize = function (playerElement) {
        playerElement.setAttribute('style', "top: 0px; left: 0px; width: " + this.playerStyleAttributes.styleWidth + "px; height: " + this.playerStyleAttributes.styleHeight + "px; cursor: " + this.playerStyleAttributes.styleCursor + "; " + this.playerStyleAttributes.styleAdditional);
    };
    /**
     * An override for setting up the mouse and freezeFrame
     * @param element - the player DOM element
     */
    UiController.prototype.setUpMouseAndFreezeFrame = function (element) { };
    /**
     * An override for updating the video stream size
     */
    UiController.prototype.updateVideoStreamSize = function () { };
    /**
     * Resizes the player style based on the window height and width
     * @returns - nil if requirements are satisfied
     */
    UiController.prototype.resizePlayerStyle = function () {
        var playerElement = this.videoPlayerProvider.getVideoParentElement();
        if (!playerElement) {
            return;
        }
        this.updateVideoStreamSize();
        if (playerElement.classList.contains('fixed-size')) {
            this.setUpMouseAndFreezeFrame(playerElement);
            return;
        }
        // controls for resizing the player 
        var videoWidth = parseInt(playerElement.getAttribute("videoWidth"));
        var videoHeight = parseInt(playerElement.getAttribute("videoHeight"));
        var windowSmallerThanPlayer = window.innerWidth < videoWidth || window.innerHeight < videoHeight;
        if (this.enlargeDisplayToFillWindow !== null) {
            if (this.enlargeDisplayToFillWindow === true || windowSmallerThanPlayer) {
                this.resizePlayerStyleToFillWindow(playerElement);
            }
            else {
                this.resizePlayerStyleToActualSize(playerElement);
            }
        }
        else {
            this.resizePlayerStyleToArbitrarySize(playerElement);
        }
        this.setUpMouseAndFreezeFrame(playerElement);
    };
    /**
     * On the orientation change of a window clear the timeout
     */
    UiController.prototype.onOrientationChange = function () {
        var _this = this;
        clearTimeout(this.orientationChangeTimeout);
        this.orientationChangeTimeout = setTimeout(function () { _this.resizePlayerStyle(); }, 500);
    };
    return UiController;
}());

/**
 * Handles the player style attributes so they can be instantiated
 */
var playerStyleAttributes = /** @class */ (function () {
    function playerStyleAttributes() {
        this.styleCursor = 'default';
    }
    return playerStyleAttributes;
}());



/***/ }),

/***/ "./src/VideoPlayer/StreamController.ts":
/*!*********************************************!*\
  !*** ./src/VideoPlayer/StreamController.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StreamController: () => (/* binding */ StreamController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Video Player Controller handles the creation of the video HTML element and all handlers
 */
var StreamController = /** @class */ (function () {
    function StreamController(videoElementProvider) {
        this.videoElementProvider = videoElementProvider;
        this.audioElement = document.createElement("Audio");
    }
    /**
     * Handles when the Peer connection has a track event
     * @param rtcTrackEvent - RTC Track Event
     */
    StreamController.prototype.handleOnTrack = function (rtcTrackEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "handleOnTrack " + JSON.stringify(rtcTrackEvent.streams), 6);
        var videoElement = this.videoElementProvider.getVideoElement();
        if (rtcTrackEvent.track) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Got track - ' + rtcTrackEvent.track.kind + ' id=' + rtcTrackEvent.track.id + ' readyState=' + rtcTrackEvent.track.readyState, 6);
        }
        if (rtcTrackEvent.track.kind == "audio") {
            this.CreateAudioTrack(rtcTrackEvent.streams[0]);
            return;
        }
        else if (rtcTrackEvent.track.kind == "video" && videoElement.srcObject !== rtcTrackEvent.streams[0]) {
            videoElement.srcObject = rtcTrackEvent.streams[0];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Set video source from video track ontrack.', 6);
            return;
        }
    };
    /**
    * Creates the audio device when receiving an RTCTrackEvent with the kind of "audio"
    * @param audioMediaStream - Audio Media stream track
    */
    StreamController.prototype.CreateAudioTrack = function (audioMediaStream) {
        var videoElement = this.videoElementProvider.getVideoElement();
        // do nothing the video has the same media stream as the audio track we have here (they are linked)
        if (videoElement.srcObject == audioMediaStream) {
            return;
        }
        // video element has some other media stream that is not associated with this audio track
        else if (videoElement.srcObject && videoElement.srcObject !== audioMediaStream) {
            // create a new audio element
            this.audioElement.srcObject = audioMediaStream;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Created new audio element to play separate audio stream.', 6);
        }
    };
    return StreamController;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayer.ts":
/*!****************************************!*\
  !*** ./src/VideoPlayer/VideoPlayer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VideoPlayer: () => (/* binding */ VideoPlayer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

var VideoPlayer = /** @class */ (function () {
    function VideoPlayer(rootDiv, startVideoMuted) {
        this.videoElement = document.createElement("video");
        this.videoElement.id = "streamingVideo";
        this.videoElement.muted = startVideoMuted;
        this.videoElement.disablePictureInPicture = true;
        this.videoElement.playsInline = true;
        this.videoElement.style.width = "100%";
        this.videoElement.style.height = "100%";
        this.videoElement.style.position = "absolute";
        rootDiv.appendChild(this.videoElement);
    }
    /**
     * Get the current context of the html video element
     * @returns the current context of the video element
     */
    VideoPlayer.prototype.getVideoElement = function () {
        return this.videoElement;
    };
    /**
     * Get the current context of the html video elements parent
     * @returns the current context of the video elements parent
     */
    VideoPlayer.prototype.getVideoParentElement = function () {
        return this.videoElement.parentElement;
    };
    /**
     * Set the click actions for when the Element is mouse clicked
     * @param event - Mouse Event
     */
    VideoPlayer.prototype.setClickActions = function (event) {
        if (this.videoElement.paused) {
            this.videoElement.play();
        }
        // minor hack to alleviate ios not supporting pointerlock
        if (this.videoElement.requestPointerLock) {
            this.videoElement.requestPointerLock();
        }
    };
    /**
    * Set the mouse enter and mouse leave events
    */
    VideoPlayer.prototype.setMouseEnterAndLeaveEvents = function (mouseEnterCallBack, mouseLeaveCallBack) {
        // Handle when the Mouse has entered the element
        this.videoElement.onmouseenter = function (event) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Mouse Entered", 6);
            mouseEnterCallBack();
        };
        // Handles when the mouse has left the element 
        this.videoElement.onmouseleave = function (event) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Mouse Left", 6);
            mouseLeaveCallBack();
        };
    };
    /**
    * Set the Video Elements src object tracks to enable
    * @param enabled - Enable Tracks on the Src Object
    */
    VideoPlayer.prototype.setVideoEnabled = function (enabled) {
        // this is a temporary hack until type scripts video element is updated to reflect the need for tracks on a html video element 
        var videoElement = this.videoElement;
        videoElement.srcObject.getTracks().forEach(function (track) { return track.enabled = enabled; });
    };
    return VideoPlayer;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts":
/*!********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseHoverEvents.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VideoPlayerMouseHoverEvents: () => (/* binding */ VideoPlayerMouseHoverEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Video Player mouse Hover handler
 */
var VideoPlayerMouseHoverEvents = /** @class */ (function () {
    /**
     * @param mouseController - Mouse Controller
     */
    function VideoPlayerMouseHoverEvents(mouseController) {
        this.mouseController = mouseController;
    }
    /**
     * Satisfies the interfaces handleLockStateChange requirement
     */
    VideoPlayerMouseHoverEvents.prototype.handleLockStateChange = function () { };
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseMove = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "MouseMove", 6);
        this.mouseController.sendMouseMove(mouseEvent.offsetX, mouseEvent.offsetY, mouseEvent.movementX, mouseEvent.movementY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseDown = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "onMouse Down", 6);
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleMouseWheel = function (wheelEvent) {
        //wheelEvent.detail * -120
        this.mouseController.sendMouseWheel(wheelEvent.deltaY, wheelEvent.offsetX, wheelEvent.offsetY);
        wheelEvent.preventDefault();
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseHoverEvents.prototype.handleContextMenu = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.offsetX, mouseEvent.offsetY);
        mouseEvent.preventDefault();
    };
    return VideoPlayerMouseHoverEvents;
}());



/***/ }),

/***/ "./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts":
/*!*********************************************************!*\
  !*** ./src/VideoPlayer/VideoPlayerMouseLockedEvents.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VideoPlayerMouseLockedEvents: () => (/* binding */ VideoPlayerMouseLockedEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");

/**
 * Handle the mouse locked events
 */
var VideoPlayerMouseLockedEvents = /** @class */ (function () {
    /**
     * @param videoElementProvider - The HTML Video Element provider
     * @param mouseController  - Mouse Controller
     */
    function VideoPlayerMouseLockedEvents(videoElementProvider, mouseController) {
        this.videoElementProvider = videoElementProvider;
        this.mouseController = mouseController;
        var videoElement = this.videoElementProvider.getVideoElement();
        this.x = videoElement.width / 2;
        this.y = videoElement.height / 2;
    }
    /**
     * Handle when the locked state Changed
     */
    VideoPlayerMouseLockedEvents.prototype.handleLockStateChange = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Lock state has changed", 6);
        var videoElement = this.videoElementProvider.getVideoElement();
        if (document.pointerLockElement === videoElement) {
            document.onmousemove = function (mouseEvent) { return _this.handleMouseMove(mouseEvent); };
            document.onwheel = function (wheelEvent) { return _this.handleMouseWheel(wheelEvent); };
            videoElement.onmousedown = function (wheelEvent) { return _this.handleMouseDown(wheelEvent); };
            videoElement.onmouseup = function (mouseEvent) { return _this.handleMouseUp(mouseEvent); };
        }
        else {
            document.onmousemove = null;
            videoElement.onmousedown = null;
            videoElement.onmouseup = null;
            videoElement.onwheel = null;
        }
    };
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseMove = function (mouseEvent) {
        var videoElement = this.videoElementProvider.getVideoElement();
        this.x += mouseEvent.movementX;
        this.y += mouseEvent.movementY;
        if (this.x > videoElement.clientWidth) {
            this.x -= videoElement.clientWidth;
        }
        if (this.y > videoElement.clientHeight) {
            this.y -= videoElement.clientHeight;
        }
        if (this.x < 0) {
            this.x = videoElement.clientWidth + this.x;
        }
        if (this.y < 0) {
            this.y = videoElement.clientHeight - this.y;
        }
        this.mouseController.sendMouseMove(this.x, this.y, mouseEvent.movementX, mouseEvent.movementY);
    };
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseDown = function (mouseEvent) {
        this.mouseController.sendMouseDown(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseUp = function (mouseEvent) {
        this.mouseController.sendMouseUp(mouseEvent.button, mouseEvent.x, mouseEvent.y);
    };
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleMouseWheel = function (wheelEvent) {
        this.mouseController.sendMouseWheel(wheelEvent.deltaY, wheelEvent.x, wheelEvent.y);
    };
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    VideoPlayerMouseLockedEvents.prototype.handleContextMenu = function (mouseEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "onContextMenu");
    };
    return VideoPlayerMouseLockedEvents;
}());



/***/ }),

/***/ "./src/WebRtcPlayer/WebRtcPlayerController.ts":
/*!****************************************************!*\
  !*** ./src/WebRtcPlayer/WebRtcPlayerController.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   webRtcPlayerController: () => (/* binding */ webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../VideoPlayer/StreamController */ "./src/VideoPlayer/StreamController.ts");
/* harmony import */ var _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Ui/UiController */ "./src/Ui/UiController.ts");
/* harmony import */ var _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../FreezeFrame/FreezeFrameController */ "./src/FreezeFrame/FreezeFrameController.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../DataChannel/DataChannelController */ "./src/DataChannel/DataChannelController.ts");
/* harmony import */ var _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../PeerConnectionController/PeerConnectionController */ "./src/PeerConnectionController/PeerConnectionController.ts");
/* harmony import */ var _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../UeInstanceMessage/UeDescriptorUi */ "./src/UeInstanceMessage/UeDescriptorUi.ts");
/* harmony import */ var _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../UeInstanceMessage/UeControlMessage */ "./src/UeInstanceMessage/UeControlMessage.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Inputs_InputController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../Inputs/InputController */ "./src/Inputs/InputController.ts");
/* harmony import */ var _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../MicPlayer/MicController */ "./src/MicPlayer/MicController.ts");
/* harmony import */ var _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../VideoPlayer/VideoPlayer */ "./src/VideoPlayer/VideoPlayer.ts");













/**
 * Entry point for the Web RTC Player
 */
var webRtcPlayerController = /** @class */ (function () {
    /**
     *
     * @param config - the frontend config object
     * @param delegate - the delegate interface object
     */
    function webRtcPlayerController(config, delegate) {
        var _this = this;
        this.shouldShowPlayOverlay = true;
        this.lastTimeResized = new Date().getTime();
        this.config = config;
        this.delegate = delegate;
        this.sdpConstraints = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        };
        // set up the afk logic class and connect up its method for closing the signaling server 
        this.afkLogic = new _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_4__.AfkLogic(this.config.controlScheme, this.config.afkTimeout);
        this.afkLogic.setDisconnectMessageOverride = function (message) { return _this.setDisconnectMessageOverride(message); };
        this.afkLogic.closeWebSocket = function () { return _this.closeSignalingServer(); };
        this.freezeFrameController = new _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__.FreezeFrameController(this.config.playerElement);
        this.videoPlayer = new _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_12__.VideoPlayer(this.config.playerElement, this.config.startVideoMuted);
        this.streamController = new _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_1__.StreamController(this.videoPlayer);
        this.uiController = new _Ui_UiController__WEBPACK_IMPORTED_MODULE_2__.UiController(this.videoPlayer);
        this.uiController.setUpMouseAndFreezeFrame = function (element) { return _this.setUpMouseAndFreezeFrame(element); };
        this.dataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_5__.DataChannelController(this.videoPlayer, this.config);
        this.dataChannelController.handleOnOpen = function () { return _this.handleDataChannelConnected(); };
        this.dataChannelController.onLatencyTestResult = function (latencyTestResults) { return _this.handleLatencyTestResult(latencyTestResults); };
        this.dataChannelController.onVideoEncoderAvgQP = function (AvgQP) { return _this.handleVideoEncoderAvgQP(AvgQP); };
        this.dataChannelController.OnInitialSettings = function (InitialSettings) { return _this.handleInitialSettings(InitialSettings); };
        this.dataChannelController.onQualityControlOwnership = function (hasQualityOwnership) { return _this.handleQualityControlOwnership(hasQualityOwnership); };
        this.dataChannelController.resetAfkWarningTimerOnDataSend = function () { return _this.afkLogic.resetAfkWarningTimer(); };
        // set up websocket methods
        this.webSocketController = new _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_0__.WebSocketController(this.config.signallingServerAddress);
        this.webSocketController.onConfig = function (messageConfig) { return _this.handleOnConfigMessage(messageConfig); };
        this.webSocketController.onInstanceStateChange = function (instanceState) { return _this.handleInstanceStateChange(instanceState); };
        this.webSocketController.onAuthenticationResponse = function (authResponse) { return _this.handleAuthenticationResponse(authResponse); };
        this.webSocketController.onWebSocketOncloseOverlayMessage = function (event) { return _this.delegate.onDisconnect(event.code + " - " + event.reason); };
        // set up the final webRtc player controller methods from within our delegate so a connection can be activated
        this.delegate.setIWebRtcPlayerController(this);
        // now that the delegate has finished instantiating connect the rest of the afk methods to the afk logic class
        this.afkLogic.showAfkOverlay = function () { return _this.delegate.showAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.updateAfkCountdown = function () { return _this.delegate.updateAfkOverlay(_this.afkLogic.countDown); };
        this.afkLogic.hideCurrentOverlay = function () { return _this.delegate.hideCurrentOverlay(); };
        this.webSocketController.stopAfkWarningTimer = function () { return _this.afkLogic.stopAfkWarningTimer(); };
    }
    /**
     * connect up the onAfkClick action with a method so it can be exposed to the delegate
     */
    webRtcPlayerController.prototype.onAfkClick = function () {
        this.afkLogic.onAfkClick();
        // if the stream is paused play it
        if (this.videoPlayer.videoElement.paused === true) {
            this.playStream();
        }
    };
    /**
     * Restart the stream automaticity without refreshing the page
     */
    webRtcPlayerController.prototype.restartStreamAutomaticity = function () {
        var _this = this;
        // if there is no webSocketController return immediately or this will not work
        if (!this.webSocketController) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "The Web Socket Controller does not exist so this will not work right now.");
            return;
        }
        // if a websocket object has not been created connect normally without closing 
        if (!this.webSocketController.webSocket) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "A websocket connection has not been made yet so we will start the stream");
            this.delegate.onWebRtcAutoConnect();
            this.connectToSignallingSever();
        }
        else {
            // set the replay status so we get a text overlay over an action overlay
            this.delegate.showActionOrErrorOnDisconnect = false;
            // set the disconnect message
            this.setDisconnectMessageOverride("Restarting stream manually");
            // close the connection 
            this.closeSignalingServer();
            // wait for the connection to close and restart the connection
            var autoConnectTimeout_1 = setTimeout(function () {
                _this.delegate.onWebRtcAutoConnect();
                _this.connectToSignallingSever();
                clearTimeout(autoConnectTimeout_1);
            }, 3000);
        }
    };
    /**
     * Sets if we are enlarging the display to fill the window for freeze frames and ui controller
     * @param isFilling is the display filling or not
     */
    webRtcPlayerController.prototype.setEnlargeToFillDisplay = function (isFilling) {
        this.freezeFrameController.freezeFrame.enlargeDisplayToFillWindow = isFilling;
        this.uiController.enlargeDisplayToFillWindow = isFilling;
    };
    /**
     * Loads a freeze frame if it is required otherwise shows the play overlay
     */
    webRtcPlayerController.prototype.loadFreezeFrameOrShowPlayOverlay = function () {
        if (this.shouldShowPlayOverlay === true) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "showing play overlay");
            this.delegate.showPlayOverlay();
            this.resizePlayerStyle();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "showing freeze frame");
            this.freezeFrameController.showFreezeFrame();
        }
        this.videoPlayer.setVideoEnabled(false);
    };
    /**
     * Enable the video after hiding a freeze frame
     */
    webRtcPlayerController.prototype.InvalidateFreezeFrameAndEnableVideo = function () {
        this.freezeFrameController.hideFreezeFrame();
        if (this.videoPlayer.videoElement) {
            this.videoPlayer.setVideoEnabled(true);
        }
    };
    webRtcPlayerController.prototype.getWebSocketController = function () {
        return this.webSocketController;
    };
    /**
     * Plays the stream audio and video source and sets up other pieces while the stream starts
     */
    webRtcPlayerController.prototype.playStream = function () {
        var _this = this;
        if (!this.videoPlayer.videoElement) {
            this.delegate.showErrorOverlay("Could not player video stream because the video player was not initialised correctly.");
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Could not player video stream because the video player was not initialised correctly.");
            // set the disconnect message
            this.setDisconnectMessageOverride("Stream not initialised correctly");
            // close the connection 
            this.closeSignalingServer();
        }
        else {
            this.inputController.registerTouch(this.config.fakeMouseWithTouches, this.videoPlayer.videoElement);
            if (this.streamController.audioElement) {
                this.streamController.audioElement.play().then(function () {
                    _this.playVideo();
                }).catch(function (onRejectedReason) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), onRejectedReason);
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.");
                    _this.delegate.showPlayOverlay();
                });
            }
            else {
                this.playVideo();
            }
            this.shouldShowPlayOverlay = false;
            this.freezeFrameController.showFreezeFrame();
            this.delegate.hideCurrentOverlay();
        }
    };
    /**
     * Plays the video stream
     */
    webRtcPlayerController.prototype.playVideo = function () {
        var _this = this;
        // // handle play() with .then as it is an asynchronous call  
        this.videoPlayer.videoElement.play().catch(function (onRejectedReason) {
            if (_this.streamController.audioElement.srcObject) {
                _this.streamController.audioElement.pause();
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), onRejectedReason);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.");
            _this.delegate.showPlayOverlay();
        });
    };
    /**
     * Enable the video to play automaticity if enableSpsAutoplay is true
     */
    webRtcPlayerController.prototype.autoPlayVideoOrSetUpPlayOverlay = function () {
        if (this.config.enableSpsAutoplay === true) {
            // set up the auto play on the video element  
            this.videoPlayer.videoElement.autoplay = true;
            // attempt to play the video
            this.playStream();
        }
        else {
            this.delegate.showPlayOverlay();
        }
        // send and request initial stats
        this.ueControlMessage.SendRequestInitialSettings();
        this.ueControlMessage.SendRequestQualityControl();
    };
    /**
     * Connect to the Signaling server
     */
    webRtcPlayerController.prototype.connectToSignallingSever = function () {
        this.webSocketController.connect();
    };
    /**
     * This will start the handshake to the signalling server
     * @param peerConfig  - RTC Configuration Options from the Signaling server
     * @remark RTC Peer Connection on Ice Candidate event have it handled by handle Send Ice Candidate
     */
    webRtcPlayerController.prototype.startSession = function (peerConfig) {
        var _this = this;
        // set up url params for STUN, Mic and SFU
        this.urlParams = new URLSearchParams(window.location.search);
        // check for forcing turn
        if (this.urlParams.has('ForceTURN')) {
            // check for a turn server
            var hasTurnServer = this.checkTurnServerAvailability(peerConfig);
            // close and error if turn is forced and there is no turn server
            if (!hasTurnServer) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "No turn server was found in the Peer Connection Options. TURN cannot be forced, closing connection. Please use STUN instead");
                this.setDisconnectMessageOverride("TURN cannot be forced, closing connection. Please use STUN instead.");
                this.closeSignalingServer();
                return;
            }
        }
        // set up the peer connection controller
        this.peerConnectionController = new _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_6__.PeerConnectionController(peerConfig, this.urlParams.has('ForceTURN'));
        //set up mic controller
        this.micController = new _MicPlayer_MicController__WEBPACK_IMPORTED_MODULE_11__.MicController(this.urlParams);
        // set up peer connection controller video stats
        this.peerConnectionController.onVideoStats = function (event) { return _this.handleVideoStats(event); };
        /* When the Peer Connection Wants to send an offer have it handled */
        this.peerConnectionController.onSendWebRTCOffer = function (offer) { return _this.handleSendWebRTCOffer(offer); };
        /* When the Peer connection ice candidate is added have it handled */
        this.peerConnectionController.onPeerIceCandidate = function (peerConnectionIceEvent) { return _this.handleSendIceCandidate(peerConnectionIceEvent); };
        // handel mic connections with promise
        this.dataChannelController.createDataChannel(this.peerConnectionController.peerConnection, "cirrus", this.datachannelOptions);
        // set up webRtc text overlays 
        this.peerConnectionController.showTextOverlayConnecting = function () { return _this.delegate.onWebRtcConnecting(); };
        this.peerConnectionController.showTextOverlaySetupFailure = function () { return _this.delegate.onWebRtcFailed(); };
        /* RTC Peer Connection on Track event -> handle on track */
        this.peerConnectionController.onTrack = function (trackEvent) { return _this.streamController.handleOnTrack(trackEvent); };
        /* Start the Hand shake process by creating an Offer */
        this.peerConnectionController.createOffer(this.sdpConstraints, this.micController.useMic);
    };
    /**
     * Checks the peer connection options for a turn server and returns true or false
     */
    webRtcPlayerController.prototype.checkTurnServerAvailability = function (options) {
        // if iceServers is empty return false this should not be the general use case but is here incase
        if (!options.iceServers) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'A turn sever was not found');
            return false;
        }
        // loop through the ice servers to check for a turn url
        for (var _i = 0, _a = options.iceServers; _i < _a.length; _i++) {
            var iceServer = _a[_i];
            for (var _b = 0, _c = iceServer.urls; _b < _c.length; _b++) {
                var url = _c[_b];
                if (url.includes('turn')) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "A turn sever was found at " + url);
                    return true;
                }
            }
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'A turn sever was not found');
        return false;
    };
    /**
     * Handles when a Config Message is received contains the Peer Connection Options required (STUN and TURN Server Info)
     * @param messageConfig - Config Message received from the signaling server
     */
    webRtcPlayerController.prototype.handleOnConfigMessage = function (messageConfig) {
        var _this = this;
        // Tell the WebRtcController to start a session with the peer options sent from the signaling server
        this.startSession(messageConfig.peerConnectionOptions);
        // When the signaling server sends a WebRTC Answer over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onWebRtcAnswer = function (messageAnswer) { return _this.handleWebRtcAnswer(messageAnswer); };
        // When the signaling server sends a IceCandidate over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onIceCandidate = function (iceCandidate) { return _this.handleIceCandidate(iceCandidate); };
    };
    /**
     * Handle the RTC Answer from the signaling server
     * @param Answer - Answer Message from the Signaling server
     */
    webRtcPlayerController.prototype.handleWebRtcAnswer = function (Answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "There is an answer", 6);
        var sdpAnswer = {
            sdp: Answer.sdp,
            type: "answer"
        };
        this.peerConnectionController.handleAnswer(sdpAnswer);
        // start the afk warning timer as the container is now running
        this.afkLogic.startAfkWarningTimer();
        // show the overlay that we have an answer
        this.delegate.onWebRtcAnswer();
    };
    /**
     * When an ice Candidate is received from the Signaling server add it to the Peer Connection Client
     * @param iceCandidate - Ice Candidate from Server
     */
    webRtcPlayerController.prototype.handleIceCandidate = function (iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Web RTC Controller: onWebRtcIce", 6);
        var candidate = new RTCIceCandidate(iceCandidate);
        this.peerConnectionController.handleOnIce(candidate);
    };
    /**
     * Send the ice Candidate to the signaling server via websocket
       * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    webRtcPlayerController.prototype.handleSendIceCandidate = function (iceEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "OnIceCandidate", 6);
        if (iceEvent.candidate && iceEvent.candidate.candidate) {
            this.webSocketController.sendIceCandidate(iceEvent.candidate);
        }
    };
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param offer - RTC Session Description
     */
    webRtcPlayerController.prototype.handleSendWebRTCOffer = function (offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Sending the offer to the Server", 6);
        this.webSocketController.sendWebRtcOffer(offer);
    };
    /**
     * registers the mouse for use in IWebRtcPlayerController
     */
    webRtcPlayerController.prototype.activateRegisterMouse = function () {
        this.inputController.registerMouse(this.config.controlScheme);
    };
    /**
     * Sets up the Data channel Keyboard, Mouse, UE Control Message, UE Descriptor
     */
    webRtcPlayerController.prototype.handleDataChannelConnected = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "Data Channel is open", 6);
        // show the connected overlay 
        this.delegate.onWebRtcConnected();
        this.inputController = new _Inputs_InputController__WEBPACK_IMPORTED_MODULE_10__.InputController(this.dataChannelController, null, this.videoPlayer);
        this.ueControlMessage = new _UeInstanceMessage_UeControlMessage__WEBPACK_IMPORTED_MODULE_8__.UeControlMessage(this.dataChannelController);
        this.ueDescriptorUi = new _UeInstanceMessage_UeDescriptorUi__WEBPACK_IMPORTED_MODULE_7__.UeDescriptorUi(this.dataChannelController, this.config);
        this.dataChannelController.ueDescriptorUi = this.ueDescriptorUi;
        this.inputController.ueDescriptorUi = this.ueDescriptorUi;
        console.log("connected");
        this.activateRegisterMouse();
        this.inputController.registerKeyBoard(this.config.suppressBrowserKeys);
        this.inputController.registerGamePad();
        this.videoPlayer.setMouseEnterAndLeaveEvents(function () { return _this.inputController.mouseController.sendMouseEnter(); }, function () { return _this.inputController.mouseController.sendMouseLeave(); });
        this.resizePlayerStyle();
        this.dataChannelController.processFreezeFrameMessage = function (view) { return _this.freezeFrameController.processFreezeFrameMessage(view, function () { return _this.loadFreezeFrameOrShowPlayOverlay(); }); };
        this.dataChannelController.onUnFreezeFrame = function () { return _this.InvalidateFreezeFrameAndEnableVideo(); };
        setInterval(function () { return _this.getStats(); }, 1000);
        // either autoplay the video or set up the play overlay
        this.autoPlayVideoOrSetUpPlayOverlay();
        this.resizePlayerStyle();
        this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayer.videoElement.clientWidth, this.videoPlayer.videoElement.clientHeight);
        this.delegate.onVideoInitialised();
        this.uiController.updateVideoStreamSize = function () { return _this.updateVideoStreamSize(); };
    };
    /**
     * Handles when the web socket receives an authentication response
     * @param authResponse - Authentication Response
     */
    webRtcPlayerController.prototype.handleAuthenticationResponse = function (authResponse) {
        this.delegate.onAuthenticationResponse(authResponse);
    };
    /**
     * Handles when the stream size changes
     */
    webRtcPlayerController.prototype.updateVideoStreamSize = function () {
        // Call the setter before calling this function
        if (!this.matchViewportResolution) {
            return;
        }
        //?
        var now = new Date().getTime();
        if (now - this.lastTimeResized > 1000) {
            // get the root div from config 
            if (!this.config.playerElement) {
                return;
            }
            this.ueDescriptorUi.sendUpdateVideoStreamSize(this.videoPlayer.videoElement.clientWidth, this.videoPlayer.videoElement.clientHeight);
            this.lastTimeResized = new Date().getTime();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), 'Resizing too often - skipping', 6);
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout = setTimeout(this.updateVideoStreamSize, 1000);
        }
    };
    /**
     * Handles when the Instance State Changes
     * @param instanceState  - Instance State
     */
    webRtcPlayerController.prototype.handleInstanceStateChange = function (instanceState) {
        this.delegate.onInstanceStateChange(instanceState);
    };
    /**
     * Set the freeze frame overlay to the player div
     * @param playerElement - The div element of the Player
     */
    webRtcPlayerController.prototype.setUpMouseAndFreezeFrame = function (playerElement) {
        // Calculating and normalizing positions depends on the width and height of the player.
        this.playerElementClientRect = playerElement.getBoundingClientRect();
        this.freezeFrameController.freezeFrame.resize();
    };
    /**
     * Close the Connection to the signaling server
     */
    webRtcPlayerController.prototype.closeSignalingServer = function () {
        this.webSocketController.close();
    };
    /**
     * Fires a Video Stats Event in the RTC Peer Connection
     */
    webRtcPlayerController.prototype.getStats = function () {
        this.peerConnectionController.generateStats();
    };
    /**
     * Send a Latency Test Request to the UE Instance
     */
    webRtcPlayerController.prototype.sendLatencyTest = function () {
        this.latencyStartTime = Date.now();
        this.ueControlMessage.sendLatencyTest(this.latencyStartTime);
    };
    /**
     * Send the Encoder Settings to the UE Instance as a UE UI Descriptor.
     * @param encoder - Encoder Settings
     */
    webRtcPlayerController.prototype.sendEncoderSettings = function (encoder) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Encoder Settings    ----\n" + JSON.stringify(encoder, undefined, 4) + "\n-------------------------------", 6);
        if (encoder.RateControl != null) {
            this.ueDescriptorUi.sendEncoderRateControl(encoder.RateControl);
        }
        if (encoder.TargetBitrate != null) {
            this.ueDescriptorUi.sendEncoderTargetBitRate(encoder.TargetBitrate);
        }
        if (encoder.MaxBitrate != null) {
            this.ueDescriptorUi.sendEncoderMaxBitrateVbr(encoder.MaxBitrate);
        }
        if (encoder.MinQP != null) {
            this.ueDescriptorUi.sendEncoderMinQP(encoder.MinQP);
        }
        if (encoder.MaxQP != null) {
            this.ueDescriptorUi.sendEncoderMaxQP(encoder.MaxQP);
        }
        if (encoder.FillerData != null) {
            this.ueDescriptorUi.sendEncoderEnableFillerData(encoder.FillerData);
        }
        if (encoder.MultiPass != null) {
            this.ueDescriptorUi.sendEncoderMultiPass(encoder.MultiPass);
        }
    };
    /**
     * Send the WebRTC Settings to the UE Instance as a UE UI Descriptor.
     * @param webRTC - Web RTC Settings
     */
    webRtcPlayerController.prototype.sendWebRtcSettings = function (webRTC) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   WebRTC Settings    ----\n" + JSON.stringify(webRTC, undefined, 4) + "\n-------------------------------", 6);
        if (webRTC.DegradationPref != null) {
            this.ueDescriptorUi.sendWebRtcDegradationPreference(webRTC.DegradationPref);
        }
        if (webRTC.FPS != null) {
            this.ueDescriptorUi.sendWebRtcFps(webRTC.FPS);
            this.ueDescriptorUi.sendWebRtcMaxFps(webRTC.FPS);
        }
        if (webRTC.MinBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMinBitrate(webRTC.MinBitrate);
        }
        if (webRTC.MaxBitrate != null) {
            this.ueDescriptorUi.sendWebRtcMaxBitrate(webRTC.MaxBitrate);
        }
        if (webRTC.LowQP != null) {
            this.ueDescriptorUi.sendWebRtcLowQpThreshold(webRTC.LowQP);
        }
        if (webRTC.HighQP != null) {
            this.ueDescriptorUi.sendWebRtcHighQpThreshold(webRTC.HighQP);
        }
    };
    /**
     * Send Aggregated Stats to the Signaling Server
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.sendStatsToSignallingServer = function (stats) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Sending Aggregated Stats to Signaling Server   ----\n" + JSON.stringify(stats, undefined, 4) + "\n-----------------------------------------------------------", 6);
        this.webSocketController.sendStats(stats);
    };
    /**
     * Sends a UI Interaction Descriptor to the UE Instance
     * @param message - String to send to the UE Instance
     */
    webRtcPlayerController.prototype.sendUeUiDescriptor = function (message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   UE UI Interaction String   ----\n" + JSON.stringify(message, undefined, 4) + "\n---------------------------------------", 6);
        this.ueDescriptorUi.sendUiInteraction(message);
    };
    /**
     * Sends the UI Descriptor `stat fps` to the UE Instance
     */
    webRtcPlayerController.prototype.sendShowFps = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Sending show stat to UE   ----", 6);
        this.ueDescriptorUi.sendShowFps();
    };
    /**
     * Sends a request to the UE Instance to have ownership of Quality
     */
    webRtcPlayerController.prototype.sendRequestQualityControlOwnership = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_9__.Logger.GetStackTrace(), "----   Sending Request to Control Quality  ----", 6);
        this.ueControlMessage.SendRequestQualityControl();
    };
    /**
     * Handles when a Latency Test Result are received from the UE Instance
     * @param latencyTimings - Latency Test Timings
     */
    webRtcPlayerController.prototype.handleLatencyTestResult = function (latencyTimings) {
        latencyTimings.testStartTimeMs = this.latencyStartTime;
        latencyTimings.browserReceiptTimeMs = Date.now();
        latencyTimings.latencyExcludingDecode = ~~(latencyTimings.browserReceiptTimeMs - latencyTimings.testStartTimeMs);
        latencyTimings.testDuration = ~~(latencyTimings.TransmissionTimeMs - latencyTimings.ReceiptTimeMs);
        latencyTimings.networkLatency = ~~(latencyTimings.latencyExcludingDecode - latencyTimings.testDuration);
        if (latencyTimings.frameDisplayDeltaTimeMs && latencyTimings.browserReceiptTimeMs) {
            latencyTimings.endToEndLatency = ~~(latencyTimings.frameDisplayDeltaTimeMs + latencyTimings.networkLatency, +latencyTimings.CaptureToSendMs);
        }
        this.delegate.onLatencyTestResult(latencyTimings);
    };
    /**
     * Handles when the Encoder and Web RTC Settings are received from the UE Instance
     * @param settings - Initial Encoder and Web RTC Settings
     */
    webRtcPlayerController.prototype.handleInitialSettings = function (settings) {
        this.delegate.onInitialSettings(settings);
    };
    /**
     * Handles when the Quantization Parameter are received from the UE Instance
     * @param AvgQP - Encoders Quantization Parameter
     */
    webRtcPlayerController.prototype.handleVideoEncoderAvgQP = function (AvgQP) {
        this.delegate.onVideoEncoderAvgQP(AvgQP);
    };
    /**
     * Flag set if the user has Quality Ownership
     * @param hasQualityOwnership - Does the current client have Quality Ownership
     */
    webRtcPlayerController.prototype.handleQualityControlOwnership = function (hasQualityOwnership) {
        this.delegate.onQualityControlOwnership(hasQualityOwnership);
    };
    /**
     * Handles when the Aggregated stats are Collected
     * @param stats - Aggregated Stats
     */
    webRtcPlayerController.prototype.handleVideoStats = function (stats) {
        this.delegate.onVideoStats(stats);
    };
    /**
    * To Resize the Video Player element
    */
    webRtcPlayerController.prototype.resizePlayerStyle = function () {
        this.uiController.resizePlayerStyle();
    };
    /**
     * Get the overridden disconnect message
     */
    webRtcPlayerController.prototype.getDisconnectMessageOverride = function () {
        return this.disconnectMessageOverride;
    };
    /**
     * Set the override for the disconnect message
     */
    webRtcPlayerController.prototype.setDisconnectMessageOverride = function (message) {
        this.disconnectMessageOverride = message;
    };
    return webRtcPlayerController;
}());



/***/ }),

/***/ "./src/WebSockets/MessageReceive.ts":
/*!******************************************!*\
  !*** ./src/WebSockets/MessageReceive.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   InstanceState: () => (/* binding */ InstanceState),
/* harmony export */   MessageAnswer: () => (/* binding */ MessageAnswer),
/* harmony export */   MessageAuthRequired: () => (/* binding */ MessageAuthRequired),
/* harmony export */   MessageAuthResponse: () => (/* binding */ MessageAuthResponse),
/* harmony export */   MessageAuthResponseOutcomeType: () => (/* binding */ MessageAuthResponseOutcomeType),
/* harmony export */   MessageConfig: () => (/* binding */ MessageConfig),
/* harmony export */   MessageIceCandidate: () => (/* binding */ MessageIceCandidate),
/* harmony export */   MessageInstanceState: () => (/* binding */ MessageInstanceState),
/* harmony export */   MessagePlayerCount: () => (/* binding */ MessagePlayerCount),
/* harmony export */   MessageRecv: () => (/* binding */ MessageRecv),
/* harmony export */   MessageRecvTypes: () => (/* binding */ MessageRecvTypes)
/* harmony export */ });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * The Types of Messages that will be received
 */
var MessageRecvTypes;
(function (MessageRecvTypes) {
    MessageRecvTypes["AUTHENTICATION_REQUIRED"] = "authenticationRequired";
    MessageRecvTypes["AUTHENTICATION_RESPONSE"] = "authenticationResponse";
    MessageRecvTypes["INSTANCE_STATE"] = "instanceState";
    MessageRecvTypes["CONFIG"] = "config";
    MessageRecvTypes["PLAYER_COUNT"] = "playerCount";
    MessageRecvTypes["ANSWER"] = "answer";
    MessageRecvTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageRecvTypes["PING"] = "ping";
})(MessageRecvTypes || (MessageRecvTypes = {}));
/**
 * Types of Authentication reposes
 */
var MessageAuthResponseOutcomeType;
(function (MessageAuthResponseOutcomeType) {
    MessageAuthResponseOutcomeType["REDIRECT"] = "REDIRECT";
    MessageAuthResponseOutcomeType["INVALID_TOKEN"] = "INVALID_TOKEN";
    MessageAuthResponseOutcomeType["AUTHENTICATED"] = "AUTHENTICATED";
    MessageAuthResponseOutcomeType["ERROR"] = "ERROR";
})(MessageAuthResponseOutcomeType || (MessageAuthResponseOutcomeType = {}));
/**
 * States of the UE Instance
 */
var InstanceState;
(function (InstanceState) {
    InstanceState["UNALLOCATED"] = "UNALLOCATED";
    InstanceState["PENDING"] = "PENDING";
    InstanceState["FAILED"] = "FAILED";
    InstanceState["READY"] = "READY";
})(InstanceState || (InstanceState = {}));
/**
 * Concrete Received Message wrapper
 */
var MessageRecv = /** @class */ (function () {
    function MessageRecv() {
    }
    return MessageRecv;
}());

/**
 * Authentication Required Message wrapper
 */
var MessageAuthRequired = /** @class */ (function (_super) {
    __extends(MessageAuthRequired, _super);
    function MessageAuthRequired() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthRequired;
}(MessageRecv));

/**
 * Authentication Response Message wrapper
 */
var MessageAuthResponse = /** @class */ (function (_super) {
    __extends(MessageAuthResponse, _super);
    function MessageAuthResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAuthResponse;
}(MessageRecv));

/**
 * Instance State Message wrapper
 */
var MessageInstanceState = /** @class */ (function (_super) {
    __extends(MessageInstanceState, _super);
    function MessageInstanceState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageInstanceState;
}(MessageRecv));

/**
 * Config Message Wrapper
 */
var MessageConfig = /** @class */ (function (_super) {
    __extends(MessageConfig, _super);
    function MessageConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageConfig;
}(MessageRecv));

/**
 * Player Count Message wrapper
 */
var MessagePlayerCount = /** @class */ (function (_super) {
    __extends(MessagePlayerCount, _super);
    function MessagePlayerCount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessagePlayerCount;
}(MessageRecv));

/**
 * Web RTC offer Answer Message wrapper
 */
var MessageAnswer = /** @class */ (function (_super) {
    __extends(MessageAnswer, _super);
    function MessageAnswer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageAnswer;
}(MessageRecv));

/**
 * Ice Candidate Message wrapper
 */
var MessageIceCandidate = /** @class */ (function (_super) {
    __extends(MessageIceCandidate, _super);
    function MessageIceCandidate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageIceCandidate;
}(MessageRecv));



/***/ }),

/***/ "./src/WebSockets/MessageSend.ts":
/*!***************************************!*\
  !*** ./src/WebSockets/MessageSend.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MessageAuthRequest: () => (/* binding */ MessageAuthRequest),
/* harmony export */   MessageIceCandidate: () => (/* binding */ MessageIceCandidate),
/* harmony export */   MessagePong: () => (/* binding */ MessagePong),
/* harmony export */   MessageRequestInstance: () => (/* binding */ MessageRequestInstance),
/* harmony export */   MessageSend: () => (/* binding */ MessageSend),
/* harmony export */   MessageSendTypes: () => (/* binding */ MessageSendTypes),
/* harmony export */   MessageStats: () => (/* binding */ MessageStats),
/* harmony export */   MessageWebRTCOffer: () => (/* binding */ MessageWebRTCOffer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * The Send Types that are pushed from the signaling server
 */
var MessageSendTypes;
(function (MessageSendTypes) {
    MessageSendTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageSendTypes["STATS"] = "stats";
    MessageSendTypes["AUTHENTICATION_REQUEST"] = "authenticationRequest";
    MessageSendTypes["REQUEST_INSTANCE"] = "requestInstance";
    MessageSendTypes["OFFER"] = "offer";
    MessageSendTypes["PONG"] = "pong";
})(MessageSendTypes || (MessageSendTypes = {}));
/**
 * A Wrapper for the message to send to the signaling server
 */
var MessageSend = /** @class */ (function () {
    function MessageSend() {
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageSend.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending => \n" + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    };
    return MessageSend;
}());

/**
 * Auth Request Message Wrapper
 */
var MessageAuthRequest = /** @class */ (function (_super) {
    __extends(MessageAuthRequest, _super);
    /**
     * @param token - Token Provided by the Auth Provider
     * @param provider - Name of the provider that is registered in the auth plugin
     */
    function MessageAuthRequest(token, provider) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.AUTHENTICATION_REQUEST;
        _this.token = token;
        _this.provider = provider;
        return _this;
    }
    return MessageAuthRequest;
}(MessageSend));

/**
 * Instance Request Message Wrapper
 */
var MessagePong = /** @class */ (function (_super) {
    __extends(MessagePong, _super);
    function MessagePong(time) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.PONG;
        _this.time = time;
        return _this;
    }
    return MessagePong;
}(MessageSend));

/**
 * Instance Request Message Wrapper
 */
var MessageRequestInstance = /** @class */ (function (_super) {
    __extends(MessageRequestInstance, _super);
    function MessageRequestInstance() {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.REQUEST_INSTANCE;
        return _this;
    }
    return MessageRequestInstance;
}(MessageSend));

/**
 * Aggregated Stats Message Wrapper
 */
var MessageStats = /** @class */ (function (_super) {
    __extends(MessageStats, _super);
    /**
     * @param aggregatedStats - Aggregated Stats
     */
    function MessageStats(aggregatedStats) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.STATS;
        _this.inboundVideoStats = aggregatedStats.inboundVideoStats;
        _this.inboundAudioStats = aggregatedStats.inboundAudioStats;
        _this.candidatePair = aggregatedStats.candidatePair;
        _this.dataChannelStats = aggregatedStats.dataChannelStats;
        _this.localCandidates = aggregatedStats.localCandidates;
        _this.remoteCandidates = aggregatedStats.remoteCandidates;
        _this.outboundVideoStats = aggregatedStats.outBoundVideoStats;
        return _this;
    }
    return MessageStats;
}(MessageSend));

/**
 *  Web RTC Offer message wrapper
 */
var MessageWebRTCOffer = /** @class */ (function (_super) {
    __extends(MessageWebRTCOffer, _super);
    /**
     * @param offer - Generated Web RTC Offer
     */
    function MessageWebRTCOffer(offer) {
        var _this = _super.call(this) || this;
        _this.type = MessageSendTypes.OFFER;
        if (offer) {
            _this.type = offer.type;
            _this.sdp = offer.sdp;
        }
        return _this;
    }
    return MessageWebRTCOffer;
}(MessageSend));

/**
 * RTC Ice Candidate Wrapper
 */
var MessageIceCandidate = /** @class */ (function () {
    /**
     * @param candidate - RTC Ice Candidate
     */
    function MessageIceCandidate(candidate) {
        this.type = MessageSendTypes.ICE_CANDIDATE;
        this.candidate = candidate;
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    MessageIceCandidate.prototype.payload = function () {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending => \n" + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    };
    return MessageIceCandidate;
}());



/***/ }),

/***/ "./src/WebSockets/WebSocketController.ts":
/*!***********************************************!*\
  !*** ./src/WebSockets/WebSocketController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   WebSocketController: () => (/* binding */ WebSocketController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageReceive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");



/**
 * The controller for the WebSocket and all associated methods
 */
var WebSocketController = /** @class */ (function () {
    /**
     * @param Address - The Address of the signaling server
     */
    function WebSocketController(Address) {
        this.WS_OPEN_STATE = 1;
        this.address = Address;
    }
    /**
     * Connect to the signaling server
     * @returns - If there is a connection
     */
    WebSocketController.prototype.connect = function () {
        var _this = this;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), this.address, 6);
        try {
            this.webSocket = new WebSocket(this.address);
            this.webSocket.onopen = function (event) { return _this.handleOnOpen(event); };
            this.webSocket.onerror = function (event) { return _this.handleOnError(event); };
            this.webSocket.onclose = function (event) { return _this.handleOnClose(event); };
            this.webSocket.onmessage = function (event) { return _this.handleOnMessage(event); };
            this.webSocket.onmessagebinary = function (event) { return _this.handelOnMessageBinary(event); };
            return true;
        }
        catch (error) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(error, error);
            return false;
        }
    };
    /**
     * Handles what happens when a message is received in binary form
     * @param event - Message Received
     */
    WebSocketController.prototype.handelOnMessageBinary = function (event) {
        var _this = this;
        // if the event is empty return
        if (!event || !event.data) {
            return;
        }
        // handel the binary and then handel the message
        event.data.text().then(function (messageString) {
            // build a new message
            var constructedMessage = new MessageEvent('messageFromBinary', {
                data: messageString
            });
            // send the new stringified event back into `onmessage`
            _this.handelOnMessageBinary(constructedMessage);
        }).catch(function (error) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Failed to parse binary blob from websocket, reason: " + error);
        });
    };
    /**
     * Handles what happens when a message is received
     * @param event - Message Received
     */
    WebSocketController.prototype.handleOnMessage = function (event) {
        // Check if websocket message is binary, if so, stringify it.
        if (event.data && event.data instanceof Blob) {
            this.handelOnMessageBinary(event);
            return;
        }
        var message = JSON.parse(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "received => \n" + JSON.stringify(JSON.parse(event.data), undefined, 1), 6);
        switch (message.type) {
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING: {
                // send our pong payload back to the signalling server
                var payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessagePong(new Date().getTime()).payload();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING + ": " + payload, 6);
                this.webSocket.send(payload);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_REQUIRED: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "AUTHENTICATION_REQUIRED", 6);
                var authenticationRequired = JSON.parse(event.data);
                var url_string = window.location.href;
                var url = new URL(url_string);
                var authRequest = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageAuthRequest(url.searchParams.get("code"), url.searchParams.get("provider"));
                this.webSocket.send(authRequest.payload());
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.AUTHENTICATION_RESPONSE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "AUTHENTICATION_RESPONSE", 6);
                var authenticationResponse = JSON.parse(event.data);
                this.onAuthenticationResponse(authenticationResponse);
                switch (authenticationResponse.outcome) {
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.REDIRECT: {
                        window.location.href = authenticationResponse.redirect;
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.AUTHENTICATED: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "User is authenticated and now requesting an instance", 6);
                        this.webSocket.send(new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageRequestInstance().payload());
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.INVALID_TOKEN: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Authentication error : Invalid Token");
                        break;
                    }
                    case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageAuthResponseOutcomeType.ERROR: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Authentication Error from server Check what you are sending");
                        break;
                    }
                    default: {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "The Outcome Message has not been handled : this is really bad");
                        break;
                    }
                }
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.INSTANCE_STATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "INSTANCE_STATE", 6);
                var instanceState = JSON.parse(event.data);
                this.onInstanceStateChange(instanceState);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "CONFIG", 6);
                var config = JSON.parse(event.data);
                this.onConfig(config);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "PLAYER_COUNT", 6);
                var playerCount = JSON.parse(event.data);
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Player Count: " + (playerCount.count - 1), 6);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "ANSWER", 6);
                var answer = JSON.parse(event.data);
                this.onWebRtcAnswer(answer);
                break;
            }
            case _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "ICE_CANDIDATE", 6);
                var iceCandidate = JSON.parse(event.data);
                this.onIceCandidate(iceCandidate.candidate);
                break;
            }
            default: {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Error Message type not Defined");
                break;
            }
        }
    };
    /**
     * Handles when the Websocket is opened
     * @param event - Not Used
     */
    WebSocketController.prototype.handleOnOpen = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Connected to the signalling server via WebSocket", 6);
    };
    /**
     * Handles when there is an error on the websocket
     * @param event - Error Payload
     */
    WebSocketController.prototype.handleOnError = function (event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'WebSocket error: ');
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), event.toString());
    };
    /**
     * Handles when the Websocket is closed
     * @param event - Close Event
     */
    WebSocketController.prototype.handleOnClose = function (event) {
        this.onWebSocketOncloseOverlayMessage(event);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Disconnected to the signalling server via WebSocket: " + JSON.stringify(event.code) + " - " + event.reason, 6);
        this.stopAfkWarningTimer();
    };
    /**
     * An override for stopping the afk warning timer
     */
    WebSocketController.prototype.stopAfkWarningTimer = function () { };
    WebSocketController.prototype.sendWebRtcOffer = function (offer) {
        var payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCOffer(offer);
        this.webSocket.send(payload.payload());
    };
    /**
     * Sends an RTC Ice Candidate to the Server
     * @param candidate - RTC Ice Candidate
     */
    WebSocketController.prototype.sendIceCandidate = function (candidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), "Sending Ice Candidate", 6);
        if (this.webSocket && this.webSocket.readyState === this.WS_OPEN_STATE) {
            //ws.send(JSON.stringify({ type: 'iceCandidate', candidate: candidate }));
            var IceCandidate = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageIceCandidate(candidate);
            this.webSocket.send(IceCandidate.payload());
        }
    };
    /**
     * Closes the Websocket connection
     */
    WebSocketController.prototype.close = function () {
        this.webSocket.close();
    };
    /**
     * Sends the Aggregated Stats to the signaling server
     * @param stats - Stats Payload
     */
    WebSocketController.prototype.sendStats = function (stats) {
        var data = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageStats(stats);
        this.webSocket.send(data.payload());
    };
    /** Event used for Displaying websocket closed messages */
    WebSocketController.prototype.onWebSocketOncloseOverlayMessage = function (event) { };
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    WebSocketController.prototype.onConfig = function (messageConfig) { };
    /**
     * @param iceCandidate - Ice Candidate sent from the Signaling server server's RTC hand shake
     */
    WebSocketController.prototype.onIceCandidate = function (iceCandidate) { };
    /**
     * Event is fired when the websocket receives the answer for the RTC peer Connection
     * @param messageAnswer - The RTC Answer payload from the signaling server
     */
    WebSocketController.prototype.onWebRtcAnswer = function (messageAnswer) { };
    /**
     * Event fired with the websocket receives a instance state
     * @param instanceState - UE Instance State
     */
    WebSocketController.prototype.onInstanceStateChange = function (instanceState) { };
    /**
     * Event fired with the websocket receives a Authentication Response
     * @param authResponse - Authentication Response
     */
    WebSocketController.prototype.onAuthenticationResponse = function (authResponse) { };
    return WebSocketController;
}());

/* 524f4d4d */


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AfkLogic: () => (/* reexport safe */ _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__.AfkLogic),
/* harmony export */   AggregatedStats: () => (/* reexport safe */ _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_6__.AggregatedStats),
/* harmony export */   Config: () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_1__.Config),
/* harmony export */   ControlSchemeType: () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_1__.ControlSchemeType),
/* harmony export */   DataChannelController: () => (/* reexport safe */ _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_9__.DataChannelController),
/* harmony export */   DelegateBase: () => (/* reexport safe */ _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_2__.DelegateBase),
/* harmony export */   Encoder: () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__.Encoder),
/* harmony export */   InitialSettings: () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__.InitialSettings),
/* harmony export */   InstanceState: () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.InstanceState),
/* harmony export */   LatencyTestResults: () => (/* reexport safe */ _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_4__.LatencyTestResults),
/* harmony export */   Logger: () => (/* reexport safe */ _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__.Logger),
/* harmony export */   MessageAuthResponse: () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.MessageAuthResponse),
/* harmony export */   MessageAuthResponseOutcomeType: () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.MessageAuthResponseOutcomeType),
/* harmony export */   MessageInstanceState: () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__.MessageInstanceState),
/* harmony export */   WebRTC: () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__.WebRTC),
/* harmony export */   version: () => (/* binding */ version),
/* harmony export */   webRtcPlayerController: () => (/* reexport safe */ _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__.webRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Delegate_DelegateBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Delegate/DelegateBase */ "./src/Delegate/DelegateBase.ts");
/* harmony import */ var _Afk_AfkLogic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Afk/AfkLogic */ "./src/Afk/AfkLogic.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PeerConnectionController/AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./WebSockets/MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./DataChannel/DataChannelController */ "./src/DataChannel/DataChannelController.ts");










var version = "1.5.1";

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNILDRDQUFjLEdBQWQsVUFBZSxZQUFpQyxJQUFJLENBQUM7SUFFckQ7OztPQUdHO0lBQ0gsNENBQWMsR0FBZCxVQUFlLGFBQTJDLElBQUksQ0FBQztJQUUvRDs7O09BR0c7SUFDSCxtREFBcUIsR0FBckIsVUFBc0IsYUFBa0QsSUFBSSxDQUFDO0lBRTdFOzs7T0FHRztJQUNILHNEQUF3QixHQUF4QixVQUF5QixZQUFnRCxJQUFJLENBQUM7SUFDbEYsMEJBQUM7QUFBRCxDQUFDOztBQUdELGNBQWM7Ozs7Ozs7VUMxUmQ7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0E7V0FDQSx5Q0FBeUMsd0NBQXdDO1dBQ2pGO1dBQ0E7V0FDQTs7Ozs7V0NQQTs7Ozs7V0NBQTtXQUNBO1dBQ0E7V0FDQSx1REFBdUQsaUJBQWlCO1dBQ3hFO1dBQ0EsZ0RBQWdELGFBQWE7V0FDN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNOOEU7QUFDbkI7QUFFTDtBQU9aO0FBRTRCO0FBQ1c7QUFDSjtBQUMwRDtBQUM5RjtBQUNtQztBQUVyRSxJQUFNLE9BQU8sR0FBRyxPQUFlLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvQWZrL0Fma0xvZ2ljLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0NvbmZpZy9Db25maWcudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvRGVsZWdhdGUvRGVsZWdhdGVCYXNlLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0ZyZWV6ZUZyYW1lL0ZyZWV6ZUZyYW1lLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0ZyZWV6ZUZyYW1lL0ZyZWV6ZUZyYW1lQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9JbnB1dHMvRmFrZVRvdWNoQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9JbnB1dHMvR2FtZXBhZENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvSW5wdXRzL0d5cm9Db250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0lucHV0cy9JbnB1dENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvSW5wdXRzL0tleWJvYXJkQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9JbnB1dHMvTW91c2VCdXR0b25zLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0lucHV0cy9Nb3VzZUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvSW5wdXRzL1NwZWNpYWxLZXlDb2Rlcy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9JbnB1dHMvVG91Y2hDb250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL0xvZ2dlci9Mb2dnZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvTWljUGxheWVyL01pY0NvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlUGFpclN0YXRzLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVTdGF0LnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9EYXRhQ2hhbm5lbFN0YXRzLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9JbmJvdW5kQXVkaW9TdGF0cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvSW5ib3VuZFZpZGVvU3RhdHMudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kVmlkZW9TdGF0cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9TdHJlYW1TdGF0cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9VZUNvbnRyb2xNZXNzYWdlLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1VlRGF0YU1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvVWVEZXNjcmlwdG9yLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1VlRGVzY3JpcHRvclVpLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1VlSW5wdXRHYW1lUGFkTWVzc2FnZS50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9VZUlucHV0S2V5Ym9hcmRNZXNzYWdlLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1VlSW5wdXRNb3VzZU1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvVWVJbnB1dFRvdWNoTWVzc2FnZS50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9VZU1lc3NhZ2VUeXBlcy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9VaS9VaUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvVmlkZW9QbGF5ZXIvU3RyZWFtQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9WaWRlb1BsYXllci9WaWRlb1BsYXllci50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9WaWRlb1BsYXllci9WaWRlb1BsYXllck1vdXNlSG92ZXJFdmVudHMudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXJNb3VzZUxvY2tlZEV2ZW50cy50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC8uL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kLy4vc3JjL1dlYlNvY2tldHMvTWVzc2FnZVNlbmQudHMiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyLnRzIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9saWJzcHNmcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2xpYnNwc2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vbGlic3BzZnJvbnRlbmQvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wibGlic3BzZnJvbnRlbmRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wibGlic3BzZnJvbnRlbmRcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCAoKSA9PiB7XG5yZXR1cm4gIiwiaW1wb3J0IHsgQ29udHJvbFNjaGVtZVR5cGUgfSBmcm9tIFwiLi4vQ29uZmlnL0NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xyXG5leHBvcnQgY2xhc3MgQWZrTG9naWMge1xyXG4gICAgLy8gdGltZSBvdXQgbG9naWMgZGV0YWlscyBcclxuICAgIGNvbnRyb2xTY2hlbWU6IG51bWJlcjtcclxuICAgIHdhcm5UaW1lb3V0ID0gMDtcclxuICAgIGNsb3NlVGltZW91dCA9IDEwO1xyXG4gICAgYWN0aXZlID0gZmFsc2U7XHJcbiAgICB3YXJuVGltZXI6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+ID0gdW5kZWZpbmVkO1xyXG4gICAgY291bnREb3duID0gMDtcclxuICAgIGNvdW50RG93blRpbWVyOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRJbnRlcnZhbD4gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29udHJvbFNjaGVtZTogbnVtYmVyLCBhZmtUaW1lb3V0OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLndhcm5UaW1lb3V0ID0gYWZrVGltZW91dDtcclxuICAgICAgICB0aGlzLmNvbnRyb2xTY2hlbWUgPSBjb250cm9sU2NoZW1lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1ldGhvZHMgdGhhdCBvY2N1ciB3aGVuIGFuIGFmayBldmVudCBsaXN0ZW5lciBpcyBjbGlja2VkXHJcbiAgICAgKi9cclxuICAgIG9uQWZrQ2xpY2soKSB7XHJcbiAgICAgICAgdGhpcy5oaWRlQ3VycmVudE92ZXJsYXkoKTtcclxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuY291bnREb3duVGltZXIpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0IHRoZSB3YXJuaW5nIHRpbWVyIGlmIGEgdGltZW91dCBpcyBzZXQgZ3JlYXRlciB0aGF0IDAgc2Vjb25kcyAgIFxyXG4gICAgICovXHJcbiAgICBzdGFydEFma1dhcm5pbmdUaW1lcigpIHtcclxuICAgICAgICBpZiAodGhpcy53YXJuVGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXRBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFN0b3AgdGhlIGFmayB3YXJuaW5nIHRpbWVyXHJcbiAgICAgKi9cclxuICAgIHN0b3BBZmtXYXJuaW5nVGltZXIoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMud2FyblRpbWVyKTtcclxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuY291bnREb3duVGltZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGF1c2UgdGhlIHRpbWVyIHdoaWNoIHdoZW4gZWxhcHNlZCB3aWxsIHdhcm4gdGhlIHVzZXIgdGhleSBhcmUgaW5hY3RpdmUuICBcclxuICAgICAqL1xyXG4gICAgcGF1c2VBZmtXYXJuaW5nVGltZXIoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIElmIHRoZSB1c2VyIGludGVyYWN0cyB0aGVuIHJlc2V0IHRoZSB3YXJuaW5nIHRpbWVyLiAgXHJcbiAgICAgKi9cclxuICAgIHJlc2V0QWZrV2FybmluZ1RpbWVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy53YXJuVGltZXIpO1xyXG4gICAgICAgICAgICB0aGlzLndhcm5UaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5hY3RpdmF0ZUFma0V2ZW50KCksIHRoaXMud2FyblRpbWVvdXQgKiAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IHRoZSBBRksgb3ZlcmxheSBhbmQgYmVnaW4gdGhlIGNvdW50RG93biAgIFxyXG4gICAgICovXHJcbiAgICBhY3RpdmF0ZUFma0V2ZW50KCkge1xyXG4gICAgICAgIC8vIFBhdXNlIHRoZSB0aW1lciB3aGlsZSB0aGUgdXNlciBpcyBsb29raW5nIGF0IHRoZSBpbmFjdGl2aXR5IHdhcm5pbmcgb3ZlcmxheVxyXG4gICAgICAgIHRoaXMucGF1c2VBZmtXYXJuaW5nVGltZXIoKTtcclxuXHJcbiAgICAgICAgLy8gaW5zdGFudGlhdGUgYSBuZXcgb3ZlcmxheSBcclxuICAgICAgICB0aGlzLnNob3dBZmtPdmVybGF5KCk7XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZSBvdXIgY291bnREb3duIHRpbWVyIGFuZCBvdmVybGF5IGNvbnRlbnRzXHJcbiAgICAgICAgdGhpcy5jb3VudERvd24gPSB0aGlzLmNsb3NlVGltZW91dDtcclxuICAgICAgICB0aGlzLnVwZGF0ZUFma0NvdW50ZG93bigpO1xyXG5cclxuICAgICAgICAvLyBpZiB3ZSBhcmUgaW4gbG9ja2VkIG1vdXNlIGV4aXQgcG9pbnRlcmxvY2sgXHJcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbFNjaGVtZSA9PSBDb250cm9sU2NoZW1lVHlwZS5Mb2NrZWRNb3VzZSkge1xyXG4gICAgICAgICAgICAvLyBtaW5vciBoYWNrIHRvIGFsbGV2aWF0ZSBpb3Mgbm90IHN1cHBvcnRpbmcgcG9pbnRlcmxvY2tcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaykge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlc2V0IG91ciBjb3VudERvd24gaW50ZXJ2YWwgYWNjb3JkaW5nbHkgXHJcbiAgICAgICAgdGhpcy5jb3VudERvd25UaW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb3VudERvd24tLTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY291bnREb3duID09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZSB1c2VyIGZhaWxlZCB0byBjbGljayBzbyBoaWRlIHRoZSBvdmVybGF5IGFuZCBkaXNjb25uZWN0IHRoZW0uXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVDdXJyZW50T3ZlcmxheSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKFwiWW91IGhhdmUgYmVlbiBkaXNjb25uZWN0ZWQgZHVlIHRvIGluYWN0aXZpdHlcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlV2ViU29ja2V0KCk7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiWW91IGhhdmUgYmVlbiBkaXNjb25uZWN0ZWQgZHVlIHRvIGluYWN0aXZpdHlcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gc3dpdGNoIG9mZiB0aGUgYWZrIGZlYXR1cmUgYXMgc3RyZWFtIGhhcyBjbG9zZWQgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgY291bnREb3duIG1lc3NhZ2UuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUFma0NvdW50ZG93bigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIHVwZGF0aW5nIHRoZSBhZmsgY291bnRkb3duIG51bWJlciBpbiB0aGUgb3ZlcmxheSBcclxuICAgICAqL1xyXG4gICAgdXBkYXRlQWZrQ291bnRkb3duKCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIHNob3dpbmcgdGhlIGFmayBvdmVybGF5IFxyXG4gICAgICovXHJcbiAgICBzaG93QWZrT3ZlcmxheSgpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBoaWRpbmcgdGhlIGFmayBvdmVybGF5IFxyXG4gICAgICovXHJcbiAgICBoaWRlQ3VycmVudE92ZXJsYXkoKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuICBvdmVycmlkZSBtZXRob2QgZm9yIHNldHRpbmcgdGhlIG92ZXJyaWRlIGZvciB0aGUgZGlzY29ubmVjdCBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIHNldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUobWVzc2FnZTogc3RyaW5nKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3IgY2xvc2luZyB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24gZnJvbSB0aGUgY2xpZW50cyBzaWRlXHJcbiAgICAgKi9cclxuICAgIGNsb3NlV2ViU29ja2V0KCkgeyB9XHJcbn0iLCJleHBvcnQgY2xhc3MgQ29uZmlnIHtcclxuXHJcblx0Ly8gUFJFU0VUIE9QVElPTlNcclxuXHQvLyBlbmFibGUgdGhlIGF1dG8gY29ubmVjdCBvZiB0aGUgd2Vic29ja2V0IFxyXG5cdGVuYWJsZVNwc0F1dG9Db25uZWN0ID0gZmFsc2U7XHJcblxyXG5cdC8vIGVuYWJsZSB0aGUgYXV0b3BsYXkgb2YgdGhlIHZpZGVvIGlmIGVuYWJsZWQgYnkgYnJvd3NlclxyXG5cdGVuYWJsZVNwc0F1dG9wbGF5ID0gZmFsc2U7XHJcblxyXG5cdC8vIHN0YXJ0IHRoZSB2aWRlbyBtdXRlZFxyXG5cdHN0YXJ0VmlkZW9NdXRlZCA9IGZhbHNlO1xyXG5cclxuXHRpc0lPUyA9IGZhbHNlO1xyXG5cclxuXHQvLyBtb2JpbGUgdXNlclxyXG5cdGlzTW9iaWxlID0gZmFsc2VcclxuXHJcblx0Ly8gc2V0IHRoZSBhbW91bnQgb2Ygd2FpdCB0aW1lIGluIHNlY29uZHMgd2hpbGUgdGhlcmUgaXMgaW5hY3Rpdml0eSBmb3IgYWZrIHRvIG9jY3VyIFxyXG5cdGFma1RpbWVvdXQ6IG51bWJlciA9IDEyMDtcclxuXHJcblx0Ly8gVGhlIGNvbnRyb2wgc2NoZW1lIGNvbnRyb2xzIHRoZSBiZWhhdmlvdXIgb2YgdGhlIG1vdXNlIHdoZW4gaXQgaW50ZXJhY3RzIHdpdGggdGhlIFdlYlJUQyBwbGF5ZXIuXHJcblx0Y29udHJvbFNjaGVtZSA9IENvbnRyb2xTY2hlbWVUeXBlLkxvY2tlZE1vdXNlO1xyXG5cclxuXHQvLyBCcm93c2VyIGtleXMgYXJlIHRob3NlIHdoaWNoIGFyZSB0eXBpY2FsbHkgdXNlZCBieSB0aGUgYnJvd3NlciBVSS4gV2UgdXN1YWxseSB3YW50IHRvIHN1cHByZXNzIHRoZXNlIHRvIGFsbG93LCBmb3IgZXhhbXBsZSwgVUU0IHRvIHNob3cgc2hhZGVyIGNvbXBsZXhpdHkgd2l0aCB0aGUgRjUga2V5IHdpdGhvdXQgdGhlIHdlYiBwYWdlIHJlZnJlc2hpbmcuXHJcblx0c3VwcHJlc3NCcm93c2VyS2V5cyA9IHRydWU7XHJcblxyXG5cdC8vIFVFNCBoYXMgYSBmYWtlIHRvdWNoZXMgb3B0aW9uIHdoaWNoIGZha2VzIGEgc2luZ2xlIGZpbmdlciB0b3VjaCB3aGVuIHRoZSB1c2VyIGRyYWdzIHdpdGggdGhlaXIgbW91c2UuIFxyXG5cdC8vIFdlIG1heSBwZXJmb3JtIHRoZSByZXZlcnNlOyBhIHNpbmdsZSBmaW5nZXIgdG91Y2ggbWF5IGJlIGNvbnZlcnRlZCBpbnRvIGEgbW91c2UgZHJhZyBVRTQgc2lkZS4gVGhpcyBhbGxvd3MgYSBub24tdG91Y2ggYXBwbGljYXRpb24gdG8gYmUgY29udHJvbGxlZCBwYXJ0aWFsbHkgdmlhIGEgdG91Y2ggZGV2aWNlLlxyXG5cdGZha2VNb3VzZVdpdGhUb3VjaGVzID0gZmFsc2U7XHJcblxyXG5cdC8vY29tcHVsc29yeSBvcHRpb25zIGFuZCBET01zIFxyXG5cdHNpZ25hbGxpbmdTZXJ2ZXJBZGRyZXNzOiBzdHJpbmc7XHJcblx0cGxheWVyRWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XHJcblxyXG5cdC8vdGhpcyBpcyBhIHZpZGVvIGVsZW1lbnQgdmFyaWFibGUgdG8gYmUgYXNzaWduZWQgd2hlbiB0aGUgdmlkZW8gZWxlbWVudCBpcyBjcmVhdGVkXHJcblx0dmlkZW9QbGF5ZXJFbGVtZW50OiBIVE1MVmlkZW9FbGVtZW50O1xyXG5cclxuXHQvKipcclxuXHQgKiBAcGFyYW0gc2lnbmFsbGluZ1NlcnZlckFkZHJlc3MgLSB0aGUgYWRkcmVzcyBvZiB0aGUgc2lnbmFsaW5nIHNlcnZlciBcclxuXHQgKiBAcGFyYW0gcGxheWVyRWxlbWVudCAtIHRoZSBwbGF5ZXIgZWxlbWVudCBJRCBcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihzaWduYWxsaW5nU2VydmVyQWRkcmVzczogc3RyaW5nLCBwbGF5ZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudCwgaXNNb2JpbGU6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG5cdFx0dGhpcy5zaWduYWxsaW5nU2VydmVyQWRkcmVzcyA9IHNpZ25hbGxpbmdTZXJ2ZXJBZGRyZXNzO1xyXG5cdFx0dGhpcy5wbGF5ZXJFbGVtZW50ID0gcGxheWVyRWxlbWVudDtcclxuXHRcdHRoaXMuaXNNb2JpbGUgPSBpc01vYmlsZTtcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgZW51bSBhc3NvY2lhdGVkIHdpdGggdGhlIG1vdXNlIGJlaW5nIGxvY2tlZCBvciBob3ZlcmluZyBcclxuICovXHJcbmV4cG9ydCBlbnVtIENvbnRyb2xTY2hlbWVUeXBlIHtcclxuXHRMb2NrZWRNb3VzZSA9IDAsXHJcblx0SG92ZXJpbmdNb3VzZSA9IDEsXHJcbn1cclxuIiwiaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuaW1wb3J0IHsgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUgYXMgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi9EYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZVwiO1xyXG5pbXBvcnQgeyBJSW5pdGlhbFNldHRpbmdzLCB9IGZyb20gXCIuL0lJbml0aWFsU2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgSW5pdGlhbFNldHRpbmdzLCB9IGZyb20gXCIuL0luaXRpYWxTZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBJTGF0ZW5jeVRlc3RSZXN1bHRzIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0lMYXRlbmN5VGVzdFJlc3VsdHNcIlxyXG5pbXBvcnQgeyBMYXRlbmN5VGVzdFJlc3VsdHMgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvTGF0ZW5jeVRlc3RSZXN1bHRzXCJcclxuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tIFwiLi4vVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXJcIlxyXG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vQ29uZmlnL0NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBVZURlc2NyaXB0b3JVaSB9IGZyb20gXCIuLi9VZUluc3RhbmNlTWVzc2FnZS9VZURlc2NyaXB0b3JVaVwiO1xyXG5cclxuY2xhc3MgYXQge1xyXG4gICAgcHVibGljIGluUmFuZ2U6IGFueTtcclxuICAgIHB1YmxpYyB4OiBhbnk7XHJcbiAgICBwdWJsaWMgeTogYW55O1xyXG4gICAgY29uc3RydWN0b3IoZTogYW55LCB0OiBhbnksIHM6IGFueSkge1xyXG4gICAgICAgIHRoaXMuaW5SYW5nZSA9IGUsIHRoaXMueCA9IHQsIHRoaXMueSA9IHNcclxuICAgIH1cclxufVxyXG5jbGFzcyBsdCB7XHJcbiAgICBwdWJsaWMgeDogYW55O1xyXG4gICAgcHVibGljIHk6IGFueTtcclxuICAgIGNvbnN0cnVjdG9yKGU6IGFueSwgdDogYW55KSB7XHJcbiAgICAgICAgdGhpcy54ID0gZSwgdGhpcy55ID0gdFxyXG4gICAgfVxyXG59XHJcbmNsYXNzIGR0IHtcclxuICAgIHB1YmxpYyB4OiBhbnk7XHJcbiAgICBwdWJsaWMgeTogYW55O1xyXG4gICAgY29uc3RydWN0b3IoZTogYW55LCB0OiBhbnkpIHtcclxuICAgICAgICB0aGlzLnggPSBlLCB0aGlzLnkgPSB0XHJcbiAgICB9XHJcbn1cclxuY2xhc3Mgb3Qge1xyXG4gICAgcHJpdmF0ZSB2aWRlb0VsZW1lbnRQcm92aWRlcjogYW55O1xyXG4gICAgcHJpdmF0ZSB2aWRlb0VsZW1lbnRQYXJlbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XHJcbiAgICBwcml2YXRlIHZpZGVvRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudCB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSByYXRpbyA9IDA7XHJcbiAgICBwcml2YXRlIG5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRGdW5jOiAoZTogbnVtYmVyLCB0OiBudW1iZXIpID0+IGFueTtcclxuICAgIHByaXZhdGUgbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jOiAoZTogbnVtYmVyLCB0OiBudW1iZXIpID0+IGFueTtcclxuICAgIHByaXZhdGUgZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRGdW5jOiAoZTogbnVtYmVyLCB0OiBudW1iZXIpID0+IGFueTtcclxuICAgIGNvbnN0cnVjdG9yKGU6IGFueSkge1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSBlO1xyXG4gICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vcm1hbGl6ZSBhbmQgcXVhbnRpemUgdW5zaWduZWQsIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vcm1hbGl6ZSBhbmQgdW5xdWFudGl6ZSBzaWduZWQsIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlbm9ybWFsaXplIGFuZCB1bnF1YW50aXplIHVuc2lnbmVkLCBtZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcHVibGljIG5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoZTogbnVtYmVyLCB0OiBudW1iZXIpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRGdW5jKGUsIHQpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkKGU6IG51bWJlciwgdDogbnVtYmVyKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZEZ1bmMoZSwgdCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQoZTogbnVtYmVyLCB0OiBudW1iZXIpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkRnVuYyhlLCB0KTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXR1cE5vcm1hbGl6ZUFuZFF1YW50aXplKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICgodGhpcy52aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpLCB0aGlzLnZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCksIHRoaXMudmlkZW9FbGVtZW50UGFyZW50ICYmIHRoaXMudmlkZW9FbGVtZW50KSkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0IC8gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnZpZGVvRWxlbWVudC52aWRlb0hlaWdodCAvIHRoaXMudmlkZW9FbGVtZW50LnZpZGVvV2lkdGg7XHJcbiAgICAgICAgICAgIGlmIChlID4gdCkge1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlNldHVwIE5vcm1hbGl6ZSBhbmQgUXVhbnRpemUgZm9yIHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpb1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmF0aW8gPSBlIC8gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoZTogbnVtYmVyLCB0OiBudW1iZXIpID0+IHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZFBsYXllckJpZ2dlcihlLCB0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jID0gKGU6IG51bWJlciwgdDogbnVtYmVyKSA9PiB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkUGxheWVyQmlnZ2VyKGUsIHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoZTogbnVtYmVyLCB0OiBudW1iZXIpID0+IHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRQbGF5ZXJCaWdnZXIoZSwgdCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiU2V0dXAgTm9ybWFsaXplIGFuZCBRdWFudGl6ZSBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPD0gdmlkZW9Bc3BlY3RSYXRpb1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmF0aW8gPSB0IC8gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoZTogbnVtYmVyLCB0OiBudW1iZXIpID0+IHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZFBsYXllclNtYWxsZXIoZSwgdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkRnVuYyA9IChlOiBudW1iZXIsIHQ6IG51bWJlcikgPT4gdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZFBsYXllclNtYWxsZXIoZSwgdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkRnVuYyA9IChlOiBudW1iZXIsIHQ6IG51bWJlcikgPT4gdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZFBsYXllclNtYWxsZXIoZSwgdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRQbGF5ZXJCaWdnZXIoZTogbnVtYmVyLCB0OiBudW1iZXIpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IHMgPSBlIC8gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQhLmNsaWVudFdpZHRoO1xyXG4gICAgICAgIGNvbnN0IG4gPSB0aGlzLnJhdGlvICogKHQgLyB0aGlzLnZpZGVvRWxlbWVudFBhcmVudCEuY2xpZW50SGVpZ2h0IC0gMC41KSArIDAuNTtcclxuICAgICAgICByZXR1cm4gKHMgPCAwIHx8IHMgPiAxIHx8IG4gPCAwIHx8IG4gPiAxID8gbmV3IGF0KCExLCA2NTUzNSwgNjU1MzUpIDogbmV3IGF0KCEwLCA2NTUzNiAqIHMsIDY1NTM2ICogbikpO1xyXG4gICAgfVxyXG4gICAgZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRQbGF5ZXJCaWdnZXIoZTogbnVtYmVyLCB0OiBudW1iZXIpOiBsdCB7XHJcbiAgICAgICAgY29uc3QgczogbnVtYmVyID0gZSAvIDY1NTM2O1xyXG4gICAgICAgIGNvbnN0IG46IG51bWJlciA9ICh0IC8gNjU1MzYgLSAwLjUpIC8gdGhpcy5yYXRpbyArIDAuNTtcclxuICAgICAgICByZXR1cm4gbmV3IGx0KHMgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCwgbiAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodCk7XHJcbiAgICB9XHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZFBsYXllckJpZ2dlcihlOiBudW1iZXIsIHQ6IG51bWJlcik6IGR0IHtcclxuICAgICAgICBjb25zdCBzOiBudW1iZXIgPSBlIC8gKDAuNSAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudFdpZHRoKTtcclxuICAgICAgICBjb25zdCBuOiBudW1iZXIgPSB0aGlzLnJhdGlvICogdCAvICgwLjUgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgZHQoMzI3NjcgKiBzLCAzMjc2NyAqIG4pO1xyXG4gICAgfVxyXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZFBsYXllclNtYWxsZXIoZTogbnVtYmVyLCB0OiBudW1iZXIpOiBhdCB7XHJcbiAgICAgICAgY29uc3QgczogbnVtYmVyID0gdGhpcy5yYXRpbyAqIChlIC8gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGggLSAwLjUpICsgMC41O1xyXG4gICAgICAgIGNvbnN0IG46IG51bWJlciA9IHQgLyB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHMgPCAwIHx8IHMgPiAxIHx8IG4gPCAwIHx8IG4gPiAxID8gbmV3IGF0KGZhbHNlLCA2NTUzNSwgNjU1MzUpIDogbmV3IGF0KHRydWUsIDY1NTM2ICogcywgNjU1MzYgKiBuKTtcclxuICAgIH1cclxuICAgIGRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkUGxheWVyU21hbGxlcihlOiBudW1iZXIsIHQ6IG51bWJlcik6IGx0IHtcclxuICAgICAgICBjb25zdCBzOiBudW1iZXIgPSAoZSAvIDY1NTM2IC0gMC41KSAvIHRoaXMucmF0aW8gKyAwLjU7XHJcbiAgICAgICAgY29uc3QgbjogbnVtYmVyID0gdCAvIDY1NTM2O1xyXG4gICAgICAgIHJldHVybiBuZXcgbHQocyAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudFdpZHRoLCBuICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0KTtcclxuICAgIH1cclxuICAgIG5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkUGxheWVyU21hbGxlcihlOiBudW1iZXIsIHQ6IG51bWJlcik6IGR0IHtcclxuICAgICAgICBjb25zdCBzOiBudW1iZXIgPSB0aGlzLnJhdGlvICogZSAvICgwLjUgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCk7XHJcbiAgICAgICAgY29uc3QgbjogbnVtYmVyID0gdCAvICgwLjUgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQpO1xyXG4gICAgICAgIHJldHVybiBuZXcgZHQoMzI3NjcgKiBzLCAzMjc2NyAqIG4pO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgU2VuZGluZyBhbmQgUmVjZWl2aW5nIG9mIG1lc3NhZ2VzIHRvIHRoZSBVRSBJbnN0YW5jZSB2aWEgdGhlIERhdGEgQ2hhbm5lbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERhdGFDaGFubmVsQ29udHJvbGxlciB7XHJcbiAgICBkYXRhQ2hhbm5lbDogUlRDRGF0YUNoYW5uZWw7XHJcbiAgICBwZWVyQ29ubmVjdGlvbjogUlRDUGVlckNvbm5lY3Rpb247XHJcbiAgICBkYXRhY2hhbm5lbE9wdGlvbnM6IFJUQ0RhdGFDaGFubmVsSW5pdDtcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBpc1JlY2VpdmluZ0ZyZWV6ZUZyYW1lID0gZmFsc2U7XHJcbiAgICB1ZURlc2NyaXB0b3JVaTogVWVEZXNjcmlwdG9yVWk7XHJcblxyXG4gICAgLy8gSWYgdGhlIHVzZXIgZm9jdXNlcyBvbiBhIFVFIGlucHV0IHdpZGdldCB0aGVuIHdlIHNob3cgdGhlbSBhIGJ1dHRvbiB0byBvcGVuXHJcbiAgICAvLyB0aGUgb24tc2NyZWVuIGtleWJvYXJkLiBKYXZhU2NyaXB0IHNlY3VyaXR5IG1lYW5zIHdlIGNhbiBvbmx5IHNob3cgdGhlXHJcbiAgICAvLyBvbi1zY3JlZW4ga2V5Ym9hcmQgaW4gcmVzcG9uc2UgdG8gYSB1c2VyIGludGVyYWN0aW9uLlxyXG4gICAgc3RhdGljIGVkaXRUZXh0QnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAvLyBBIGhpZGRlbiBpbnB1dCB0ZXh0IGJveCB3aGljaCBpcyB1c2VkIG9ubHkgZm9yIGZvY3VzaW5nIGFuZCBvcGVuaW5nIHRoZVxyXG4gICAgLy8gb24tc2NyZWVuIGtleWJvYXJkLlxyXG4gICAgc3RhdGljIGhpZGRlbklucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIHN0YXRpYyBjb29yZGluYXRlQ29udmVydGVyOiBvdDtcclxuICAgIGlzSU9TOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHZpZGVvRWxlbWVudDogVmlkZW9QbGF5ZXIsIGNvbmZpZzogQ29uZmlnKSB7XHJcbiAgICAgIERhdGFDaGFubmVsQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyID0gbmV3IG90KHZpZGVvRWxlbWVudCk7XHJcbiAgICAgIHRoaXMuaXNJT1MgPSBjb25maWcuaXNJT1M7XHJcbiAgICB9XHJcblxyXG4gICAgZm9jdXNBbmRPcGVuS2V5Ym9hcmQoZWw6IEhUTUxFbGVtZW50LCB0aW1lb3V0PzogIG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGltZW91dCkge1xyXG4gICAgICAgICAgICB0aW1lb3V0ID0gMTAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZWwpIHtcclxuICAgICAgICAgICAgLy8gQWxpZ24gdGVtcCBpbnB1dCBlbGVtZW50IGFwcHJveGltYXRlbHkgd2hlcmUgdGhlIGlucHV0IGVsZW1lbnQgaXNcclxuICAgICAgICAgICAgLy8gc28gdGhlIGN1cnNvciBkb2Vzbid0IGp1bXAgYXJvdW5kXHJcbiAgICAgICAgICAgIGNvbnN0IF9fdGVtcEVsX186IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG4gICAgICAgICAgICBfX3RlbXBFbF9fLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICAgICAgX190ZW1wRWxfXy5zdHlsZS50b3AgPSBgJHtlbC5vZmZzZXRUb3AgKyA3fXB4YDtcclxuICAgICAgICAgICAgX190ZW1wRWxfXy5zdHlsZS5sZWZ0ID0gYCR7ZWwub2Zmc2V0TGVmdH1weGA7XHJcbiAgICAgICAgICAgIF9fdGVtcEVsX18uc3R5bGUuaGVpZ2h0ID0gJzAnO1xyXG4gICAgICAgICAgICBfX3RlbXBFbF9fLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgICAgIC8vIFB1dCB0aGlzIHRlbXAgZWxlbWVudCBhcyBhIGNoaWxkIG9mIHRoZSBwYWdlIDxib2R5PiBhbmQgZm9jdXMgb24gaXRcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChfX3RlbXBFbF9fKTtcclxuICAgICAgICAgICAgX190ZW1wRWxfXy5mb2N1cygpO1xyXG5cclxuICAgICAgICAgICAgLy8gVGhlIGtleWJvYXJkIGlzIG9wZW4uIE5vdyBkbyBhIGRlbGF5ZWQgZm9jdXMgb24gdGhlIHRhcmdldCBlbGVtZW50XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgZWwuY2xpY2soKTtcclxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgdGVtcCBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKF9fdGVtcEVsX18pO1xyXG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUbyBDcmVhdGUgYW5kIFNldCB1cCBhIERhdGEgQ2hhbm5lbFxyXG4gICAgICogQHBhcmFtIHBlZXJDb25uZWN0aW9uIC0gVGhlIFJUQyBQZWVyIENvbm5lY3Rpb25cclxuICAgICAqIEBwYXJhbSBsYWJlbCAtIExhYmVsIG9mIHRoZSBEYXRhIENoYW5uZWxcclxuICAgICAqIEBwYXJhbSBkYXRhY2hhbm5lbE9wdGlvbnMgLSBPcHRpb25hbCBSVEMgRGF0YUNoYW5uZWwgb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjcmVhdGVEYXRhQ2hhbm5lbChwZWVyQ29ubmVjdGlvbjogUlRDUGVlckNvbm5lY3Rpb24sIGxhYmVsOiBzdHJpbmcsIGRhdGFjaGFubmVsT3B0aW9ucz86IFJUQ0RhdGFDaGFubmVsSW5pdCkge1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24gPSBwZWVyQ29ubmVjdGlvbjtcclxuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMgPSBkYXRhY2hhbm5lbE9wdGlvbnM7XHJcbiAgICAgICAgaWYgKGRhdGFjaGFubmVsT3B0aW9ucyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YWNoYW5uZWxPcHRpb25zID0ge30gYXMgUlRDRGF0YUNoYW5uZWxJbml0XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YWNoYW5uZWxPcHRpb25zLm9yZGVyZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbCA9IHRoaXMucGVlckNvbm5lY3Rpb24uY3JlYXRlRGF0YUNoYW5uZWwodGhpcy5sYWJlbCwgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMpO1xyXG4gICAgICAgIC8vV2UgV2FudCBhbiBBcnJheSBCdWZmZXIgbm90IGEgYmxvYlxyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwuYmluYXJ5VHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLm9ub3BlbiA9ICgpID0+IHRoaXMuaGFuZGxlT25PcGVuKCk7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5vbmNsb3NlID0gKCkgPT4gdGhpcy5oYW5kbGVPbkNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5vbm1lc3NhZ2UgPSAoZXY6IE1lc3NhZ2VFdmVudDxhbnk+KSA9PiB7IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2KTsgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgRGF0YSBDaGFubmVsIGlzIG9wZW5lZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbk9wZW4oKSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkRhdGEgQ2hhbm5lbDogXCIgKyB0aGlzLmxhYmVsICsgXCIgaXMgb3BlbmVkLlwiLCA3KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgRGF0YSBDaGFubmVsIGlzIGNsb3NlZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkNsb3NlKCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJEYXRhIENoYW5uZWw6IFwiICsgdGhpcy5sYWJlbCArIFwiIGlzIGNsb3NlZC5cIiwgNyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkIFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTWVzc2FnZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbk1lc3NhZ2UoZXZlbnQ6IE1lc3NhZ2VFdmVudCkge1xyXG4gICAgICAgIGxldCBtZXNzYWdlID0gbmV3IFVpbnQ4QXJyYXkoZXZlbnQuZGF0YSk7XHJcblxyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJNZXNzYWdlIGluY29taW5nXCIsIDYpO1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJNZXNzYWdlOlwiICsgbWVzc2FnZSwgNik7XHJcblxyXG4gICAgICAgIHN3aXRjaCAobWVzc2FnZVswXSkge1xyXG4gICAgICAgICAgICBjYXNlIERhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLlF1YWxpdHlDb250cm9sT3duZXJzaGlwOiB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuUXVhbGl0eUNvbnRyb2xPd25lcnNoaXBcIiwgNik7XHJcbiAgICAgICAgICAgICAgICBsZXQgUXVhbGl0eU93bmVyc2hpcCA9IG5ldyBCb29sZWFuKG1lc3NhZ2VbMV0pLnZhbHVlT2YoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25RdWFsaXR5Q29udHJvbE93bmVyc2hpcChRdWFsaXR5T3duZXJzaGlwKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuUmVzcG9uc2U6IHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5SZXNwb25zZVwiLCA2KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25SZXNwb25zZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuQ29tbWFuZDoge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkRhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLkNvbW1hbmRcIiwgNik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tbWFuZChtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuRnJlZXplRnJhbWU6IHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5GcmVlemVGcmFtZVwiLCA2KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc0ZyZWV6ZUZyYW1lTWVzc2FnZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuVW5mcmVlemVGcmFtZToge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkRhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLkZyZWV6ZUZyYW1lXCIsIDYpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlY2VpdmluZ0ZyZWV6ZUZyYW1lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uVW5GcmVlemVGcmFtZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5WaWRlb0VuY29kZXJBdmdRUDoge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkRhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLlZpZGVvRW5jb2RlckF2Z1FQXCIsIDYpO1xyXG4gICAgICAgICAgICAgICAgbGV0IEF2Z1FQID0gTnVtYmVyKG5ldyBUZXh0RGVjb2RlcihcInV0Zi0xNlwiKS5kZWNvZGUobWVzc2FnZS5zbGljZSgxKSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblZpZGVvRW5jb2RlckF2Z1FQKEF2Z1FQKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUubGF0ZW5jeVRlc3Q6IHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5sYXRlbmN5VGVzdFwiLCA2KTtcclxuICAgICAgICAgICAgICAgIGxldCBsYXRlbmN5QXNTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZcIikuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlMYXRlbmN5VGVzdFJlc3VsdHM6IElMYXRlbmN5VGVzdFJlc3VsdHMgPSBKU09OLnBhcnNlKGxhdGVuY3lBc1N0cmluZyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGF0ZW5jeVRlc3RSZXN1bHRzOiBMYXRlbmN5VGVzdFJlc3VsdHMgPSBuZXcgTGF0ZW5jeVRlc3RSZXN1bHRzKCk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGxhdGVuY3lUZXN0UmVzdWx0cywgaUxhdGVuY3lUZXN0UmVzdWx0cyk7XHJcbiAgICAgICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMucHJvY2Vzc0ZpZWxkcygpXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uTGF0ZW5jeVRlc3RSZXN1bHQobGF0ZW5jeVRlc3RSZXN1bHRzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuSW5pdGlhbFNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuSW5pdGlhbFNldHRpbmdzXCIsIDYpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHBheWxvYWRBc1N0cmluZyA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi0xNlwiKS5kZWNvZGUobWVzc2FnZS5zbGljZSgxKSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaUluaXRpYWxTZXR0aW5nczogSUluaXRpYWxTZXR0aW5ncyA9IEpTT04ucGFyc2UocGF5bG9hZEFzU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgIGxldCBpbml0aWFsU2V0dGluZ3M6IEluaXRpYWxTZXR0aW5ncyA9IG5ldyBJbml0aWFsU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaW5pdGlhbFNldHRpbmdzLCBpSW5pdGlhbFNldHRpbmdzKTtcclxuICAgICAgICAgICAgICAgIGluaXRpYWxTZXR0aW5ncy51ZUNvbXBhdGlibGUoKVxyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBwYXlsb2FkQXNTdHJpbmcsIDYpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5PbkluaXRpYWxTZXR0aW5ncyhpbml0aWFsU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgLy9Mb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIG1lc3NhZ2VbMF0udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAvL0xvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcInVua25vd24gbWVzc2FnZSBzZW50IG9uIHRoZSBEYXRhIGNoYW5uZWxcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpcmVkIHdoZW4gYSBSZXNwb25zZSBtZXNzYWdlIGlzIHNlbnQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gTWVzc2FnZSBEYXRhIFVpbnQ4QXJyYXlcclxuICAgICAqL1xyXG4gICAgb25SZXNwb25zZShtZXNzYWdlOiBVaW50OEFycmF5KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkRhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLlJlc3BvbnNlXCIsIDYpO1xyXG4gICAgICAgIGxldCByZXNwb25zZSA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi0xNlwiKS5kZWNvZGUobWVzc2FnZS5zbGljZSgxKSk7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCByZXNwb25zZSwgNik7XHJcbiAgICAgICAgLy8gYWRkIHRvIHJlc3BvbnNlIGhhbmRsZXJzIFxyXG5cdC8qZm9yIChsZXQgbGlzdGVuZXIgb2YgcmVzcG9uc2VFdmVudExpc3RlbmVycy52YWx1ZXMoKSkge1xyXG5cdFx0bGlzdGVuZXIocmVzcG9uc2UpO1xyXG5cdH0qL1xyXG5cclxuXHRjb25zdCB0ID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcblx0Y29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG5cdGlmICh0Lm5hbWUgPT0gJ3NlbGVjdGVkVGV4dCcpIHtcclxuXHRcdG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHQuZGF0YSk7XHJcblx0fVxyXG5cdGlmICh0LmNvbW1hbmQgPT0gJ0pvaW4gU2Vzc2lvbicpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwiSm9pbiBTZXNzaW9uXCIpO1xyXG5cdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kVWlJbnRlcmFjdGlvbihKU09OLnN0cmluZ2lmeSh7XHJcblx0XHRcdFwiUGFzc3dvcmRcIjogXCJQYWxhdGlhbFwiLFxyXG5cdFx0XHRcIklQXCI6IFwicGFsYXRpYWwudGVuYW50LXBhbGF0aWFsLXBsYXRmb3JtLmNvcmV3ZWF2ZS5jbG91ZDoyMjIyXCJcclxuXHRcdH0pKTtcclxuXHR9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlZCB3aGVuIGEgQ29tbWFuZCBtZXNzYWdlIGlzIHNlbnQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gTWVzc2FnZSBEYXRhIFVpbnQ4QXJyYXlcclxuICAgICAqL1xyXG4gICAgb25Db21tYW5kKG1lc3NhZ2U6IFVpbnQ4QXJyYXkpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuQ29tbWFuZFwiLCA2KTtcclxuICAgICAgICBsZXQgY29tbWFuZEFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKFwidXRmLTE2XCIpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKTtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiRGF0YSBDaGFubmVsIENvbW1hbmQ6IFwiICsgY29tbWFuZEFzU3RyaW5nLCA2KTtcclxuICAgICAgICBsZXQgY29tbWFuZDogYW55ID0gSlNPTi5wYXJzZShjb21tYW5kQXNTdHJpbmcpO1xyXG4gICAgICAgIGlmIChjb21tYW5kLmNvbW1hbmQgPT09IFwib25TY3JlZW5LZXlib2FyZFwiKSB7XHJcbiAgICAgICAgICAgIC8vc2hvdyBvbiBzY3JlZW4gS2V5Ym9hcmRcclxuXHQgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIlNob3cgb24gc2NyZWVuIGtleWJvYXJkOiBcIiArIGNvbW1hbmRBc1N0cmluZywgNik7XHJcblx0ICAgIHRoaXMuc2hvd09uU2NyZWVuS2V5Ym9hcmQoY29tbWFuZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNob3dPblNjcmVlbktleWJvYXJkKGNvbW1hbmQ6IGFueSkge1xyXG5cdGxldCBoaWRkZW5JbnB1dCA9IERhdGFDaGFubmVsQ29udHJvbGxlci5oaWRkZW5JbnB1dDtcclxuICAgICAgICBpZiAoY29tbWFuZC5zaG93T25TY3JlZW5LZXlib2FyZCkge1xyXG4gICAgICAgICAgICBpZiAodHJ1ZSkgeyAvLyB0aGlzLmlzSU9TXHJcbiAgICAgICAgICAgICAgICAvLyBTaG93IHRoZSAnZWRpdCB0ZXh0JyBidXR0b24uXHJcbiAgICAgICAgICAgICAgICBEYXRhQ2hhbm5lbENvbnRyb2xsZXIuZWRpdFRleHRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuU3RhdGUnKTtcclxuICAgICAgICAgICAgICAgIC8vIFBsYWNlIHRoZSAnZWRpdCB0ZXh0JyBidXR0b24gbmVhciB0aGUgVUUgaW5wdXQgd2lkZ2V0LlxyXG4gICAgICAgICAgICAgICAgbGV0IHBvcyA9IERhdGFDaGFubmVsQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLnVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkKGNvbW1hbmQueCwgY29tbWFuZC55KTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3MueCAhPSAwICYmIHBvcy55ICE9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBEYXRhQ2hhbm5lbENvbnRyb2xsZXIuZWRpdFRleHRCdXR0b24uc3R5bGUudG9wID0gcG9zLnkudG9TdHJpbmcoKSArICdweCc7XHJcblx0XHQgICAgRGF0YUNoYW5uZWxDb250cm9sbGVyLmVkaXRUZXh0QnV0dG9uLnN0eWxlLmxlZnQgPSAocG9zLnggLSA0MCkudG9TdHJpbmcoKSArICdweCc7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAvL3RoaXMuZm9jdXNBbmRPcGVuS2V5Ym9hcmQoRGF0YUNoYW5uZWxDb250cm9sbGVyLmhpZGRlbklucHV0KTtcclxuXHQgICAgICAgIERhdGFDaGFubmVsQ29udHJvbGxlci5oaWRkZW5JbnB1dC5mb2N1cygpO1xyXG5cdCAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSGlkZSB0aGUgJ2VkaXQgdGV4dCcgYnV0dG9uLlxyXG4gICAgICAgICAgICBEYXRhQ2hhbm5lbENvbnRyb2xsZXIuZWRpdFRleHRCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuU3RhdGUnKTtcclxuICAgICAgICAgICAgLy8gSGlkZSB0aGUgb24tc2NyZWVuIGtleWJvYXJkLlxyXG4gICAgICAgICAgICBEYXRhQ2hhbm5lbENvbnRyb2xsZXIuaGlkZGVuSW5wdXQuYmx1cigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgRGF0YSBvdmVyIHRoZSBEYXRhIGNoYW5uZWwgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gZGF0YSAtIE1lc3NhZ2UgRGF0YSBBcnJheSBCdWZmZXJcclxuICAgICAqL1xyXG4gICAgc2VuZERhdGEoZGF0YTogQXJyYXlCdWZmZXIpIHtcclxuICAgICAgICAvLyByZXNldCB0aGUgYWZrIGluYWN0aXZpdHlcclxuICAgICAgICB0aGlzLnJlc2V0QWZrV2FybmluZ1RpbWVyT25EYXRhU2VuZCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kYXRhQ2hhbm5lbCAmJiB0aGlzLmRhdGFDaGFubmVsLnJlYWR5U3RhdGUgPT0gXCJvcGVuXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5zZW5kKGRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIk1lc3NhZ2UgRmFpbGVkOiBcIiArIG5ldyBVaW50OEFycmF5KGRhdGEpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBVRSBJbnN0YW5jZSB1cGRhdGVzIHdobyBoYXMgUXVhbGl0eSBPd25lcnNoaXBcclxuICAgICAqIEBwYXJhbSBoYXNRdWFsaXR5T3duZXJzaGlwIC0gRG9lcyB0aGUgY2xpZW50IGhhdmUgUXVhbGl0eSBPd25lcnNoaXBcclxuICAgICAqL1xyXG4gICAgb25RdWFsaXR5Q29udHJvbE93bmVyc2hpcChoYXNRdWFsaXR5T3duZXJzaGlwOiBib29sZWFuKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpcmVkIHdoZW4gdGhlIFVFIEluc3RhbmNlIHNlbmRzIGZyZWV6ZSBmcmFtZSBkYXRhXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIEZyZWV6ZSBGcmFtZSBEYXRhXHJcbiAgICAgKi9cclxuICAgIHByb2Nlc3NGcmVlemVGcmFtZU1lc3NhZ2UobWVzc2FnZTogVWludDhBcnJheSkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBVRSBJbnN0YW5jZSBzZW5kcyBhIHVuIEZyZWV6ZSBGcmFtZVxyXG4gICAgICovXHJcbiAgICBvblVuRnJlZXplRnJhbWUoKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpcmVkIHdoZW4gdGhlIFVFIEluc3RhbmNlIHNlbmRzIHRoZSBWaWRlbyBFbmNvZGVyIEF2ZyBRUFxyXG4gICAgICogQHBhcmFtIEF2Z1FQIC0gQXZnIFFQXHJcbiAgICAgKi9cclxuICAgIG9uVmlkZW9FbmNvZGVyQXZnUVAoQXZnUVA6IG51bWJlcikgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBVRSBJbnN0YW5jZSBzZW5kcyBMYXRlbmN5IHRlc3QgUmVzdWx0c1xyXG4gICAgICogQHBhcmFtIGxhdGVuY3lUZXN0UmVzdWx0cyAtIExhdGVuY3kgVGVzdCBSZXN1bHRzXHJcbiAgICAgKi9cclxuICAgIG9uTGF0ZW5jeVRlc3RSZXN1bHQobGF0ZW5jeVRlc3RSZXN1bHRzOiBMYXRlbmN5VGVzdFJlc3VsdHMpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmlyZWQgd2hlbiB0aGUgVUUgSW5zdGFuY2Ugc2VuZHMgSW5pdGlhbCBTZXR0aW5nc1xyXG4gICAgICogQHBhcmFtIEluaXRpYWxTZXR0aW5ncyAtIEluaXRpYWwgU2V0dGluZ3NcclxuICAgICAqL1xyXG4gICAgT25Jbml0aWFsU2V0dGluZ3MoSW5pdGlhbFNldHRpbmdzOiBJbml0aWFsU2V0dGluZ3MpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciByZXNldHRpbmcgdGhlIEFmayB3YXJuaW5nIHRpbWVyIHdoZW4gZGF0YSBpcyBzZW50IG92ZXIgdGhlIGRhdGEgY2hhbm5lbCBcclxuICAgICAqL1xyXG4gICAgcmVzZXRBZmtXYXJuaW5nVGltZXJPbkRhdGFTZW5kKCkgeyB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5zdGFuY2VDb21tYW5kIHtcclxuICAgIGNvbW1hbmQ6IHN0cmluZztcclxufVxyXG4iLCIvKipcclxuICogRGF0YSBDaGFubmVsIFJlY2VpdmVzIE1lc3NhZ2UgVHlwZVxyXG4gKi9cclxuZXhwb3J0IGVudW0gRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUge1xyXG5cdFF1YWxpdHlDb250cm9sT3duZXJzaGlwID0gMCxcclxuXHRSZXNwb25zZSA9IDEsXHJcblx0Q29tbWFuZCA9IDIsXHJcblx0RnJlZXplRnJhbWUgPSAzLFxyXG5cdFVuZnJlZXplRnJhbWUgPSA0LFxyXG5cdFZpZGVvRW5jb2RlckF2Z1FQID0gNSxcclxuXHRsYXRlbmN5VGVzdCA9IDYsXHJcblx0SW5pdGlhbFNldHRpbmdzID0gN1xyXG59IiwiaW1wb3J0IHsgSUVuY29kZXIsIElJbml0aWFsU2V0dGluZ3MsIElQaXhlbFN0cmVhbWluZywgSVdlYlJUQyB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9JSW5pdGlhbFNldHRpbmdzXCJcclxuXHJcbi8qKlxyXG4gKiBMYXRlbmN5IFRlc3QgUmVzdWx0cyBEYXRhXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSW5pdGlhbFNldHRpbmdzIGltcGxlbWVudHMgSUluaXRpYWxTZXR0aW5ncyB7XHJcblxyXG4gICAgUGl4ZWxTdHJlYW1pbmc/OiBJUGl4ZWxTdHJlYW1pbmc7XHJcbiAgICBFbmNvZGVyPzogSUVuY29kZXI7XHJcbiAgICBXZWJSVEM/OiBJV2ViUlRDO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMuUGl4ZWxTdHJlYW1pbmcgPSBuZXcgUGl4ZWxTdHJlYW1pbmcoKVxyXG4gICAgICAgIHRoaXMuRW5jb2RlciA9IG5ldyBFbmNvZGVyKClcclxuICAgICAgICB0aGlzLldlYlJUQyA9IG5ldyBXZWJSVEMoKVxyXG4gICAgfVxyXG5cclxuICAgIHVlQ29tcGF0aWJsZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5XZWJSVEMuTWF4RlBTICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5XZWJSVEMuRlBTID0gdGhpcy5XZWJSVEMuTWF4RlBTXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgUGl4ZWxTdHJlYW1pbmcgaW1wbGVtZW50cyBJUGl4ZWxTdHJlYW1pbmcge1xyXG4gICAgQWxsb3dQaXhlbFN0cmVhbWluZ0NvbW1hbmRzPzogYm9vbGVhbjtcclxuICAgIERpc2FibGVMYXRlbmN5VGVzdD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFbmNvZGVyIGltcGxlbWVudHMgSUVuY29kZXIge1xyXG4gICAgVGFyZ2V0Qml0cmF0ZT86IG51bWJlcjtcclxuICAgIE1heEJpdHJhdGU/OiBudW1iZXI7XHJcbiAgICBNaW5RUD86IG51bWJlcjtcclxuICAgIE1heFFQPzogbnVtYmVyO1xyXG4gICAgUmF0ZUNvbnRyb2w/OiBcIkNCUlwiIHwgXCJWQlJcIiB8IFwiQ29uc3RRUFwiO1xyXG4gICAgRmlsbGVyRGF0YT86IGJvb2xlYW47XHJcbiAgICBNdWx0aVBhc3M/OiBcIkRJU0FCTEVEXCIgfCBcIlFVQVJURVJcIiB8IFwiRlVMTFwiO1xyXG5cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBXZWJSVEMgaW1wbGVtZW50cyBJV2ViUlRDIHtcclxuICAgIERlZ3JhZGF0aW9uUHJlZj86IFwiQkFMQU5DRURcIiB8IFwiTUFJTlRBSU5fRlJBTUVSQVRFXCIgfCBcIk1BSU5UQUlOX1JFU09MVVRJT05cIjtcclxuICAgIE1pbkJpdHJhdGU/OiBudW1iZXI7XHJcbiAgICBNYXhCaXRyYXRlPzogbnVtYmVyO1xyXG4gICAgTG93UVA/OiBudW1iZXI7XHJcbiAgICBIaWdoUVA/OiBudW1iZXI7XHJcbiAgICAvLyBVRTQuMjcgY29tcGF0aWJsZVxyXG4gICAgTWF4RlBTPzogbnVtYmVyO1xyXG4gICAgLy8gVUU1IGNvbXBhdGlibGVcclxuICAgIEZQUz86IG51bWJlcjtcclxuXHJcblxyXG59XHJcbiIsImltcG9ydCB7IElMYXRlbmN5VGVzdFJlc3VsdHMgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvSUxhdGVuY3lUZXN0UmVzdWx0c1wiXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi9Mb2dnZXIvTG9nZ2VyXCI7XHJcbi8qKlxyXG4gKiBMYXRlbmN5IFRlc3QgUmVzdWx0cyBEYXRhXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTGF0ZW5jeVRlc3RSZXN1bHRzIGltcGxlbWVudHMgSUxhdGVuY3lUZXN0UmVzdWx0cyB7XHJcbiAgICAvL0ZpZWxkcyBTZXQgZnJvbSB0aGUgbGF0ZW5jeSBwYXlsb2FkIHJlZ2FyZGxlc3Mgb2YgdmVyc2lvblxyXG4gICAgUmVjZWlwdFRpbWVNczogbnVtYmVyID0gbnVsbDtcclxuICAgIFRyYW5zbWlzc2lvblRpbWVNczogbnVtYmVyID0gbnVsbDtcclxuXHJcbiAgICAvL0ZpZWxkcyBTZXQgZnJvbSB0aGUgbGF0ZW5jeSBwYXlsb2FkIGZyb20gNC4yNy4yXHJcbiAgICBQcmVDYXB0dXJlVGltZU1zOiBudW1iZXIgPSBudWxsO1xyXG4gICAgUG9zdENhcHR1cmVUaW1lTXM6IG51bWJlciA9IG51bGw7XHJcbiAgICBQcmVFbmNvZGVUaW1lTXM6IG51bWJlciA9IG51bGw7XHJcbiAgICBQb3N0RW5jb2RlVGltZU1zOiBudW1iZXIgPSBudWxsO1xyXG5cclxuICAgIC8vRmllbGRzIFNldCBmcm9tIHRoZSBsYXRlbmN5IHBheWxvYWQgZnJvbSA1LjBcclxuICAgIEVuY29kZU1zOiBudW1iZXIgPSBudWxsO1xyXG4gICAgQ2FwdHVyZVRvU2VuZE1zOiBudW1iZXIgPSBudWxsO1xyXG5cclxuXHJcbiAgICAvL0ZpZWxkcyBTZXQgd2hlbiBwcm9jZXNzZWRcclxuICAgIHRlc3RTdGFydFRpbWVNczogbnVtYmVyID0gMDtcclxuICAgIGJyb3dzZXJSZWNlaXB0VGltZU1zOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIC8vRmllbGRzIHNldCBmcm9tIGNhbGN1bGF0aW9uc1xyXG4gICAgbGF0ZW5jeUV4Y2x1ZGluZ0RlY29kZTogbnVtYmVyID0gMDtcclxuICAgIHRlc3REdXJhdGlvbjogbnVtYmVyID0gMDtcclxuICAgIC8vdWVMYXRlbmN5OiBudW1iZXIgPSAwO1xyXG4gICAgbmV0d29ya0xhdGVuY3k6IG51bWJlciA9IDA7XHJcbiAgICBicm93c2VyU2VuZExhdGVuY3k6IG51bWJlciA9IDA7XHJcbiAgICBmcmFtZURpc3BsYXlEZWx0YVRpbWVNczogbnVtYmVyID0gMDtcclxuICAgIGVuZFRvRW5kTGF0ZW5jeTogbnVtYmVyID0gMDtcclxuICAgIC8vdWVQaXhlbFN0cmVhbUxhdGVuY3k6IG51bWJlciA9IDA7XHJcbiAgICBlbmNvZGVMYXRlbmN5OiBudW1iZXIgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgRGVsdGEgVGltZSBNaWxsaXNlY29uZHNcclxuICAgICAqIEBwYXJhbSBEZWx0YVRpbWVNcyAtIERlbHRhIFRpbWUgTWlsbGlzZWNvbmRzXHJcbiAgICAgKi9cclxuICAgIHNldEZyYW1lRGlzcGxheURlbHRhVGltZShEZWx0YVRpbWVNczogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zID0gTWF0aC5yb3VuZChEZWx0YVRpbWVNcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb2Nlc3NGaWVsZHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuRW5jb2RlTXMgPT0gbnVsbCAmJiAodGhpcy5QcmVFbmNvZGVUaW1lTXMgIT0gbnVsbCB8fCB0aGlzLlBvc3RFbmNvZGVUaW1lTXMgIT0gbnVsbCkpIHtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgU2V0dGluZyBFbmNvZGUgTXMgXFxuICR7dGhpcy5Qb3N0RW5jb2RlVGltZU1zfSBcXG4gJHt0aGlzLlByZUVuY29kZVRpbWVNc31gLCA2KTtcclxuICAgICAgICAgICAgdGhpcy5FbmNvZGVNcyA9IHRoaXMuUG9zdEVuY29kZVRpbWVNcyAtIHRoaXMuUHJlRW5jb2RlVGltZU1zXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5DYXB0dXJlVG9TZW5kTXMgPT0gbnVsbCAmJiAodGhpcy5QcmVDYXB0dXJlVGltZU1zICE9IG51bGwgfHwgdGhpcy5Qb3N0Q2FwdHVyZVRpbWVNcyAhPSBudWxsKSkge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBTZXR0aW5nIENhcHR1cmVUb1NlbmRNcyBNcyBcXG4gJHt0aGlzLlBvc3RDYXB0dXJlVGltZU1zfSBcXG4gJHt0aGlzLlByZUNhcHR1cmVUaW1lTXN9YCwgNik7XHJcbiAgICAgICAgICAgIHRoaXMuQ2FwdHVyZVRvU2VuZE1zID0gdGhpcy5Qb3N0Q2FwdHVyZVRpbWVNcyAtIHRoaXMuUHJlQ2FwdHVyZVRpbWVNc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7IElEZWxlZ2F0ZSB9IGZyb20gXCIuL0lEZWxlZ2F0ZVwiO1xyXG5pbXBvcnQgeyBJbml0aWFsU2V0dGluZ3MgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvSW5pdGlhbFNldHRpbmdzXCI7XHJcbmltcG9ydCB7IExhdGVuY3lUZXN0UmVzdWx0cyB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHNcIlxyXG5pbXBvcnQgeyBJQWN0aW9uT3ZlcmxheSB9IGZyb20gXCIuLi9PdmVybGF5L0lBY3Rpb25PdmVybGF5XCI7XHJcbmltcG9ydCB7IElBZmtPdmVybGF5IH0gZnJvbSBcIi4uL092ZXJsYXkvSUFma092ZXJsYXlcIjtcclxuaW1wb3J0IHsgSU92ZXJsYXkgfSBmcm9tIFwiLi4vT3ZlcmxheS9JT3ZlcmxheVwiO1xyXG5pbXBvcnQgeyBJVGV4dE92ZXJsYXkgfSBmcm9tIFwiLi4vT3ZlcmxheS9JVGV4dE92ZXJsYXlcIjtcclxuaW1wb3J0IHsgQWdncmVnYXRlZFN0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHNcIjtcclxuaW1wb3J0IHsgSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vV2ViUnRjUGxheWVyL0lXZWJSdGNQbGF5ZXJDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VJbnN0YW5jZVN0YXRlLCBNZXNzYWdlQXV0aFJlc3BvbnNlIH0gZnJvbSAnLi4vV2ViU29ja2V0cy9NZXNzYWdlUmVjZWl2ZSc7XHJcblxyXG4vKipcclxuICogUHJvdmlkZXMgY29tbW9uIGJhc2UgZnVuY3Rpb25hbGl0eSBmb3IgZGVsZWdhdGVzIHRoYXQgaW1wbGVtZW50IHRoZSBJRGVsZWdhdGUgaW50ZXJmYWNlXHJcbiovXHJcbmV4cG9ydCBjbGFzcyBEZWxlZ2F0ZUJhc2UgaW1wbGVtZW50cyBJRGVsZWdhdGUge1xyXG5cdHB1YmxpYyBpV2ViUnRjQ29udHJvbGxlcjogSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXI7XHJcblx0cHVibGljIGNvbmZpZzogQ29uZmlnO1xyXG5cdHNob3dBY3Rpb25PckVycm9yT25EaXNjb25uZWN0OiBib29sZWFuID0gdHJ1ZTtcclxuXHJcblx0Ly8gc2V0IHRoZSBvdmVybGF5IHBsYWNlaG9sZGVycyBcclxuXHRjdXJyZW50T3ZlcmxheTogSU92ZXJsYXk7XHJcblx0ZGlzY29ubmVjdE92ZXJsYXk6IElBY3Rpb25PdmVybGF5O1xyXG5cdGNvbm5lY3RPdmVybGF5OiBJQWN0aW9uT3ZlcmxheTtcclxuXHRwbGF5T3ZlcmxheTogSUFjdGlvbk92ZXJsYXk7XHJcblx0YWZrT3ZlcmxheTogSUFma092ZXJsYXk7XHJcblx0aW5mb092ZXJsYXk6IElUZXh0T3ZlcmxheTtcclxuXHRlcnJvck92ZXJsYXk6IElUZXh0T3ZlcmxheTtcclxuXHJcblx0LyoqXHJcblx0ICogQHBhcmFtIGNvbmZpZyAtIEEgbmV3bHkgaW5zdGFudGlhdGVkIGNvbmZpZyBvYmplY3QgIFxyXG5cdCAqIHJldHVybnMgdGhlIGJhc2UgZGVsZWdhdGUgb2JqZWN0IHdpdGggdGhlIGNvbmZpZyBpbnNpZGUgaXQgYWxvbmcgd2l0aCBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgT3ZlcmxheSBjb250cm9sbGVyIGNsYXNzIFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnKSB7XHJcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuXHR9XHJcblxyXG5cdHNldENvbmZpZ1RpbWVvdXQodGltZTogbnVtYmVyKSB7XHJcblx0ICB0aGlzLmNvbmZpZy5hZmtUaW1lb3V0ID0gdGltZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNob3dzIHRoZSBkaXNjb25uZWN0IG92ZXJsYXkgXHJcblx0ICovXHJcblx0c2hvd0Rpc2Nvbm5lY3RPdmVybGF5KHVwZGF0ZVRleHQ6IHN0cmluZykge1xyXG5cdFx0dGhpcy5oaWRlQ3VycmVudE92ZXJsYXkoKTtcclxuXHRcdHRoaXMudXBkYXRlRGlzY29ubmVjdE92ZXJsYXkodXBkYXRlVGV4dCk7XHJcblx0XHR0aGlzLmRpc2Nvbm5lY3RPdmVybGF5LnNob3coKTtcclxuXHRcdHRoaXMuY3VycmVudE92ZXJsYXkgPSB0aGlzLmRpc2Nvbm5lY3RPdmVybGF5O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVXBkYXRlIHRoZSBkaXNjb25uZWN0IG92ZXJsYXlzIHNwYW4gdGV4dCBcclxuXHQgKiBAcGFyYW0gdXBkYXRlVGV4dCB0aGUgbmV3IGNvdW50ZG93biBudW1iZXIgXHJcblx0ICovXHJcblx0dXBkYXRlRGlzY29ubmVjdE92ZXJsYXkodXBkYXRlVGV4dDogc3RyaW5nKSB7XHJcblx0XHR0aGlzLmRpc2Nvbm5lY3RPdmVybGF5LnVwZGF0ZSh1cGRhdGVUZXh0KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFjdGl2YXRlcyB0aGUgZGlzY29ubmVjdCBvdmVybGF5cyBhY3Rpb24gXHJcblx0ICovXHJcblx0b25EaXNjb25uZWN0aW9uQWN0aW9uKCkge1xyXG5cdFx0dGhpcy5kaXNjb25uZWN0T3ZlcmxheS5hY3RpdmF0ZSgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogSGlkZXMgdGhlIGN1cnJlbnQgb3ZlcmxheSBcclxuXHQgKi9cclxuXHRoaWRlQ3VycmVudE92ZXJsYXkoKSB7XHJcblx0XHRpZiAodGhpcy5jdXJyZW50T3ZlcmxheSAhPSBudWxsKSB7XHJcblx0XHRcdHRoaXMuY3VycmVudE92ZXJsYXkuaGlkZSgpO1xyXG5cdFx0XHR0aGlzLmN1cnJlbnRPdmVybGF5ID0gbnVsbDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNob3dzIHRoZSBjb25uZWN0IG92ZXJsYXkgXHJcblx0ICovXHJcblx0c2hvd0Nvbm5lY3RPdmVybGF5KCkge1xyXG5cdFx0dGhpcy5oaWRlQ3VycmVudE92ZXJsYXkoKTtcclxuXHRcdHRoaXMuY29ubmVjdE92ZXJsYXkuc2hvdygpO1xyXG5cdFx0dGhpcy5jdXJyZW50T3ZlcmxheSA9IHRoaXMuY29ubmVjdE92ZXJsYXk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTaG93cyB0aGUgcGxheSBvdmVybGF5IFxyXG5cdCAqL1xyXG5cdHNob3dQbGF5T3ZlcmxheSgpIHtcclxuXHRcdHRoaXMuaGlkZUN1cnJlbnRPdmVybGF5KCk7XHJcblx0XHR0aGlzLnBsYXlPdmVybGF5LnNob3coKTtcclxuXHRcdHRoaXMuY3VycmVudE92ZXJsYXkgPSB0aGlzLnBsYXlPdmVybGF5O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2hvd3MgdGhlIHRleHQgb3ZlcmxheSBcclxuXHQgKi9cclxuXHRzaG93VGV4dE92ZXJsYXkodGV4dDogc3RyaW5nKSB7XHJcblx0XHR0aGlzLmhpZGVDdXJyZW50T3ZlcmxheSgpO1xyXG5cdFx0dGhpcy5pbmZvT3ZlcmxheS51cGRhdGUodGV4dCk7XHJcblx0XHR0aGlzLmluZm9PdmVybGF5LnNob3coKTtcclxuXHRcdHRoaXMuY3VycmVudE92ZXJsYXkgPSB0aGlzLmluZm9PdmVybGF5O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2hvd3MgdGhlIGVycm9yIG92ZXJsYXkgXHJcblx0ICovXHJcblx0c2hvd0Vycm9yT3ZlcmxheSh0ZXh0OiBzdHJpbmcpIHtcclxuXHRcdHRoaXMuaGlkZUN1cnJlbnRPdmVybGF5KCk7XHJcblx0XHR0aGlzLmVycm9yT3ZlcmxheS51cGRhdGUodGV4dCk7XHJcblx0XHR0aGlzLmVycm9yT3ZlcmxheS5zaG93KCk7XHJcblx0XHR0aGlzLmN1cnJlbnRPdmVybGF5ID0gdGhpcy5lcnJvck92ZXJsYXk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBY3RpdmF0ZXMgdGhlIGNvbm5lY3Qgb3ZlcmxheXMgYWN0aW9uIFxyXG5cdCAqL1xyXG5cdG9uQ29ubmVjdEFjdGlvbigpIHtcclxuXHRcdHRoaXMuY29ubmVjdE92ZXJsYXkuYWN0aXZhdGUoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFjdGl2YXRlcyB0aGUgcGxheSBvdmVybGF5cyBhY3Rpb24gXHJcblx0ICovXHJcblx0b25QbGF5QWN0aW9uKCkge1xyXG5cdFx0dGhpcy5wbGF5T3ZlcmxheS5hY3RpdmF0ZSgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2hvd3MgdGhlIGFmayBvdmVybGF5IFxyXG5cdCAqIEBwYXJhbSBjb3VudERvd24gdGhlIGNvdW50ZG93biBudW1iZXIgZm9yIHRoZSBhZmsgY291bnRkb3duIFxyXG5cdCAqL1xyXG5cdHNob3dBZmtPdmVybGF5KGNvdW50RG93bjogbnVtYmVyKSB7XHJcblx0XHR0aGlzLmhpZGVDdXJyZW50T3ZlcmxheSgpO1xyXG5cdFx0dGhpcy51cGRhdGVBZmtPdmVybGF5KGNvdW50RG93bik7XHJcblx0XHR0aGlzLmFma092ZXJsYXkuc2hvdygpO1xyXG5cdFx0dGhpcy5jdXJyZW50T3ZlcmxheSA9IHRoaXMuYWZrT3ZlcmxheTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFVwZGF0ZSB0aGUgYWZrIG92ZXJsYXlzIGNvdW50ZG93biBudW1iZXIgXHJcblx0ICogQHBhcmFtIGNvdW50RG93biB0aGUgbmV3IGNvdW50ZG93biBudW1iZXIgXHJcblx0ICovXHJcblx0dXBkYXRlQWZrT3ZlcmxheShjb3VudERvd246IG51bWJlcikge1xyXG5cdFx0dGhpcy5hZmtPdmVybGF5LnVwZGF0ZUNvdW50ZG93bihjb3VudERvd24pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWN0aXZhdGVzIHRoZSBhZmsgb3ZlcmxheXMgYWN0aW9uIFxyXG5cdCAqL1xyXG5cdG9uQWZrQWN0aW9uKCkge1xyXG5cdFx0dGhpcy5hZmtPdmVybGF5LmFjdGl2YXRlKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBJbnN0YW50aWF0ZSB0aGUgV2ViUlRDUGxheWVyQ29udHJvbGxlciBpbnRlcmZhY2UgdG8gcHJvdmlkZSBXZWJSVENQbGF5ZXJDb250cm9sbGVyIGZ1bmN0aW9uYWxpdHkgd2l0aGluIHRoaXMgY2xhc3MgYW5kIHNldCB1cCBhbnl0aGluZyB0aGF0IHJlcXVpcmVzIGl0IFxyXG5cdCAqIEBwYXJhbSBpV2ViUnRjUGxheWVyQ29udHJvbGxlciBcclxuXHQgKi9cclxuXHRzZXRJV2ViUnRjUGxheWVyQ29udHJvbGxlcihpV2ViUnRjUGxheWVyQ29udHJvbGxlcjogSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXIpIHtcclxuXHRcdHRoaXMuaVdlYlJ0Y0NvbnRyb2xsZXIgPSBpV2ViUnRjUGxheWVyQ29udHJvbGxlcjtcclxuXHJcblx0XHR0aGlzLmlXZWJSdGNDb250cm9sbGVyLnJlc2l6ZVBsYXllclN0eWxlKCk7XHJcblxyXG5cdFx0dGhpcy5kaXNjb25uZWN0T3ZlcmxheS5vbkFjdGlvbigoKSA9PiB7XHJcblx0XHRcdHRoaXMub25XZWJSdGNBdXRvQ29ubmVjdCgpO1xyXG5cdFx0XHR0aGlzLmlXZWJSdGNDb250cm9sbGVyLmNvbm5lY3RUb1NpZ25hbGxpbmdTZXZlcigpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gQnVpbGQgdGhlIHdlYlJ0YyBjb25uZWN0IG92ZXJsYXkgRXZlbnQgTGlzdGVuZXIgYW5kIHNob3cgdGhlIGNvbm5lY3Qgb3ZlcmxheVxyXG5cdFx0dGhpcy5jb25uZWN0T3ZlcmxheS5vbkFjdGlvbigoKSA9PiB0aGlzLmlXZWJSdGNDb250cm9sbGVyLmNvbm5lY3RUb1NpZ25hbGxpbmdTZXZlcigpKTtcclxuXHJcblx0XHQvLyBzZXQgdXAgdGhlIGFmayBvdmVybGF5cyBhY3Rpb24gXHJcblx0XHR0aGlzLmFma092ZXJsYXkub25BY3Rpb24oKCkgPT4gdGhpcy5pV2ViUnRjQ29udHJvbGxlci5vbkFma0NsaWNrKCkpO1xyXG5cclxuXHRcdC8vIHNldCB1cCB0aGUgcGxheSBvdmVybGF5cyBhY3Rpb24gXHJcblx0XHR0aGlzLnBsYXlPdmVybGF5Lm9uQWN0aW9uKCgpID0+IHtcclxuXHRcdFx0dGhpcy5vblN0cmVhbUxvYWRpbmcoKTtcclxuXHRcdFx0dGhpcy5pV2ViUnRjQ29udHJvbGxlci5wbGF5U3RyZWFtKCk7XHJcblx0XHR9KTtcclxuXHJcblx0XHQvLyBzZXQgdXAgdGhlIGNvbm5lY3Qgb3ZlcmxheXMgYWN0aW9uXHJcblx0XHR0aGlzLnNob3dDb25uZWN0T3JBdXRvQ29ubmVjdE92ZXJsYXlzKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTaG93IHRoZSBDb25uZWN0IE92ZXJsYXkgb3IgYXV0byBjb25uZWN0IFxyXG5cdCAqL1xyXG5cdHNob3dDb25uZWN0T3JBdXRvQ29ubmVjdE92ZXJsYXlzKCkge1xyXG5cdFx0Ly8gc2V0IHVwIGlmIHRoZSBhdXRvIHBsYXkgd2lsbCBiZSB1c2VkIG9yIHJlZ3VsYXIgY2xpY2sgdG8gc3RhcnRcclxuXHRcdGlmICghdGhpcy5jb25maWcuZW5hYmxlU3BzQXV0b0Nvbm5lY3QpIHtcclxuXHRcdFx0dGhpcy5zaG93Q29ubmVjdE92ZXJsYXkoKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIGlmIGF1dG9wbGF5aW5nIHNob3cgYW4gaW5mbyBvdmVybGF5IHdoaWxlIHdoaWxlIHdhaXRpbmcgZm9yIHRoZSBjb25uZWN0aW9uIHRvIGJlZ2luIFxyXG5cdFx0XHR0aGlzLm9uV2ViUnRjQXV0b0Nvbm5lY3QoKTtcclxuXHRcdFx0dGhpcy5pV2ViUnRjQ29udHJvbGxlci5jb25uZWN0VG9TaWduYWxsaW5nU2V2ZXIoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNob3cgdGhlIHdlYlJ0Y0F1dG9Db25uZWN0IE92ZXJsYXkgYW5kIGNvbm5lY3RcclxuXHQgKi9cclxuXHRvbldlYlJ0Y0F1dG9Db25uZWN0KCkge1xyXG5cdFx0dGhpcy5zaG93VGV4dE92ZXJsYXkoXCJBdXRvIENvbm5lY3RpbmcgTm93XCIpO1xyXG5cdFx0dGhpcy5zaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdCA9IHRydWU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiBhbiBpbnN0YW5jZSBzdGF0ZSBjaGFuZ2Ugb2NjdXJzXHJcblx0ICogQHBhcmFtIGluc3RhbmNlU3RhdGUgLSB0aGUgbWVzc2FnZSBpbnN0YW5jZSBzdGF0ZSBcclxuXHQgKi9cclxuXHRvbkluc3RhbmNlU3RhdGVDaGFuZ2UoaW5zdGFuY2VTdGF0ZTogTWVzc2FnZUluc3RhbmNlU3RhdGUpIHsgfVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiByZWNlaXZpbmcgYW4gYXV0aCByZXNwb25zZSBcclxuXHQgKiBAcGFyYW0gYXV0aFJlc3BvbnNlIC0gdGhlIGF1dGggcmVzcG9uc2UgbWVzc2FnZSB0eXBlXHJcblx0ICovXHJcblx0b25BdXRoZW50aWNhdGlvblJlc3BvbnNlKGF1dGhSZXNwb25zZTogTWVzc2FnZUF1dGhSZXNwb25zZSkgeyB9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHJlY2VpdmluZyBhIHdlYlJUQyBhbnN3ZXIgXHJcblx0ICovXHJcblx0b25XZWJSdGNBbnN3ZXIoKSB7XHJcblx0XHR0aGlzLnNob3dUZXh0T3ZlcmxheShcIlJUQyBBbnN3ZXJcIik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTaG93cyBhIHRleHQgb3ZlcmxheSB0byBhbGVydCB0aGUgdXNlciB0aGUgc3RyZWFtIGlzIGN1cnJlbnRseSBsb2FkaW5nXHJcblx0ICovXHJcblx0b25TdHJlYW1Mb2FkaW5nKCkge1xyXG5cdFx0dGhpcy5zaG93VGV4dE92ZXJsYXkoXCJMb2FkaW5nIFN0cmVhbVwiKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV2ZW50IGZpcmVkIHdoZW4gdGhlIHZpZGVvIGlzIGRpc2Nvbm5lY3RlZFxyXG5cdCAqL1xyXG5cdG9uRGlzY29ubmVjdChldmVudFN0cmluZzogc3RyaW5nKSB7XHJcblx0XHRcclxuXHRcdC8vIGlmIHdlIGhhdmUgb3ZlcnJpZGRlbiB0aGUgZGVmYXVsdCBkaXNjb25uZWN0aW9uIG1lc3NzYWdlLCBhc3NpZ24gdGhlIG5ldyB2YWx1ZSBoZXJlXHJcblx0XHRpZiAodGhpcy5pV2ViUnRjQ29udHJvbGxlci5nZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKCkgIT0gXCJcIiAmJiB0aGlzLmlXZWJSdGNDb250cm9sbGVyLmdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaVdlYlJ0Y0NvbnRyb2xsZXIuZ2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSgpICE9IG51bGwpIHtcclxuXHRcdFx0ZXZlbnRTdHJpbmcgPSB0aGlzLmlXZWJSdGNDb250cm9sbGVyLmdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKTtcclxuXHRcdFx0dGhpcy5pV2ViUnRjQ29udHJvbGxlci5zZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKCcnKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdCA9PSBmYWxzZSkge1xyXG5cdFx0XHR0aGlzLnNob3dFcnJvck92ZXJsYXkoYERpc2Nvbm5lY3RlZDogJHtldmVudFN0cmluZ31gKTtcclxuXHRcdFx0dGhpcy5zaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdCA9IHRydWU7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnNob3dEaXNjb25uZWN0T3ZlcmxheShgRGlzY29ubmVjdGVkOiAke2V2ZW50U3RyaW5nfSAgXFxuIENsaWNrIFRvIFJlc3RhcnRgKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgd2hlbiBXZWIgUnRjIGlzIGNvbm5lY3RpbmcgXHJcblx0ICovXHJcblx0b25XZWJSdGNDb25uZWN0aW5nKCkge1xyXG5cdFx0dGhpcy5zaG93VGV4dE92ZXJsYXkoXCJTdGFydGluZyBjb25uZWN0aW9uIHRvIHNlcnZlciwgcGxlYXNlIHdhaXRcIik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGVzIHdoZW4gV2ViIFJ0YyBoYXMgY29ubmVjdGVkIFxyXG5cdCAqL1xyXG5cdG9uV2ViUnRjQ29ubmVjdGVkKCkge1xyXG5cdFx0dGhpcy5zaG93VGV4dE92ZXJsYXkoXCJXZWJSVEMgY29ubmVjdGVkLCB3YWl0aW5nIGZvciB2aWRlb1wiKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgd2hlbiBXZWIgUnRjIGZhaWxzIHRvIGNvbm5lY3QgXHJcblx0ICovXHJcblx0b25XZWJSdGNGYWlsZWQoKSB7XHJcblx0XHR0aGlzLnNob3dFcnJvck92ZXJsYXkoXCJVbmFibGUgdG8gc2V0dXAgdmlkZW9cIik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgdXAgbWV0aG9kcyBhbmQgZnVuY3Rpb25zIHRvIHJ1biB3aGVuIHRoZSB2aWRlbyBpcyBpbml0aWFsaXNlZCBcclxuXHQgKi9cclxuXHRvblZpZGVvSW5pdGlhbGlzZWQoKSB7IH1cclxuXHJcblx0LyoqXHJcblx0ICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gcmVjZWl2aW5nIGxhdGVuY3kgdGVzdCByZXN1bHRzIFxyXG5cdCAqIEBwYXJhbSBsYXRlbmN5IC0gbGF0ZW5jeSB0ZXN0IHJlc3VsdHMgb2JqZWN0XHJcblx0ICovXHJcblx0b25MYXRlbmN5VGVzdFJlc3VsdChsYXRlbmN5OiBMYXRlbmN5VGVzdFJlc3VsdHMpIHsgfVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiByZWNlaXZpbmcgdmlkZW8gc3RhdGlzdGljcyBcclxuXHQgKiBAcGFyYW0gdmlkZW9TdGF0cyAtIHZpZGVvIHN0YXRpc3RpY3MgYXMgYSBhZ2dyZWdhdGUgc3RhdHMgb2JqZWN0IFxyXG5cdCAqL1xyXG5cdG9uVmlkZW9TdGF0cyh2aWRlb1N0YXRzOiBBZ2dyZWdhdGVkU3RhdHMpIHsgfVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiBjYWxjdWxhdGluZyB0aGUgYXZlcmFnZSB2aWRlbyBlbmNvZGVyIHFwIFxyXG5cdCAqIEBwYXJhbSBRUCAtIHRoZSBxdWFsaXR5IG51bWJlciBvZiB0aGUgc3RyZWFtXHJcblx0ICovXHJcblx0b25WaWRlb0VuY29kZXJBdmdRUChRUDogbnVtYmVyKSB7IH1cclxuXHJcblx0LyoqXHJcblx0ICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gcmVjZWl2aW5nIGFuZCBoYW5kbGluZyBpbml0aWFsIHNldHRpbmdzIGZvciB0aGUgVUUgYXBwIFxyXG5cdCAqIEBwYXJhbSBzZXR0aW5ncyAtIGluaXRpYWwgVUUgYXBwIHNldHRpbmdzICBcclxuXHQgKi9cclxuXHRvbkluaXRpYWxTZXR0aW5ncyhzZXR0aW5nczogSW5pdGlhbFNldHRpbmdzKSB7IH1cclxuXHJcblx0LyoqXHJcblx0ICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gc2V0dGluZyBxdWFsaXR5IGNvbnRyb2wgb3duZXJzaGlwIG9mIGEgc3RyZWFtIFxyXG5cdCAqIEBwYXJhbSBoYXNRdWFsaXR5T3duZXJzaGlwIC0gZG9lcyB0aGlzIHVzZXIgaGF2ZSBxdWFsaXR5IG93bmVyc2hpcCBvZiB0aGUgc3RyZWFtIHRydWUgLyBmYWxzZVxyXG5cdCAqL1xyXG5cdG9uUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAoaGFzUXVhbGl0eU93bmVyc2hpcDogYm9vbGVhbikgeyB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIEEgY2xhc3MgZm9yIG1hbmFnaW5nIHRoZSBmcmVlemUgZnJhbWUgb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRnJlZXplRnJhbWUge1xyXG4gICAgcHJvdGVjdGVkIHJvb3REaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gICAgcHJvdGVjdGVkIHJvb3RFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIGltYWdlRWxlbWVudDogSFRNTEltYWdlRWxlbWVudDtcclxuICAgIGZyZWV6ZUZyYW1lSGVpZ2h0ID0gMDtcclxuICAgIGZyZWV6ZUZyYW1lV2lkdGggPSAwO1xyXG4gICAgZW5sYXJnZURpc3BsYXlUb0ZpbGxXaW5kb3c6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3QgYSBmcmVlemUgZnJhbWVcclxuICAgICAqIEBwYXJhbSByb290RGl2IHRoZSBkaXYgdGhhdCBhIGZyZWV6ZSBmcmFtZSBlbGVtZW50IHdpbGwgYmUgY3JlYXRlZCBpbnRvXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJvb3REaXY6IEhUTUxEaXZFbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5yb290RGl2ID0gcm9vdERpdjtcclxuXHJcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBvdmVybGF5XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuaWQgPSAnZnJlZXplRnJhbWUnO1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS56SW5kZXggPSAnMjAnO1xyXG5cclxuICAgICAgICAvLyBjcmVhdGUgdGhlIGltYWdlIHBsYWNlIGhvbGRlclxyXG4gICAgICAgIHRoaXMuaW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cclxuICAgICAgICAvLyBhcHBlbmQgdGhlIGltYWdlIGludG8gdGhlIHJvb3QgZWxlbWVudCBhbmQgYXBwZW5kIHRoZSBlbGVtZW50IHRvIHRoZSByb290IGRpdlxyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5pbWFnZUVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMucm9vdERpdi5hcHBlbmRDaGlsZCh0aGlzLnJvb3RFbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZnJlZXplIGZyYW1lIGVsZW1lbnQgZm9yIHNob3dpbmcgXHJcbiAgICAgKi9cclxuICAgIHNldEVsZW1lbnRGb3JTaG93KCkge1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGZyZWV6ZSBmcmFtZSBlbGVtZW50IGZvciBoaWRpbmcgXHJcbiAgICAgKi9cclxuICAgIHNldEVsZW1lbnRGb3JIaWRlKCkge1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgZnJlZXplIGZyYW1lcyBpbWFnZSBzb3VyY2VcclxuICAgICAqIEBwYXJhbSBqcGVnIHRoZSBmcmVlemUgZnJhbWUgaW1hZ2UgYXMgYSBieXRlIGFycmF5IGRhdGEgIFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVJbWFnZUVsZW1lbnRTb3VyY2UoanBlZzogVWludDhBcnJheSkge1xyXG4gICAgICAgIGxldCBiYXNlNjQgPSBidG9hKGpwZWcucmVkdWNlKChkYXRhLCBieXRlKSA9PiBkYXRhICsgU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSwgJycpKTtcclxuICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zcmMgPSAnZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwnICsgYmFzZTY0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBkaW1lbnNpb25zIGZvciB0aGUgZnJlZXplIGZyYW1lIGZyb20gdGhlIGVsZW1lbnQgYW5kIHJlc2l6ZSBpdFxyXG4gICAgICovXHJcbiAgICBzZXREaW1lbnNpb25zRnJvbUVsZW1lbnRBbmRSZXNpemUoKSB7XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZUhlaWdodCA9IHRoaXMuaW1hZ2VFbGVtZW50Lm5hdHVyYWxIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZVdpZHRoID0gdGhpcy5pbWFnZUVsZW1lbnQubmF0dXJhbFdpZHRoO1xyXG4gICAgICAgIHRoaXMucmVzaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNpemUgYSBmcmVlemUgZnJhbWUgZWxlbWVudCBcclxuICAgICAqL1xyXG4gICAgcmVzaXplKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZyZWV6ZUZyYW1lV2lkdGggIT09IDAgJiYgdGhpcy5mcmVlemVGcmFtZUhlaWdodCAhPT0gMCkge1xyXG4gICAgICAgICAgICBsZXQgZGlzcGxheVdpZHRoID0gMDtcclxuICAgICAgICAgICAgbGV0IGRpc3BsYXlIZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBsZXQgZGlzcGxheVRvcCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBkaXNwbGF5TGVmdCA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVubGFyZ2VEaXNwbGF5VG9GaWxsV2luZG93ID09PSBudWxsIHx8IHRoaXMuZW5sYXJnZURpc3BsYXlUb0ZpbGxXaW5kb3cgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGxldCB3aW5kb3dBc3BlY3RSYXRpbyA9IHdpbmRvdy5pbm5lcldpZHRoIC8gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgbGV0IHZpZGVvQXNwZWN0UmF0aW8gPSB0aGlzLmZyZWV6ZUZyYW1lV2lkdGggLyB0aGlzLmZyZWV6ZUZyYW1lSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvd0FzcGVjdFJhdGlvIDwgdmlkZW9Bc3BlY3RSYXRpbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlIZWlnaHQgPSBNYXRoLmZsb29yKHdpbmRvdy5pbm5lcldpZHRoIC8gdmlkZW9Bc3BlY3RSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheVRvcCA9IE1hdGguZmxvb3IoKHdpbmRvdy5pbm5lckhlaWdodCAtIGRpc3BsYXlIZWlnaHQpICogMC41KTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TGVmdCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlXaWR0aCA9IE1hdGguZmxvb3Iod2luZG93LmlubmVySGVpZ2h0ICogdmlkZW9Bc3BlY3RSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheUhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VG9wID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TGVmdCA9IE1hdGguZmxvb3IoKHdpbmRvdy5pbm5lcldpZHRoIC0gZGlzcGxheVdpZHRoKSAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBWaWRlbyBpcyBjb21pbmcgaW4gYXQgbmF0aXZlIHJlc29sdXRpb24sIHdlIGNhcmUgbW9yZSBhYm91dCB0aGUgcGxheWVyIHNpemVcclxuICAgICAgICAgICAgICAgIGxldCBwbGF5ZXJBc3BlY3RSYXRpbyA9IHRoaXMucm9vdERpdi5vZmZzZXRXaWR0aCAvIHRoaXMucm9vdERpdi5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmlkZW9Bc3BlY3RSYXRpbyA9IHRoaXMuZnJlZXplRnJhbWVXaWR0aCAvIHRoaXMuZnJlZXplRnJhbWVIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAocGxheWVyQXNwZWN0UmF0aW8gPCB2aWRlb0FzcGVjdFJhdGlvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheVdpZHRoID0gdGhpcy5yb290RGl2Lm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlIZWlnaHQgPSBNYXRoLmZsb29yKHRoaXMucm9vdERpdi5vZmZzZXRXaWR0aCAvIHZpZGVvQXNwZWN0UmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlUb3AgPSBNYXRoLmZsb29yKCh0aGlzLnJvb3REaXYub2Zmc2V0SGVpZ2h0IC0gZGlzcGxheUhlaWdodCkgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXlMZWZ0ID0gMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheVdpZHRoID0gTWF0aC5mbG9vcih0aGlzLnJvb3REaXYub2Zmc2V0SGVpZ2h0ICogdmlkZW9Bc3BlY3RSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheUhlaWdodCA9IHRoaXMucm9vdERpdi5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheVRvcCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheUxlZnQgPSBNYXRoLmZsb29yKCh0aGlzLnJvb3REaXYub2Zmc2V0V2lkdGggLSBkaXNwbGF5V2lkdGgpICogMC41KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5yb290RGl2Lm9mZnNldFdpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLnJvb3REaXYub2Zmc2V0SGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5sZWZ0ID0gMCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUudG9wID0gMCArICdweCc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS53aWR0aCA9IGRpc3BsYXlXaWR0aCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VFbGVtZW50LnN0eWxlLmhlaWdodCA9IGRpc3BsYXlIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS5sZWZ0ID0gZGlzcGxheUxlZnQgKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS50b3AgPSBkaXNwbGF5VG9wICsgJ3B4JztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xyXG5pbXBvcnQgeyBGcmVlemVGcmFtZSB9IGZyb20gXCIuL0ZyZWV6ZUZyYW1lXCI7XHJcblxyXG4vKipcclxuICogQSBjbGFzcyBmb3IgY29udHJvbGxpbmcgZnJlZXplIGZyYW1lIGZ1bmN0aW9uYWxpdHkgXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRnJlZXplRnJhbWVDb250cm9sbGVyIHtcclxuICAgIGZyZWV6ZUZyYW1lOiBGcmVlemVGcmFtZTtcclxuICAgIHJlY2VpdmluZyA9IGZhbHNlO1xyXG4gICAgc2l6ZSA9IDA7XHJcbiAgICBqcGVnOiBVaW50OEFycmF5ID0gdW5kZWZpbmVkO1xyXG4gICAgdmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdCBhIGZyZWV6ZSBmcmFtZSBjb250cm9sbGVyIFxyXG4gICAgICogQHBhcmFtIHJvb3REaXYgdGhlIGRpdiB0aGF0IGEgZnJlZXplIGZyYW1lIGVsZW1lbnQgd2lsbCBiZSBjcmVhdGVkIGludG9cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iocm9vdERpdjogSFRNTERpdkVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lID0gbmV3IEZyZWV6ZUZyYW1lKHJvb3REaXYpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvdyB0aGUgZnJlZXplIGZyYW1lIGlmIGl0IGlzIHZhbGlkIFxyXG4gICAgICovXHJcbiAgICBzaG93RnJlZXplRnJhbWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5mcmVlemVGcmFtZS5zZXRFbGVtZW50Rm9yU2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpZGUgdGhlIGZyZWV6ZSBmcmFtZSBhbmQgc2V0IHRoZSB2YWxpZGl0eSB0byBmYWxzZVxyXG4gICAgICovXHJcbiAgICBoaWRlRnJlZXplRnJhbWUoKSB7XHJcbiAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWUuc2V0RWxlbWVudEZvckhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgZnJlZXplIGZyYW1lcyBpbWFnZSBzb3VyY2UgYW5kIGxvYWQgaXQgIFxyXG4gICAgICogQHBhcmFtIGpwZWcgdGhlIGZyZWV6ZSBmcmFtZSBpbWFnZSBhcyBhIGJ5dGUgYXJyYXkgZGF0YVxyXG4gICAgICogQHBhcmFtIG9uTG9hZENhbGxCYWNrIGEgY2FsbCBiYWNrIGZvciBtYW5hZ2luZyBpZiB0aGUgcGxheSBvdmVybGF5IG5lZWRzIHRvIGJlIHNob3duIG9yIG5vdFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVGcmVlemVGcmFtZUFuZFNob3coanBlZzogVWludDhBcnJheSwgb25Mb2FkQ2FsbEJhY2s6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZS51cGRhdGVJbWFnZUVsZW1lbnRTb3VyY2UoanBlZyk7XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZS5pbWFnZUVsZW1lbnQub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lLnNldERpbWVuc2lvbnNGcm9tRWxlbWVudEFuZFJlc2l6ZSgpO1xyXG4gICAgICAgICAgICBvbkxvYWRDYWxsQmFjaygpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIG5ldyBmcmVlemUgZnJhbWUgaW1hZ2UgYW5kIHVwZGF0ZSBpdFxyXG4gICAgICogQHBhcmFtIHZpZXcgdGhlIGZyZWV6ZSBmcmFtZSBpbWFnZSBhcyBhIGJ5dGUgYXJyYXkgZGF0YVxyXG4gICAgICogQHBhcmFtIG9uTG9hZENhbGxCYWNrIGEgY2FsbCBiYWNrIGZvciBtYW5hZ2luZyBpZiB0aGUgcGxheSBvdmVybGF5IG5lZWRzIHRvIGJlIHNob3duIG9yIG5vdFxyXG4gICAgICovXHJcbiAgICBwcm9jZXNzRnJlZXplRnJhbWVNZXNzYWdlKHZpZXc6IFVpbnQ4QXJyYXksIG9uTG9hZENhbGxCYWNrOiBGdW5jdGlvbikge1xyXG4gICAgICAgIC8vIFJlc2V0IGZyZWV6ZSBmcmFtZSBpZiB3ZSBnb3QgYSBmcmVlemUgZnJhbWUgbWVzc2FnZSBhbmQgd2UgYXJlIG5vdCBcInJlY2VpdmluZ1wiIHlldC5cclxuICAgICAgICBpZiAoIXRoaXMucmVjZWl2aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmpwZWcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFeHRyYWN0IHRvdGFsIHNpemUgb2YgZnJlZXplIGZyYW1lIChhY3Jvc3MgYWxsIGNodW5rcylcclxuICAgICAgICB0aGlzLnNpemUgPSAobmV3IERhdGFWaWV3KHZpZXcuc2xpY2UoMSwgNSkuYnVmZmVyKSkuZ2V0SW50MzIoMCwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIEdldCB0aGUganBlZyBwYXJ0IG9mIHRoZSBwYXlsb2FkXHJcbiAgICAgICAgbGV0IGpwZWdCeXRlcyA9IHZpZXcuc2xpY2UoMSArIDQpO1xyXG5cclxuICAgICAgICAvLyBBcHBlbmQgdG8gZXhpc3RpbmcganBlZyB0aGF0IGhvbGRzIHRoZSBmcmVlemUgZnJhbWVcclxuICAgICAgICBpZiAodGhpcy5qcGVnKSB7XHJcbiAgICAgICAgICAgIGxldCBqcGVnID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5qcGVnLmxlbmd0aCArIGpwZWdCeXRlcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICBqcGVnLnNldCh0aGlzLmpwZWcsIDApO1xyXG4gICAgICAgICAgICBqcGVnLnNldChqcGVnQnl0ZXMsIHRoaXMuanBlZy5sZW5ndGgpO1xyXG4gICAgICAgICAgICB0aGlzLmpwZWcgPSBqcGVnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBObyBleGlzdGluZyBmcmVlemUgZnJhbWUganBlZywgbWFrZSBvbmVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5qcGVnID0ganBlZ0J5dGVzO1xyXG4gICAgICAgICAgICB0aGlzLnJlY2VpdmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYHJlY2VpdmVkIGZpcnN0IGNodW5rIG9mIGZyZWV6ZSBmcmFtZTogJHt0aGlzLmpwZWcubGVuZ3RofS8ke3RoaXMuc2l6ZX1gLCA2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZpbmlzaGVkIHJlY2VpdmluZyBmcmVlemUgZnJhbWUsIHdlIGNhbiBzaG93IGl0IG5vd1xyXG4gICAgICAgIGlmICh0aGlzLmpwZWcubGVuZ3RoID09PSB0aGlzLnNpemUpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWNlaXZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYHJlY2VpdmVkIGNvbXBsZXRlIGZyZWV6ZSBmcmFtZSAke3RoaXMuc2l6ZX1gLCA2KTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVGcmVlemVGcmFtZUFuZFNob3codGhpcy5qcGVnLCBvbkxvYWRDYWxsQmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFdlIHJlY2VpdmVkIG1vcmUgZGF0YSB0aGFuIHRoZSBmcmVlemUgZnJhbWUgcGF5bG9hZCBtZXNzYWdlIGluZGljYXRlICh0aGlzIGlzIGFuIGVycm9yKVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuanBlZy5sZW5ndGggPiB0aGlzLnNpemUpIHtcclxuICAgICAgICAgICAgTG9nZ2VyLkVycm9yKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGByZWNlaXZlZCBiaWdnZXIgZnJlZXplIGZyYW1lIHRoYW4gYWR2ZXJ0aXNlZDogJHt0aGlzLmpwZWcubGVuZ3RofS8ke3RoaXMuc2l6ZX1gKTtcclxuICAgICAgICAgICAgdGhpcy5qcGVnID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLnJlY2VpdmluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IFVlSW5wdXRNb3VzZU1lc3NhZ2UgfSBmcm9tIFwiLi4vVWVJbnN0YW5jZU1lc3NhZ2UvVWVJbnB1dE1vdXNlTWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IElUb3VjaENvbnRyb2xsZXIgfSBmcm9tIFwiLi9JVG91Y2hDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IE1vdXNlQnV0dG9uIH0gZnJvbSBcIi4vTW91c2VCdXR0b25zXCI7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi9Mb2dnZXIvTG9nZ2VyXCI7XHJcblxyXG4vKipcclxuICogQWxsb3dzIGZvciB0aGUgdXNhZ2Ugb2YgZmFrZSB0b3VjaCBldmVudHMgYW5kIGltcGxlbWVudHMgSVRvdWNoQ29udHJvbGxlclxyXG4gKiBAcGFyYW0gZGF0YUNoYW5uZWxDb250cm9sbGVyIC0gVGhlIGNvbnRyb2xsZXIgZm9yIHRoZSBEYXRhIGNoYW5uZWwgXHJcbiAqIEBwYXJhbSB2aWRlb1BsYXllckVsZW1lbnQgLSBUaGUgdmlkZW8gcGxheWVyIERPTSBlbGVtZW50IFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZha2VUb3VjaENvbnRyb2xsZXIgaW1wbGVtZW50cyBJVG91Y2hDb250cm9sbGVyIHtcclxuICAgIGZpbmdlcnM6IEZpbmdlcltdO1xyXG4gICAgdWVJbnB1dE1vdXNlTWVzc2FnZTogVWVJbnB1dE1vdXNlTWVzc2FnZTtcclxuICAgIHZpZGVvUGxheWVyRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlciwgdmlkZW9QbGF5ZXJFbGVtZW50OiBIVE1MVmlkZW9FbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy51ZUlucHV0TW91c2VNZXNzYWdlID0gbmV3IFVlSW5wdXRNb3VzZU1lc3NhZ2UoZGF0YUNoYW5uZWxDb250cm9sbGVyKTtcclxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyRWxlbWVudCA9IHZpZGVvUGxheWVyRWxlbWVudDtcclxuXHR0aGlzLmZpbmdlcnMgPSBbXTtcclxuICAgICAgICBkb2N1bWVudC5vbnRvdWNoc3RhcnQgPSAoZXY6IFRvdWNoRXZlbnQpID0+IHRoaXMub25Ub3VjaFN0YXJ0KGV2KTtcclxuICAgICAgICBkb2N1bWVudC5vbnRvdWNoZW5kID0gKGV2OiBUb3VjaEV2ZW50KSA9PiB0aGlzLm9uVG91Y2hFbmQoZXYpO1xyXG4gICAgICAgIGRvY3VtZW50Lm9udG91Y2htb3ZlID0gKGV2OiBUb3VjaEV2ZW50KSA9PiB0aGlzLm9uVG91Y2hNb3ZlKGV2KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYSB0b3VjaCBldmVudCBiZWdpbnMgXHJcbiAgICAgKiBAcGFyYW0gdG91Y2ggLSB0aGUgYWN0aXZhdGluZyB0b3VjaCBldmVudCBcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaFN0YXJ0KHRvdWNoOiBUb3VjaEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHRvdWNoSW5mbyA9IHRvdWNoLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gICAgICAgIGxldCBmaW5nZXJJbmZvID0ge1xyXG4gICAgICAgICAgICBJRDogdG91Y2hJbmZvLmlkZW50aWZpZXIsXHJcbiAgICAgICAgICAgIFg6IHRvdWNoSW5mby5jbGllbnRYIC0gdGhpcy52aWRlb1BsYXllckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCxcclxuICAgICAgICAgICAgWTogdG91Y2hJbmZvLmNsaWVudFkgLSAtIHRoaXMudmlkZW9QbGF5ZXJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxyXG4gICAgICAgIH1cclxuXHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiVG91Y2ggc3RhcnRcIiwgNik7XHJcblxyXG4gICAgICAgIHRoaXMuZmluZ2Vycy5wdXNoKGZpbmdlckluZm8pO1xyXG5cclxuICAgICAgICBsZXQgbW91c2VFdmVudCA9IG5ldyBNb3VzZUV2ZW50KHRvdWNoLnR5cGUsIHRvdWNoSW5mbylcclxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyRWxlbWVudC5vbm1vdXNlZW50ZXIobW91c2VFdmVudCk7XHJcbiAgICAgICAgdGhpcy51ZUlucHV0TW91c2VNZXNzYWdlLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24ubWFpbkJ1dHRvbiwgZmluZ2VySW5mby5YLCBmaW5nZXJJbmZvLlkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBhIHRvdWNoIGV2ZW50IGVuZHMgXHJcbiAgICAgKiBAcGFyYW0gdG91Y2hFdmVudCAtIHRoZSBhY3RpdmF0aW5nIHRvdWNoIGV2ZW50IFxyXG4gICAgICovXHJcbiAgICBvblRvdWNoRW5kKHRvdWNoOiBUb3VjaEV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHRvdWNoSW5mbyA9IHRvdWNoLmNoYW5nZWRUb3VjaGVzWzBdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmluZ2Vycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodG91Y2hJbmZvLmlkZW50aWZpZXIgPT09IHRoaXMuZmluZ2Vyc1tpXS5JRCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHggPSB0b3VjaEluZm8uY2xpZW50WCAtIHRoaXMudmlkZW9QbGF5ZXJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgeSA9IHRvdWNoSW5mby5jbGllbnRZIC0gdGhpcy52aWRlb1BsYXllckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51ZUlucHV0TW91c2VNZXNzYWdlLnNlbmRNb3VzZVVwKE1vdXNlQnV0dG9uLm1haW5CdXR0b24sIHgsIHkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQodG91Y2gudHlwZSwgdG91Y2gpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyRWxlbWVudC5vbm1vdXNlbGVhdmUobW91c2VFdmVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmdlcnNbaV0gPSB0aGlzLmZpbmdlcnNbdGhpcy5maW5nZXJzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maW5nZXJzLnBvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT24gYSBNb3ZlIHRvdWNoIGV2ZW50IFxyXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgYWN0aXZhdGluZyB0b3VjaCBldmVudCBcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaE1vdmUodG91Y2hFdmVudDogVG91Y2hFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGxldCB0b3VjaEluZm8gPSB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5maW5nZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0b3VjaEluZm8uaWRlbnRpZmllciA9PT0gdGhpcy5maW5nZXJzW2ldLklEKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgeCA9IHRvdWNoSW5mby5jbGllbnRYIC0gdGhpcy52aWRlb1BsYXllckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuICAgICAgICAgICAgICAgIGxldCB5ID0gdG91Y2hJbmZvLmNsaWVudFkgLSB0aGlzLnZpZGVvUGxheWVyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVlSW5wdXRNb3VzZU1lc3NhZ2Uuc2VuZE1vdXNlTW92ZSh4LCB5LCB4IC0gdGhpcy5maW5nZXJzW2ldLlgsIHkgLSB0aGlzLmZpbmdlcnNbaV0uWSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmdlcnNbaV0uWCA9IHg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmdlcnNbaV0uWSA9IHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgaW50ZXJmYWNlIGZvciBmaW5nZXIgcG9zaXRpb24gbWFwcGluZyBcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmluZ2VyIHtcclxuICAgIElEOiBudW1iZXI7XHJcbiAgICBYOiBudW1iZXI7XHJcbiAgICBZOiBudW1iZXI7XHJcblxyXG59XHJcbiIsImltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuaW1wb3J0IHsgVWVJbnB1dEdhbWVQYWRNZXNzYWdlIH0gZnJvbSBcIi4uL1VlSW5zdGFuY2VNZXNzYWdlL1VlSW5wdXRHYW1lUGFkTWVzc2FnZVwiXHJcblxyXG4vKipcclxuICogVGhlIGNsYXNzIHRoYXQgaGFuZGxlcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBnYW1lcGFkcyBhbmQgY29udHJvbGxlcnMgXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR2FtZVBhZENvbnRyb2xsZXIge1xyXG4gICAgdWVJbnB1dEdhbWVQYWRNZXNzYWdlOiBVZUlucHV0R2FtZVBhZE1lc3NhZ2U7XHJcbiAgICBjb250cm9sbGVyczogQ29udHJvbGxlcltdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGRhdGFDaGFubmVsQ29udHJvbGxlciAtIHRoZSBkYXRhIGNoYW5lbCBjb250cm9sbGVyICBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLnVlSW5wdXRHYW1lUGFkTWVzc2FnZSA9IG5ldyBVZUlucHV0R2FtZVBhZE1lc3NhZ2UoZGF0YUNoYW5uZWxDb250cm9sbGVyKTtcclxuICAgICAgICBpZiAoXCJHYW1lcGFkRXZlbnRcIiBpbiB3aW5kb3cpIHtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJnYW1lcGFkY29ubmVjdGVkXCIsIChldjogR2FtZXBhZEV2ZW50KSA9PiB0aGlzLmdhbWVQYWRDb25uZWN0SGFuZGxlcihldikpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImdhbWVwYWRkaXNjb25uZWN0ZWRcIiwgKGV2OiBHYW1lcGFkRXZlbnQpID0+IHRoaXMuZ2FtZVBhZERpc2Nvbm5lY3RIYW5kbGVyKGV2KSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChcIldlYktpdEdhbWVwYWRFdmVudFwiIGluIHdpbmRvdykge1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmtpdGdhbWVwYWRjb25uZWN0ZWRcIiwgKGV2OiBHYW1lcGFkRXZlbnQpID0+IHRoaXMuZ2FtZVBhZENvbm5lY3RIYW5kbGVyKGV2KSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwid2Via2l0Z2FtZXBhZGRpc2Nvbm5lY3RlZFwiLCAoZXY6IEdhbWVwYWRFdmVudCkgPT4gdGhpcy5nYW1lUGFkRGlzY29ubmVjdEhhbmRsZXIoZXYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29ubmVjdHMgdGhlIGdhbWVwYWQgaGFuZGxlciBcclxuICAgICAqIEBwYXJhbSBnYW1lUGFkRXZlbnQgLSB0aGUgYWN0aXZhdGluZyBnYW1lcGFkIGV2ZW50IFxyXG4gICAgICovXHJcbiAgICBnYW1lUGFkQ29ubmVjdEhhbmRsZXIoZ2FtZVBhZEV2ZW50OiBHYW1lcGFkRXZlbnQpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiR2FtZXBhZCBjb25uZWN0IGhhbmRsZXJcIiwgNik7XHJcbiAgICAgICAgbGV0IGdhbWVwYWQgPSBnYW1lUGFkRXZlbnQuZ2FtZXBhZDtcclxuXHJcbiAgICAgICAgbGV0IHRlbXA6IENvbnRyb2xsZXIgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZTogZ2FtZXBhZCxcclxuICAgICAgICAgICAgcHJldlN0YXRlOiBnYW1lcGFkXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVycy5wdXNoKHRlbXApO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNbZ2FtZXBhZC5pbmRleF0uY3VycmVudFN0YXRlID0gZ2FtZXBhZDtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2dhbWVwYWQuaW5kZXhdLnByZXZTdGF0ZSA9IGdhbWVwYWQ7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcImdhbWVwYWQ6IFwiICsgZ2FtZXBhZC5pZCArIFwiIGNvbm5lY3RlZFwiLCA2KTtcclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMudXBkYXRlU3RhdHVzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGlzY29ubmVjdHMgdGhlIGdhbWVwYWQgaGFuZGxlciBcclxuICAgICAqIEBwYXJhbSBnYW1lUGFkRXZlbnQgLSB0aGUgYWN0aXZhdGluZyBnYW1lcGFkIGV2ZW50IFxyXG4gICAgICovXHJcbiAgICBnYW1lUGFkRGlzY29ubmVjdEhhbmRsZXIoZ2FtZVBhZEV2ZW50OiBHYW1lcGFkRXZlbnQpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiR2FtZXBhZCBkaXNjb25uZWN0IGhhbmRsZXJcIiwgNik7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcImdhbWVwYWQ6IFwiICsgZ2FtZVBhZEV2ZW50LmdhbWVwYWQuaWQgKyBcIiBkaXNjb25uZWN0ZWRcIiwgNik7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuY29udHJvbGxlcnNbZ2FtZVBhZEV2ZW50LmdhbWVwYWQuaW5kZXhdO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgPSB0aGlzLmNvbnRyb2xsZXJzLmZpbHRlcihjb250cm9sbGVyID0+IGNvbnRyb2xsZXIgIT09IHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTY2FuIGZvciBjb25uZWN0ZWQgZ2FtZXBhZHMgXHJcbiAgICAgKi9cclxuICAgIHNjYW5HYW1lUGFkcygpIHtcclxuICAgICAgICB2YXIgZ2FtZXBhZHMgPSAoKG5hdmlnYXRvci5nZXRHYW1lcGFkcykgPyBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKSA6IFtdKTsvLyAgOiAobmF2aWdhdG9yLndlYmtpdEdldEdhbWVwYWRzID8gbmF2aWdhdG9yLndlYmtpdEdldEdhbWVwYWRzKCkgOiBbXSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnYW1lcGFkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZ2FtZXBhZHNbaV0gJiYgKGdhbWVwYWRzW2ldLmluZGV4IGluIHRoaXMuY29udHJvbGxlcnMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2dhbWVwYWRzW2ldLmluZGV4XS5jdXJyZW50U3RhdGUgPSBnYW1lcGFkc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgdGhlIHN0YXR1cyBvZiB0aGUgZ2FtZXBhZCBhbmQgc2VuZHMgdGhlIGlucHV0cyAgXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVN0YXR1cygpIHtcclxuICAgICAgICB0aGlzLnNjYW5HYW1lUGFkcygpO1xyXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBtdWx0aXBsZSBjb250cm9sbGVycyBpbiB0aGUgY2FzZSB0aGUgbXVsdGlwbGUgZ2FtZXBhZHMgYXJlIGNvbm5lY3RlZFxyXG5cclxuICAgICAgICBmb3IgKGxldCBjb250cm9sbGVyIG9mIHRoaXMuY29udHJvbGxlcnMpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudFN0YXRlID0gY29udHJvbGxlci5jdXJyZW50U3RhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVyLmN1cnJlbnRTdGF0ZS5idXR0b25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRCdXR0b24gPSBjb250cm9sbGVyLmN1cnJlbnRTdGF0ZS5idXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcmV2aW91c0J1dHRvbiA9IGNvbnRyb2xsZXIucHJldlN0YXRlLmJ1dHRvbnNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJ1dHRvbiA2IGlzIGFjdHVhbGx5IHRoZSBsZWZ0IHRyaWdnZXIsIHNlbmQgaXQgdG8gVUUgYXMgYW4gYW5hbG9nIGF4aXNcclxuICAgICAgICAgICAgICAgICAgICAvLyBCdXR0b24gNyBpcyBhY3R1YWxseSB0aGUgcmlnaHQgdHJpZ2dlciwgc2VuZCBpdCB0byBVRSBhcyBhbiBhbmFsb2cgYXhpc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXN0IGFyZSBub3JtYWwgYnV0dG9ucy4gVHJlYXQgYXMgc3VjaFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50QnV0dG9uLnByZXNzZWQgJiYgIXByZXZpb3VzQnV0dG9uLnByZXNzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmV3IHByZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09IDYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQXhpc01vdmUoY3VycmVudFN0YXRlLmluZGV4LCA1LCBjdXJyZW50QnV0dG9uLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09IDcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQXhpc01vdmUoY3VycmVudFN0YXRlLmluZGV4LCA2LCBjdXJyZW50QnV0dG9uLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQnV0dG9uUHJlc3NlZChjdXJyZW50U3RhdGUuaW5kZXgsIGksIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWN1cnJlbnRCdXR0b24ucHJlc3NlZCAmJiBwcmV2aW91c0J1dHRvbi5wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbGVhc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51ZUlucHV0R2FtZVBhZE1lc3NhZ2Uuc2VuZENvbnRyb2xsZXJBeGlzTW92ZShjdXJyZW50U3RhdGUuaW5kZXgsIDUsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT0gNykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51ZUlucHV0R2FtZVBhZE1lc3NhZ2Uuc2VuZENvbnRyb2xsZXJBeGlzTW92ZShjdXJyZW50U3RhdGUuaW5kZXgsIDYsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51ZUlucHV0R2FtZVBhZE1lc3NhZ2Uuc2VuZENvbnRyb2xsZXJCdXR0b25SZWxlYXNlZChjdXJyZW50U3RhdGUuaW5kZXgsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50QnV0dG9uLnByZXNzZWQgJiYgcHJldmlvdXNCdXR0b24ucHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXBlYXQgcHJlc3MgLyBob2xkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09IDYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQXhpc01vdmUoY3VycmVudFN0YXRlLmluZGV4LCA1LCBjdXJyZW50QnV0dG9uLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09IDcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQXhpc01vdmUoY3VycmVudFN0YXRlLmluZGV4LCA2LCBjdXJyZW50QnV0dG9uLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQnV0dG9uUHJlc3NlZChjdXJyZW50U3RhdGUuaW5kZXgsIGksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExhc3QgY2FzZSBpcyBidXR0b24gaXNuJ3QgY3VycmVudGx5IHByZXNzZWQgYW5kIHdhc24ndCBwcmVzc2VkIGJlZm9yZS4gVGhpcyBkb2Vzbid0IG5lZWQgYW4gZWxzZSBibG9ja1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFN0YXRlLmF4ZXMubGVuZ3RoOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeCA9IHBhcnNlRmxvYXQoY3VycmVudFN0YXRlLmF4ZXNbaV0udG9GaXhlZCg0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2dhbWVwYWQvI3JlbWFwcGluZyBHYW1lcGFkIGJyb3dzZXIgc2lkZSBzdGFuZGFyZCBtYXBwaW5nIGhhcyBwb3NpdGl2ZSBkb3duLCBuZWdhdGl2ZSB1cC4gVGhpcyBpcyBkb3ducmlnaHQgZGlzZ3VzdGluZy4gU28gd2UgZml4IGl0LlxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB5ID0gLXBhcnNlRmxvYXQoY3VycmVudFN0YXRlLmF4ZXNbaSArIDFdLnRvRml4ZWQoNCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxlZnQgc3RpY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXhpcyAxID0gbGVmdCBob3Jpem9udGFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWVJbnB1dEdhbWVQYWRNZXNzYWdlLnNlbmRDb250cm9sbGVyQXhpc01vdmUoY3VycmVudFN0YXRlLmluZGV4LCAxLCB4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXhpcyAyID0gbGVmdCB2ZXJ0aWNhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVlSW5wdXRHYW1lUGFkTWVzc2FnZS5zZW5kQ29udHJvbGxlckF4aXNNb3ZlKGN1cnJlbnRTdGF0ZS5pbmRleCwgMiwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJpZ2h0IHN0aWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF4aXMgMyA9IHJpZ2h0IGhvcml6b250YWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51ZUlucHV0R2FtZVBhZE1lc3NhZ2Uuc2VuZENvbnRyb2xsZXJBeGlzTW92ZShjdXJyZW50U3RhdGUuaW5kZXgsIDMsIHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBheGlzIDQgPSByaWdodCB2ZXJ0aWNhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVlSW5wdXRHYW1lUGFkTWVzc2FnZS5zZW5kQ29udHJvbGxlckF4aXNNb3ZlKGN1cnJlbnRTdGF0ZS5pbmRleCwgNCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1tjdXJyZW50U3RhdGUuaW5kZXhdLnByZXZTdGF0ZSA9IGN1cnJlbnRTdGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIk9oIGRlYXIgdGhlIGdhbWVwYWQgcG9sbCBsb29wIGhhcyB0aHJvd24gYW4gZXJyb3JcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnVwZGF0ZVN0YXR1cygpKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgaW50ZXJmYWNlIGZvciBjb250cm9sbGVycyBcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udHJvbGxlciB7XHJcbiAgICBjdXJyZW50U3RhdGU6IEdhbWVwYWQ7XHJcbiAgICBwcmV2U3RhdGU6IEdhbWVwYWQ7XHJcbn0iLCJpbXBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyXCJcclxuXHJcbi8qKlxyXG4gKiBUaGUgQ2xhc3MgdGhhdCBoYW5kbGVzIGd5cm8gaW5wdXQgXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR3lyb0NvbnRyb2xsZXIge1xyXG4gXHJcbiAgICBkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcjtcclxuIFxyXG4gICAgY29uc3RydWN0b3IoZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIpIHtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlciA9IGRhdGFDaGFubmVsQ29udHJvbGxlcjtcclxuICAgIH1cclxuXHJcbiAgICBcclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBGYWtlVG91Y2hDb250cm9sbGVyIH0gZnJvbSBcIi4vRmFrZVRvdWNoQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBLZXlib2FyZENvbnRyb2xsZXIgfSBmcm9tIFwiLi9LZXlib2FyZENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgTW91c2VDb250cm9sbGVyIH0gZnJvbSBcIi4vTW91c2VDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IElUb3VjaENvbnRyb2xsZXIgfSBmcm9tIFwiLi9JVG91Y2hDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IFRvdWNoQ29udHJvbGxlciB9IGZyb20gXCIuL1RvdWNoQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBHYW1lUGFkQ29udHJvbGxlciB9IGZyb20gXCIuL0dhbWVwYWRDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IENvbnRyb2xTY2hlbWVUeXBlIH0gZnJvbSBcIi4uL0NvbmZpZy9Db25maWdcIjtcclxuaW1wb3J0IHsgVmlkZW9QbGF5ZXJNb3VzZUxvY2tlZEV2ZW50cyB9IGZyb20gXCIuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllck1vdXNlTG9ja2VkRXZlbnRzXCI7XHJcbmltcG9ydCB7IFZpZGVvUGxheWVyTW91c2VIb3ZlckV2ZW50cyB9IGZyb20gXCIuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllck1vdXNlSG92ZXJFdmVudHNcIjtcclxuaW1wb3J0IHsgR3lyb0NvbnRyb2xsZXIgfSBmcm9tIFwiLi9HeXJvQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBJVmlkZW9QbGF5ZXIgfSBmcm9tIFwiLi4vVmlkZW9QbGF5ZXIvSVZpZGVvUGxheWVyXCI7XHJcbmltcG9ydCB7IElWaWRlb1BsYXllck1vdXNlSW50ZXJmYWNlIH0gZnJvbSBcIi4uL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyTW91c2VJbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuaW1wb3J0IHsgVWVEZXNjcmlwdG9yVWkgfSBmcm9tIFwiLi4vVWVJbnN0YW5jZU1lc3NhZ2UvVWVEZXNjcmlwdG9yVWlcIjtcclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgaGFuZGxpbmcgaW5wdXRzIGZvciBtb3VzZSBhbmQga2V5Ym9hcmQgICBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbnB1dENvbnRyb2xsZXIge1xyXG5cclxuICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBJVmlkZW9QbGF5ZXI7XHJcbiAgICBkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcjtcclxuICAgIGtleWJvYXJkQ29udHJvbGxlcjogS2V5Ym9hcmRDb250cm9sbGVyO1xyXG4gICAgbW91c2VDb250cm9sbGVyOiBNb3VzZUNvbnRyb2xsZXI7XHJcbiAgICB0b3VjaENvbnRyb2xsZXI6IElUb3VjaENvbnRyb2xsZXJcclxuICAgIGZha2VUb3VjaENvbnRyb2xsZXI6IEZha2VUb3VjaENvbnRyb2xsZXI7XHJcbiAgICBnYW1lUGFkQ29udHJvbGxlcjogR2FtZVBhZENvbnRyb2xsZXI7XHJcbiAgICBneXJvQ29udHJvbGxlcjogR3lyb0NvbnRyb2xsZXI7XHJcbiAgICB1ZURlc2NyaXB0b3JVaTogVWVEZXNjcmlwdG9yVWk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBkYXRhQ2hhbm5lbENvbnRyb2xsZXIgLSB0aGUgZGF0YSBjaGFubmVsIGNvbnRyb2xsZXJcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIsIHVlRGVzY3JpcHRvclVpOiBVZURlc2NyaXB0b3JVaSwgdmlkZW9FbGVtZW50UHJvdmlkZXI6IElWaWRlb1BsYXllcikge1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyID0gZGF0YUNoYW5uZWxDb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuXHR0aGlzLnVlRGVzY3JpcHRvclVpID0gdWVEZXNjcmlwdG9yVWk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZWdpc3RlcnMgYnJvd3NlciBrZXkgZXZlbnRzICBcclxuICAgICAqIEBwYXJhbSBzdXBwcmVzc0Jyb3dzZXJLZXlzIC0gb3B0aW9uIHRvIHN1cHByZXNzIGJyb3dzZXIga2V5cyBcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJLZXlCb2FyZChzdXBwcmVzc0Jyb3dzZXJLZXlzOiBib29sZWFuKSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIlJlZ2lzdGVyIEtleWJvYXJkIEV2ZW50c1wiLCA3KTtcclxuICAgICAgICB0aGlzLmtleWJvYXJkQ29udHJvbGxlciA9IG5ldyBLZXlib2FyZENvbnRyb2xsZXIodGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIsIHRoaXMudWVEZXNjcmlwdG9yVWksIHN1cHByZXNzQnJvd3NlcktleXMpO1xyXG4gICAgICAgIHRoaXMua2V5Ym9hcmRDb250cm9sbGVyLnJlZ2lzdGVyS2V5Qm9hcmRFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlZ2lzdGVyIG1vdXNlIGV2ZW50cyBiYXNlZCBvbiBhIGNvbnRyb2wgdHlwZSBcclxuICAgICAqIEBwYXJhbSBjb250cm9sU2NoZW1lIC0gaWYgdGhlIG1vdXNlIGlzIGVpdGhlciBob3ZlcmluZyBvciBsb2NrZWQgXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyTW91c2UoY29udHJvbFNjaGVtZTogQ29udHJvbFNjaGVtZVR5cGUpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiUmVnaXN0ZXIgTW91c2UgRXZlbnRzXCIsIDcpO1xyXG5cclxuICAgICAgICAvLyBjYXN0aW5nIHRoZXNlIGFzIGFueSBhcyB0aGV5IGRvIG5vdCBoYXZlIHRoZSBtb3ogYXR0cmlidXRlcyB3ZSByZXF1aXJlXHJcbiAgICAgICAgbGV0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCkgYXMgYW55O1xyXG4gICAgICAgIGxldCB2aWRlb0lucHV0QmluZGluZ3M6IElWaWRlb1BsYXllck1vdXNlSW50ZXJmYWNlO1xyXG5cclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IG5ldyBNb3VzZUNvbnRyb2xsZXIodGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIsIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIpO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGNvbnRyb2xTY2hlbWUpIHtcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sU2NoZW1lVHlwZS5Mb2NrZWRNb3VzZTpcclxuXHJcbiAgICAgICAgICAgICAgICB2aWRlb0lucHV0QmluZGluZ3MgPSBuZXcgVmlkZW9QbGF5ZXJNb3VzZUxvY2tlZEV2ZW50cyh0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLCB0aGlzLm1vdXNlQ29udHJvbGxlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50Lm9uY2xpY2sgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuc2V0Q2xpY2tBY3Rpb25zKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybG9ja2NoYW5nZScsICgpID0+IHZpZGVvSW5wdXRCaW5kaW5ncy5oYW5kbGVMb2NrU3RhdGVDaGFuZ2UoKSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96cG9pbnRlcmxvY2tjaGFuZ2UnLCAoKSA9PiB2aWRlb0lucHV0QmluZGluZ3MuaGFuZGxlTG9ja1N0YXRlQ2hhbmdlKCksIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xTY2hlbWVUeXBlLkhvdmVyaW5nTW91c2U6XHJcbiAgICAgICAgICAgICAgICB2aWRlb0lucHV0QmluZGluZ3MgPSBuZXcgVmlkZW9QbGF5ZXJNb3VzZUhvdmVyRXZlbnRzKHRoaXMubW91c2VDb250cm9sbGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgdGhlIG9uY2xpY2sgdG8gbnVsbCBpZiB0aGUgaW5wdXQgYmluZGluZ3Mgd2VyZSBwcmV2aW91c2x5IHNldCB0byBwb2ludGVybG9ja1xyXG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50Lm9uY2xpY2sgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgKG1vdXNlRXZlbnQpID0+IHZpZGVvSW5wdXRCaW5kaW5ncy5oYW5kbGVNb3VzZU1vdmUobW91c2VFdmVudCksIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwid2hlZWxcIiwgKG1vdXNlRXZlbnQpID0+IHZpZGVvSW5wdXRCaW5kaW5ncy5oYW5kbGVNb3VzZVdoZWVsKG1vdXNlRXZlbnQpLCB7IHBhc3NpdmUgOiBmYWxzZSB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2aWRlb0VsZW1lbnQub25tb3VzZWRvd24gPSAobW91c2VFdmVudDogTW91c2VFdmVudCkgPT4gdmlkZW9JbnB1dEJpbmRpbmdzLmhhbmRsZU1vdXNlRG93bihtb3VzZUV2ZW50KTtcclxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudC5vbm1vdXNldXAgPSAobW91c2VFdmVudDogTW91c2VFdmVudCkgPT4gdmlkZW9JbnB1dEJpbmRpbmdzLmhhbmRsZU1vdXNlVXAobW91c2VFdmVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIExvZ2dlci5JbmZvKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwidW5rbm93biBDb250cm9sIFNjaGVtZSBUeXBlIERlZmF1bHRpbmcgdG8gTG9ja2VkIE1vdXNlIEV2ZW50c1wiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogcmVnaXN0ZXIgdG91Y2ggZXZlbnRzIFxyXG4gICAgICogQHBhcmFtIGZha2VNb3VzZVRvdWNoIC0gdGhlIGZha2VkIG1vdXNlIHRvdWNoIGV2ZW50IFxyXG4gICAgICogQHBhcmFtIHBsYXllckVsZW1lbnQgLSB0aGUgcGxheWVyIGVsZW1lbnRzIERPTSBcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJUb3VjaChmYWtlTW91c2VUb3VjaDogYm9vbGVhbiwgcGxheWVyRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJSZWdpc3RlcmluZyBUb3VjaFwiLCA2KTtcclxuICAgICAgICBpZiAoZmFrZU1vdXNlVG91Y2gpIHtcclxuXHQgICAgLy8oPEhUTUxWaWRlb0VsZW1lbnQ+cGxheWVyRWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInZpZGVvXCIpWzBdKVxyXG4gICAgICAgICAgICB0aGlzLnRvdWNoQ29udHJvbGxlciA9IG5ldyBGYWtlVG91Y2hDb250cm9sbGVyKHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLCBwbGF5ZXJFbGVtZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnRvdWNoQ29udHJvbGxlciA9IG5ldyBUb3VjaENvbnRyb2xsZXIodGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIsIHBsYXllckVsZW1lbnQsIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlZ2lzdGVycyBhIGdhbWVwYWQgXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyR2FtZVBhZCgpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiUmVnaXN0ZXIgR2FtZSBQYWRcIiwgNyk7XHJcbiAgICAgICAgdGhpcy5nYW1lUGFkQ29udHJvbGxlciA9IG5ldyBHYW1lUGFkQ29udHJvbGxlcih0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlcik7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHJlZ2lzdGVycyBhIGd5cm8gZGV2aWNlIFxyXG4gICAgICovXHJcbiAgICByZWdpc3Rlckd5cm8oKSB7XHJcbiAgICAgICAgdGhpcy5neXJvQ29udHJvbGxlciA9IG5ldyBHeXJvQ29udHJvbGxlcih0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlcik7XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgeyBTcGVjaWFsS2V5Q29kZXMgfSBmcm9tIFwiLi9TcGVjaWFsS2V5Q29kZXNcIjtcclxuaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBVZUlucHV0S2V5Ym9hcmRNZXNzYWdlIH0gZnJvbSBcIi4uL1VlSW5zdGFuY2VNZXNzYWdlL1VlSW5wdXRLZXlib2FyZE1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgVWVEZXNjcmlwdG9yVWkgfSBmcm9tIFwiLi4vVWVJbnN0YW5jZU1lc3NhZ2UvVWVEZXNjcmlwdG9yVWlcIjtcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHRoZSBLZXlib2FyZCBJbnB1dHMgZm9yIHRoZSBkb2N1bWVudFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEtleWJvYXJkQ29udHJvbGxlciB7XHJcbiAgICB1ZUlucHV0S2V5Qm9hcmRNZXNzYWdlOiBVZUlucHV0S2V5Ym9hcmRNZXNzYWdlO1xyXG4gICAgdWVEZXNjcmlwdG9yVWk6IFVlRGVzY3JpcHRvclVpO1xyXG4gICAgc3VwcHJlc3NCcm93c2VyS2V5czogYm9vbGVhbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGRhdGFDaGFubmVsQ29udHJvbGxlciAtIERhdGEgQ2hhbm5lbCBDb250cm9sbGVyXHJcbiAgICAgKiBAcGFyYW0gc3VwcHJlc3NCcm93c2VyS2V5cyAtIFN1cHByZXNzIEJyb3dzZXIgS2V5c1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlciwgdWVEZXNjcmlwdG9yVWk6IFVlRGVzY3JpcHRvclVpLCBzdXBwcmVzc0Jyb3dzZXJLZXlzOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy51ZUlucHV0S2V5Qm9hcmRNZXNzYWdlID0gbmV3IFVlSW5wdXRLZXlib2FyZE1lc3NhZ2UoZGF0YUNoYW5uZWxDb250cm9sbGVyKTtcclxuXHR0aGlzLnVlRGVzY3JpcHRvclVpID0gdWVEZXNjcmlwdG9yVWk7XHJcbiAgICAgICAgdGhpcy5zdXBwcmVzc0Jyb3dzZXJLZXlzID0gc3VwcHJlc3NCcm93c2VyS2V5cztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVycyBkb2N1bWVudCBrZXlib2FyZCBldmVudHMgd2l0aCB0aGUgY29udHJvbGxlclxyXG4gICAgICovXHJcbiAgICByZWdpc3RlcktleUJvYXJkRXZlbnRzKCkge1xyXG4gICAgICAgIGRvY3VtZW50Lm9ua2V5ZG93biA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5oYW5kbGVPbktleURvd24oZXYpO1xyXG4gICAgICAgIGRvY3VtZW50Lm9ua2V5dXAgPSAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHRoaXMuaGFuZGxlT25LZXlVcChldik7XHJcblxyXG4gICAgICAgIC8vVGhpcyBoYXMgYmVlbiBkZXByZWNhdGVkIGFzIGF0IEp1biAxMyAyMDIxXHJcbiAgICAgICAgZG9jdW1lbnQub25rZXlwcmVzcyA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5oYW5kbGVPbktleVByZXNzKGV2KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgV2hlbiBhIGtleSBpcyBkb3duXHJcbiAgICAgKiBAcGFyYW0ga2V5Ym9hcmRFdmVudCAtIEtleWJvYXJkIGV2ZW50IFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbktleURvd24oa2V5Ym9hcmRFdmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG5cdGlmIChrZXlib2FyZEV2ZW50LmN0cmxLZXkpIHtcclxuXHRcdGlmIChrZXlib2FyZEV2ZW50LmtleSA9PSAndicpIHtcclxuXHRcdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XHJcblx0XHRcdG5hdmlnYXRvci5jbGlwYm9hcmQucmVhZFRleHQoKS50aGVuKHRleHQgPT4ge1xyXG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0Y29uc3QgY2hhciA9IHRleHQuY2hhckF0KGkpO1xyXG5cdFx0XHRcdFx0Y29uc3Qga2V5ID0gY2hhci5jaGFyQ29kZUF0KDApO1xyXG5cdFx0XHRcdFx0c2VsZi51ZUlucHV0S2V5Qm9hcmRNZXNzYWdlLnNlbmRLZXlEb3duKGtleSwga2V5Ym9hcmRFdmVudC5yZXBlYXQpO1xyXG5cdFx0XHRcdFx0ZG9jdW1lbnQub25rZXlwcmVzcyhuZXcgS2V5Ym9hcmRFdmVudChcImtleXByZXNzXCIsIHsgY2hhckNvZGU6IGtleSB9KSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KS5jYXRjaChlcnIgPT4ge1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byByZWFkIGNsaXBib2FyZCBjb250ZW50czogJywgZXJyKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRpZiAoa2V5Ym9hcmRFdmVudC5rZXkgPT0gJ2InKXtcclxuXHRcdFx0Y29uc29sZS5sb2coJ25hbWUnKTtcclxuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kVWlJbnRlcmFjdGlvbihKU09OLnN0cmluZ2lmeSh7IFwiTmFtZVwiIDogJ1JhbmRvbU5hbWUnIH0pKTtcclxuXHRcdH1cclxuXHRcdGlmIChrZXlib2FyZEV2ZW50LmtleSA9PSAnYycpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ2NvcHknKTtcclxuXHRcdFx0Ly90aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcInJlcXVlc3RJbnB1dFNlbGVjdGlvblwiKTtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLmdldEtleWNvZGUoa2V5Ym9hcmRFdmVudCkgPT0gU3BlY2lhbEtleUNvZGVzLmJhY2tTcGFjZSkge1xyXG5cdFx0XHQvLyBjbGVhciBpbnB1dCBib3hcclxuXHRcdH1cclxuXHR9IGVsc2Uge1xyXG5cdFx0Y29uc3Qga2V5ID0ga2V5Ym9hcmRFdmVudC5rZXk7XHJcblx0XHRpZiAoa2V5ID09ICdVbmlkZW50aWZpZWQnKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMudWVJbnB1dEtleUJvYXJkTWVzc2FnZS5zZW5kS2V5RG93bih0aGlzLmdldEtleWNvZGUoa2V5Ym9hcmRFdmVudCksIGtleWJvYXJkRXZlbnQucmVwZWF0KTtcclxuXHJcblx0XHQvLyBiYWNrU3BhY2UgaXMgbm90IGNvbnNpZGVyZWQgYSBrZXlwcmVzcyBpbiBKYXZhU2NyaXB0IGJ1dCB3ZSBuZWVkIGl0XHJcblx0XHQvLyB0byBiZSBzbyBjaGFyYWN0ZXJzIG1heSBiZSBkZWxldGVkIGluIGEgVUU0IHRleHQgZW50cnkgZmllbGQuXHJcblx0XHRpZiAoa2V5Ym9hcmRFdmVudC5rZXlDb2RlID09PSBTcGVjaWFsS2V5Q29kZXMuYmFja1NwYWNlKSB7XHJcblx0XHRcdGRvY3VtZW50Lm9ua2V5cHJlc3MobmV3IEtleWJvYXJkRXZlbnQoXCJrZXlwcmVzc1wiLCB7IGNoYXJDb2RlOiBTcGVjaWFsS2V5Q29kZXMuYmFja1NwYWNlIH0pKTtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKHRoaXMuc3VwcHJlc3NCcm93c2VyS2V5cyAmJiB0aGlzLmlzS2V5Q29kZUJyb3dzZXJLZXkoa2V5Ym9hcmRFdmVudC5rZXlDb2RlKSkge1xyXG5cdFx0a2V5Ym9hcmRFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGhhbmRsZXMgd2hlbiBhIGtleSBpcyB1cFxyXG4gICAgICogQHBhcmFtIGtleWJvYXJkRXZlbnQgLSBLZXlib2FyZCBldmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbktleVVwKGtleWJvYXJkRXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiaGFuZGxlT25LZXlVcFwiLCA2KTtcclxuICAgICAgICB0aGlzLnVlSW5wdXRLZXlCb2FyZE1lc3NhZ2Uuc2VuZEtleVVwKHRoaXMuZ2V0S2V5Y29kZShrZXlib2FyZEV2ZW50KSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN1cHByZXNzQnJvd3NlcktleXMgJiYgdGhpcy5pc0tleUNvZGVCcm93c2VyS2V5KGtleWJvYXJkRXZlbnQua2V5Q29kZSkpIHtcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBhIGtleSBpcyBwcmVzc1xyXG4gICAgICogQHBhcmFtIGtleWJvYXJkIC0gS2V5Ym9hcmQgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25LZXlQcmVzcyhrZXlib2FyZDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJoYW5kbGVPbmtleXByZXNzXCIsIDYpO1xyXG4gICAgICAgIHRoaXMudWVJbnB1dEtleUJvYXJkTWVzc2FnZS5zZW5kS2V5UHJlc3Moa2V5Ym9hcmQuY2hhckNvZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgS2V5Y29kZSBvZiB0aGUgS2V5IHByZXNzZWRcclxuICAgICAqIEBwYXJhbSBrZXlib2FyZEV2ZW50IC0gS2V5IGJvYXJkIEV2ZW50XHJcbiAgICAgKiBAcmV0dXJucyB0aGUga2V5IGNvZGUgb2YgdGhlIEtleVxyXG4gICAgICovXHJcbiAgICBnZXRLZXljb2RlKGtleWJvYXJkRXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICAvL05lZWQgdG8gbW92ZSB0aGlzIHRvIGEgbmV3ZXIgdmVyc2lvbiB1c2luZyBrZXlib2FyZCBldmVudCBsb2NhdGlvbi4gYXMga2V5Ym9hcmRFdmVudC5rZXljb2RlIGlzIGRlcHJlY2F0ZWRcclxuXHJcbiAgICAgICAgaWYgKGtleWJvYXJkRXZlbnQua2V5Q29kZSA9PT0gU3BlY2lhbEtleUNvZGVzLnNoaWZ0ICYmIGtleWJvYXJkRXZlbnQuY29kZSA9PT0gJ1NoaWZ0UmlnaHQnKSByZXR1cm4gU3BlY2lhbEtleUNvZGVzLnJpZ2h0U2hpZnQ7XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5Ym9hcmRFdmVudC5rZXlDb2RlID09PSBTcGVjaWFsS2V5Q29kZXMuY29udHJvbCAmJiBrZXlib2FyZEV2ZW50LmNvZGUgPT09ICdDb250cm9sUmlnaHQnKSByZXR1cm4gU3BlY2lhbEtleUNvZGVzLnJpZ2h0Q29udHJvbDtcclxuICAgICAgICBlbHNlIGlmIChrZXlib2FyZEV2ZW50LmtleUNvZGUgPT09IFNwZWNpYWxLZXlDb2Rlcy5hbHQgJiYga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnQWx0UmlnaHQnKSByZXR1cm4gU3BlY2lhbEtleUNvZGVzLnJpZ2h0QWx0O1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIGtleWJvYXJkRXZlbnQua2V5Q29kZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEJyb3dzZXIga2V5cyBkbyBub3QgaGF2ZSBhIGNoYXJDb2RlIHNvIHdlIG9ubHkgbmVlZCB0byB0ZXN0IGtleUNvZGUuXHJcbiAgICAgKi9cclxuICAgIGlzS2V5Q29kZUJyb3dzZXJLZXkoa2V5Q29kZTogbnVtYmVyKSB7XHJcbiAgICAgICAgLy8gRnVuY3Rpb24ga2V5cyBvciB0YWIga2V5LlxyXG5cdGlmIChrZXlDb2RlID09IDExNiB8fCBrZXlDb2RlID09IDEyMikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBrZXlDb2RlID49IDExMiAmJiBrZXlDb2RlIDw9IDEyMyB8fCBrZXlDb2RlID09PSA5O1xyXG4gICAgfVxyXG59XHJcbi8qIDU0NTc1MjRmNGQ0ZCAqL1xyXG4iLCIvKipcclxuICogTW91c2UgQnV0dG9uIERhdGFcclxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Nb3VzZUV2ZW50L2J1dHRvbn1cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNb3VzZUJ1dHRvbiB7XHJcblx0c3RhdGljIG1haW5CdXR0b24gPSAwO1x0XHRcdC8vIExlZnQgYnV0dG9uLlxyXG5cdHN0YXRpYyBhdXhpbGlhcnlCdXR0b24gPSAxO1x0XHQvLyBXaGVlbCBidXR0b24uXHJcblx0c3RhdGljIHNlY29uZGFyeUJ1dHRvbiA9IDI7XHRcdC8vIFJpZ2h0IGJ1dHRvbi5cclxuXHRzdGF0aWMgZm91cnRoQnV0dG9uID0gMztcdFx0Ly8gQnJvd3NlciBCYWNrIGJ1dHRvbi5cclxuXHRzdGF0aWMgZmlmdGhCdXR0b24gPSA0O1x0XHRcdC8vIEJyb3dzZXIgRm9yd2FyZCBidXR0b24uXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNb3VzZSBCdXR0b24gTWFzayBEYXRhXHJcbiAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTW91c2VFdmVudC9idXR0b25zfVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1vdXNlQnV0dG9uc01hc2sge1xyXG5cdHN0YXRpYyBwcmltYXJ5QnV0dG9uID0gMTtcdFx0Ly8gTGVmdCBidXR0b24uXHJcblx0c3RhdGljIHNlY29uZGFyeUJ1dHRvbiA9IDI7XHRcdC8vIFJpZ2h0IGJ1dHRvbi5cclxuXHRzdGF0aWMgYXV4aWxpYXJ5QnV0dG9uID0gNDtcdFx0Ly8gV2hlZWwgYnV0dG9uLlxyXG5cdHN0YXRpYyBmb3VydGhCdXR0b24gPSA4O1x0XHQvLyBCcm93c2VyIEJhY2sgYnV0dG9uLlxyXG5cdHN0YXRpYyBmaWZ0aEJ1dHRvbiA9IDE2O1x0XHQvLyBCcm93c2VyIEZvcndhcmQgYnV0dG9uLlxyXG59IiwiaW1wb3J0IHsgVWVJbnB1dE1vdXNlTWVzc2FnZSB9IGZyb20gXCIuLi9VZUluc3RhbmNlTWVzc2FnZS9VZUlucHV0TW91c2VNZXNzYWdlXCI7XHJcbmltcG9ydCB7IE1vdXNlQnV0dG9uc01hc2ssIE1vdXNlQnV0dG9uIH0gZnJvbSBcIi4vTW91c2VCdXR0b25zXCI7XHJcbmltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgTm9ybWFsaXNlQW5kUXVhbnRpc2VTaWduZWQsIFVucXVhbnRpc2VkQW5kRGVub3JtYWxpc2VVbnNpZ25lZCwgTm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZCB9IGZyb20gXCIuL0Nvb3JkaW5hdGVEYXRhXCJcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuaW1wb3J0IHsgSVZpZGVvUGxheWVyIH0gZnJvbSBcIi4uL1ZpZGVvUGxheWVyL0lWaWRlb1BsYXllclwiO1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgdGhlIE1vdXNlIElucHV0cyBmb3IgdGhlIGRvY3VtZW50XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTW91c2VDb250cm9sbGVyIHtcclxuXHJcblx0cmVhZG9ubHkgdW5zaWduZWRPdXRPZlJhbmdlOiBudW1iZXIgPSA2NTUzNTtcclxuXHRyZWFkb25seSBzaWduZWRPdXRPZlJhbmdlOiBudW1iZXIgPSAzMjc2NztcclxuXHJcblx0dWVJbnB1dE1vdXNlTWVzc2FnZTogVWVJbnB1dE1vdXNlTWVzc2FnZTtcclxuXHR2aWRlb0VsZW1lbnRQcm92aWRlcjogSVZpZGVvUGxheWVyO1xyXG5cclxuXHRwcmludElucHV0czogYm9vbGVhbjtcclxuXHJcblx0LyoqXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGRhdGFDaGFubmVsQ29udHJvbGxlciAtIERhdGEgQ2hhbm5lbCBDb250cm9sbGVyXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIsIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBJVmlkZW9QbGF5ZXIpIHtcclxuXHRcdHRoaXMucHJpbnRJbnB1dHMgPSBmYWxzZTtcclxuXHRcdHRoaXMudWVJbnB1dE1vdXNlTWVzc2FnZSA9IG5ldyBVZUlucHV0TW91c2VNZXNzYWdlKGRhdGFDaGFubmVsQ29udHJvbGxlcik7XHJcblx0XHR0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyID0gdmlkZW9FbGVtZW50UHJvdmlkZXI7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGUgd2hlbiBhIG1vdXNlIGJ1dHRvbiBpcyByZWxlYXNlZFxyXG5cdCAqIEBwYXJhbSBidXR0b25zIC0gTW91c2UgQnV0dG9uXHJcblx0ICogQHBhcmFtIFggLSBNb3VzZSBwb2ludGVyIFggY29vcmRpbmF0ZVxyXG5cdCAqIEBwYXJhbSBZIC0gTW91c2UgcG9pbnRlciBZIGNvb3JkaW5hdGVcclxuXHQgKi9cclxuXHRyZWxlYXNlTW91c2VCdXR0b25zKGJ1dHRvbnM6IG51bWJlciwgWDogbnVtYmVyLCBZOiBudW1iZXIpIHtcclxuXHRcdGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5wcmltYXJ5QnV0dG9uKSB7XHJcblx0XHRcdHRoaXMuc2VuZE1vdXNlVXAoTW91c2VCdXR0b24ubWFpbkJ1dHRvbiwgWCwgWSk7XHJcblx0XHR9XHJcblx0XHRpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suc2Vjb25kYXJ5QnV0dG9uKSB7XHJcblx0XHRcdHRoaXMuc2VuZE1vdXNlVXAoTW91c2VCdXR0b24uc2Vjb25kYXJ5QnV0dG9uLCBYLCBZKTtcclxuXHRcdH1cclxuXHRcdGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5hdXhpbGlhcnlCdXR0b24pIHtcclxuXHRcdFx0dGhpcy5zZW5kTW91c2VVcChNb3VzZUJ1dHRvbi5hdXhpbGlhcnlCdXR0b24sIFgsIFkpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLmZvdXJ0aEJ1dHRvbikge1xyXG5cdFx0XHR0aGlzLnNlbmRNb3VzZVVwKE1vdXNlQnV0dG9uLmZvdXJ0aEJ1dHRvbiwgWCwgWSk7XHJcblx0XHR9XHJcblx0XHRpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suZmlmdGhCdXR0b24pIHtcclxuXHRcdFx0dGhpcy5zZW5kTW91c2VVcChNb3VzZUJ1dHRvbi5maWZ0aEJ1dHRvbiwgWCwgWSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGUgd2hlbiBhIG1vdXNlIGJ1dHRvbiBpcyBwcmVzc2VkXHJcblx0ICogQHBhcmFtIGJ1dHRvbnMgLSBNb3VzZSBCdXR0b25cclxuXHQgKiBAcGFyYW0gWCAtIE1vdXNlIHBvaW50ZXIgWCBjb29yZGluYXRlXHJcblx0ICogQHBhcmFtIFkgLSBNb3VzZSBwb2ludGVyIFkgY29vcmRpbmF0ZVxyXG5cdCAqL1xyXG5cdHByZXNzTW91c2VCdXR0b25zKGJ1dHRvbnM6IG51bWJlciwgWDogbnVtYmVyLCBZOiBudW1iZXIpIHtcclxuXHRcdGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5wcmltYXJ5QnV0dG9uKSB7XHJcblx0XHRcdHRoaXMuc2VuZE1vdXNlRG93bihNb3VzZUJ1dHRvbi5tYWluQnV0dG9uLCBYLCBZKTtcclxuXHRcdH1cclxuXHRcdGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5zZWNvbmRhcnlCdXR0b24pIHtcclxuXHRcdFx0dGhpcy5zZW5kTW91c2VEb3duKE1vdXNlQnV0dG9uLnNlY29uZGFyeUJ1dHRvbiwgWCwgWSk7XHJcblx0XHR9XHJcblx0XHRpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suYXV4aWxpYXJ5QnV0dG9uKSB7XHJcblx0XHRcdHRoaXMuc2VuZE1vdXNlRG93bihNb3VzZUJ1dHRvbi5hdXhpbGlhcnlCdXR0b24sIFgsIFkpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLmZvdXJ0aEJ1dHRvbikge1xyXG5cdFx0XHR0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uZm91cnRoQnV0dG9uLCBYLCBZKTtcclxuXHRcdH1cclxuXHRcdGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5maWZ0aEJ1dHRvbikge1xyXG5cdFx0XHR0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uZmlmdGhCdXR0b24sIFgsIFkpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogSGFuZGxlIHdoZW4gYSBtb3VzZSBpcyBtb3ZlZFxyXG5cdCAqIEBwYXJhbSBYIC0gTW91c2UgWCBDb29yZGluYXRlXHJcblx0ICogQHBhcmFtIFkgLSBNb3VzZSBZIENvb3JkaW5hdGVcclxuXHQgKiBAcGFyYW0gZGVsdGFYIC0gTW91c2UgRGVsdGEgWCBDb29yZGluYXRlXHJcblx0ICogQHBhcmFtIGRlbHRhWSAtIE1vdXNlIERlbHRhIFkgQ29vcmRpbmF0ZVxyXG5cdCAqL1xyXG5cdHNlbmRNb3VzZU1vdmUoWDogbnVtYmVyLCBZOiBudW1iZXIsIGRlbHRhWDogbnVtYmVyLCBkZWx0YVk6IG51bWJlcikge1xyXG5cdFx0aWYgKHRoaXMucHJpbnRJbnB1dHMpIHtcclxuXHRcdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgeDogJHtYfSwgeToke1l9LCBkWDogJHtkZWx0YVh9LCBkWTogJHtkZWx0YVl9YCwgNyk7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IG1vdXNlQ29yZDogTm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZCA9IHRoaXMubm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZChYLCBZKTtcclxuXHRcdGxldCBkZWx0YUNvZGU6IE5vcm1hbGlzZUFuZFF1YW50aXNlU2lnbmVkID0gdGhpcy5ub3JtYWxpc2VBbmRRdWFudGlzZVNpZ25lZChkZWx0YVgsIGRlbHRhWSk7XHJcblxyXG5cdFx0dGhpcy51ZUlucHV0TW91c2VNZXNzYWdlLnNlbmRNb3VzZU1vdmUobW91c2VDb3JkLngsIG1vdXNlQ29yZC55LCBkZWx0YUNvZGUueCwgZGVsdGFDb2RlLnkpO1xyXG5cdH1cclxuXHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgd2hlbiBhIG1vdXNlIGJ1dHRvbiBpcyBwcmVzc2VkIGRvd25cclxuXHQgKiBAcGFyYW0gYnV0dG9uIC0gTW91c2UgQnV0dG9uIFByZXNzZWRcclxuXHQgKiBAcGFyYW0gWCAgLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuXHQgKiBAcGFyYW0gWSAgLSBNb3VzZSBZIENvb3JkaW5hdGVcclxuXHQgKi9cclxuXHRzZW5kTW91c2VEb3duKGJ1dHRvbjogbnVtYmVyLCBYOiBudW1iZXIsIFk6IG51bWJlcikge1xyXG5cdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgbW91c2UgYnV0dG9uICR7YnV0dG9ufSBkb3duIGF0ICgke1h9LCAke1l9KWAsIDYpO1xyXG5cdFx0bGV0IGNvb3JkOiBOb3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkID0gdGhpcy5ub3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkKFgsIFkpO1xyXG5cdFx0dGhpcy51ZUlucHV0TW91c2VNZXNzYWdlLnNlbmRNb3VzZURvd24oYnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgd2hlbiBhIG1vdXNlIGJ1dHRvbiBpcyBwcmVzc2VkIHVwXHJcblx0ICogQHBhcmFtIGJ1dHRvbiAtIE1vdXNlIEJ1dHRvbiBQcmVzc2VkXHJcblx0ICogQHBhcmFtIFggIC0gTW91c2UgWCBDb29yZGluYXRlXHJcblx0ICogQHBhcmFtIFkgIC0gTW91c2UgWSBDb29yZGluYXRlXHJcblx0ICovXHJcblx0c2VuZE1vdXNlVXAoYnV0dG9uOiBudW1iZXIsIFg6IG51bWJlciwgWTogbnVtYmVyKSB7XHJcblx0XHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBtb3VzZSBidXR0b24gJHtidXR0b259IHVwIGF0ICgke1h9LCAke1l9KWAsIDYpO1xyXG5cdFx0bGV0IGNvb3JkOiBOb3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkID0gdGhpcy5ub3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkKFgsIFkpO1xyXG5cdFx0dGhpcy51ZUlucHV0TW91c2VNZXNzYWdlLnNlbmRNb3VzZVVwKGJ1dHRvbiwgY29vcmQueCwgY29vcmQueSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGVzIHdoZW4gYSBtb3VzZSB3aGVlbCBldmVudFxyXG5cdCAqIEBwYXJhbSBkZWx0YVkgLSBNb3VzZSBXaGVlbCBkYXRhXHJcblx0ICogQHBhcmFtIFggIC0gTW91c2UgWCBDb29yZGluYXRlXHJcblx0ICogQHBhcmFtIFkgIC0gTW91c2UgWSBDb29yZGluYXRlXHJcblx0ICovXHJcblx0c2VuZE1vdXNlV2hlZWwoZGVsdGFZOiBudW1iZXIsIFg6IG51bWJlciwgWTogbnVtYmVyKSB7XHJcblx0XHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBtb3VzZSB3aGVlbCB3aXRoIGRlbHRhICR7ZGVsdGFZfSBhdCAoJHtYfSwgJHtZfSlgLCA2KTtcclxuXHRcdGxldCBjb29yZDogTm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZCA9IHRoaXMubm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZChYLCBZKTtcclxuXHRcdHRoaXMudWVJbnB1dE1vdXNlTWVzc2FnZS5zZW5kTW91c2VXaGVlbChkZWx0YVkgKiAtMSwgY29vcmQueCwgY29vcmQueSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGVzIG1vdXNlIGVudGVyXHJcblx0ICovXHJcblx0c2VuZE1vdXNlRW50ZXIoKSB7XHJcblx0XHR0aGlzLnVlSW5wdXRNb3VzZU1lc3NhZ2Uuc2VuZE1vdXNlRW50ZXIoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgbW91c2UgTGVhdmVcclxuXHQgKi9cclxuXHRzZW5kTW91c2VMZWF2ZSgpIHtcclxuXHRcdHRoaXMudWVJbnB1dE1vdXNlTWVzc2FnZS5zZW5kTW91c2VMZWF2ZSgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTm9ybWFsaXNlcyBhbmQgUXVhbnRpc2VkIHRoZSBNb3VzZSBDb29yZGluYXRlc1x0XHJcblx0ICogQHBhcmFtIHggLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuXHQgKiBAcGFyYW0geSAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxyXG5cdCAqIEByZXR1cm5zIC0gTm9ybWFsaXplIEFuZCBRdWFudGl6ZSBVbnNpZ25lZCBEYXRhIFR5cGVcclxuXHQgKi9cclxuXHRub3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkKHg6IG51bWJlciwgeTogbnVtYmVyKTogTm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZCB7XHJcblxyXG5cdFx0bGV0IHJvb3REaXYgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG5cdFx0bGV0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XHJcblxyXG5cdFx0aWYgKHJvb3REaXYgJiYgdmlkZW9FbGVtZW50KSB7XHJcblx0XHRcdGxldCBwbGF5ZXJBc3BlY3RSYXRpbyA9IHJvb3REaXYuY2xpZW50SGVpZ2h0IC8gcm9vdERpdi5jbGllbnRXaWR0aDtcclxuXHRcdFx0bGV0IHZpZGVvQXNwZWN0UmF0aW8gPSB2aWRlb0VsZW1lbnQudmlkZW9IZWlnaHQgLyB2aWRlb0VsZW1lbnQudmlkZW9XaWR0aDtcclxuXHJcblx0XHRcdC8vIFVuc2lnbmVkIFhZIHBvc2l0aW9ucyBhcmUgdGhlIHJhdGlvICgwLjAuLjEuMCkgYWxvbmcgYSB2aWV3cG9ydCBheGlzLFxyXG5cdFx0XHQvLyBxdWFudGl6ZWQgaW50byBhbiB1aW50MTYgKDAuLjY1NTM2KS5cclxuXHRcdFx0Ly8gU2lnbmVkIFhZIGRlbHRhcyBhcmUgdGhlIHJhdGlvICgtMS4wLi4xLjApIGFsb25nIGEgdmlld3BvcnQgYXhpcyxcclxuXHRcdFx0Ly8gcXVhbnRpemVkIGludG8gYW4gaW50MTYgKC0zMjc2Ny4uMzI3NjcpLlxyXG5cdFx0XHQvLyBUaGlzIGFsbG93cyB0aGUgYnJvd3NlciB2aWV3cG9ydCBhbmQgY2xpZW50IHZpZXdwb3J0IHRvIGhhdmUgYSBkaWZmZXJlbnRcclxuXHRcdFx0Ly8gc2l6ZS5cclxuXHRcdFx0Ly8gSGFjazogQ3VycmVudGx5IHdlIHNldCBhbiBvdXQtb2YtcmFuZ2UgcG9zaXRpb24gdG8gYW4gZXh0cmVtZSAoNjU1MzUpXHJcblx0XHRcdC8vIGFzIHdlIGNhbid0IHlldCBhY2N1cmF0ZWx5IGRldGVjdCBtb3VzZSBlbnRlciBhbmQgbGVhdmUgZXZlbnRzXHJcblx0XHRcdC8vIHByZWNpc2VseSBpbnNpZGUgYSB2aWRlbyB3aXRoIGFuIGFzcGVjdCByYXRpbyB3aGljaCBjYXVzZXMgbWF0dGVzLlxyXG5cdFx0XHRpZiAocGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvKSB7XHJcblx0XHRcdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2V0dXAgTm9ybWFsaXplIGFuZCBRdWFudGl6ZSBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvJywgNik7XHJcblxyXG5cdFx0XHRcdGxldCByYXRpbyA9IHBsYXllckFzcGVjdFJhdGlvIC8gdmlkZW9Bc3BlY3RSYXRpbztcclxuXHRcdFx0XHQvLyBVbnNpZ25lZC5cclxuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFggPSB4IC8gcm9vdERpdi5jbGllbnRXaWR0aDtcclxuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFkgPSByYXRpbyAqICh5IC8gcm9vdERpdi5jbGllbnRIZWlnaHQgLSAwLjUpICsgMC41O1xyXG5cclxuXHRcdFx0XHRpZiAobm9ybWFsaXplZFggPCAwLjAgfHwgbm9ybWFsaXplZFggPiAxLjAgfHwgbm9ybWFsaXplZFkgPCAwLjAgfHwgbm9ybWFsaXplZFkgPiAxLjApIHtcclxuXHRcdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHRcdGluUmFuZ2U6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHR4OiB0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZSxcclxuXHRcdFx0XHRcdFx0eTogdGhpcy51bnNpZ25lZE91dE9mUmFuZ2VcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdFx0aW5SYW5nZTogdHJ1ZSxcclxuXHRcdFx0XHRcdFx0eDogbm9ybWFsaXplZFggKiAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKSxcclxuXHRcdFx0XHRcdFx0eTogbm9ybWFsaXplZFkgKiAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKVxyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2V0dXAgTm9ybWFsaXplIGFuZCBRdWFudGl6ZSBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPD0gdmlkZW9Bc3BlY3RSYXRpbycsIDYpO1xyXG5cclxuXHRcdFx0XHRsZXQgcmF0aW8gPSB2aWRlb0FzcGVjdFJhdGlvIC8gcGxheWVyQXNwZWN0UmF0aW87XHJcblx0XHRcdFx0Ly8gVW5zaWduZWQuXHJcblx0XHRcdFx0bGV0IG5vcm1hbGl6ZWRYID0gcmF0aW8gKiAoeCAvIHJvb3REaXYuY2xpZW50V2lkdGggLSAwLjUpICsgMC41O1xyXG5cdFx0XHRcdGxldCBub3JtYWxpemVkWSA9IHkgLyByb290RGl2LmNsaWVudEhlaWdodDtcclxuXHRcdFx0XHRpZiAobm9ybWFsaXplZFggPCAwLjAgfHwgbm9ybWFsaXplZFggPiAxLjAgfHwgbm9ybWFsaXplZFkgPCAwLjAgfHwgbm9ybWFsaXplZFkgPiAxLjApIHtcclxuXHRcdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHRcdGluUmFuZ2U6IGZhbHNlLFxyXG5cdFx0XHRcdFx0XHR4OiB0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZSxcclxuXHRcdFx0XHRcdFx0eTogdGhpcy51bnNpZ25lZE91dE9mUmFuZ2VcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHRcdGluUmFuZ2U6IHRydWUsXHJcblx0XHRcdFx0XHRcdHg6IG5vcm1hbGl6ZWRYICogKHRoaXMudW5zaWduZWRPdXRPZlJhbmdlICsgMSksXHJcblx0XHRcdFx0XHRcdHk6IG5vcm1hbGl6ZWRZICogKHRoaXMudW5zaWduZWRPdXRPZlJhbmdlICsgMSlcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBEZW5vcm1hbGlzZXMgYW5kIHVucXVhbnRpc2VkIHRoZSBNb3VzZSBDb29yZGluYXRlc1x0XHJcblx0ICogQHBhcmFtIHggLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuXHQgKiBAcGFyYW0geSAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxyXG5cdCAqIEByZXR1cm5zIC0gdW5xdWFudGlzZSBhbmQgRGVub3JtYWxpemUgVW5zaWduZWQgRGF0YSBUeXBlXHJcblx0ICovXHJcblx0dW5xdWFudGlzZUFuZERlbm9ybWFsaXNlVW5zaWduZWQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBVbnF1YW50aXNlZEFuZERlbm9ybWFsaXNlVW5zaWduZWQge1xyXG5cclxuXHRcdGxldCByb290RGl2ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuXHRcdGxldCB2aWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpO1xyXG5cclxuXHRcdGlmIChyb290RGl2ICYmIHZpZGVvRWxlbWVudCkge1xyXG5cdFx0XHRsZXQgcGxheWVyQXNwZWN0UmF0aW8gPSByb290RGl2LmNsaWVudEhlaWdodCAvIHJvb3REaXYuY2xpZW50V2lkdGg7XHJcblx0XHRcdGxldCB2aWRlb0FzcGVjdFJhdGlvID0gdmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0IC8gdmlkZW9FbGVtZW50LnZpZGVvV2lkdGg7XHJcblxyXG5cdFx0XHQvLyBVbnNpZ25lZCBYWSBwb3NpdGlvbnMgYXJlIHRoZSByYXRpbyAoMC4wLi4xLjApIGFsb25nIGEgdmlld3BvcnQgYXhpcyxcclxuXHRcdFx0Ly8gcXVhbnRpemVkIGludG8gYW4gdWludDE2ICgwLi42NTUzNikuXHJcblx0XHRcdC8vIFNpZ25lZCBYWSBkZWx0YXMgYXJlIHRoZSByYXRpbyAoLTEuMC4uMS4wKSBhbG9uZyBhIHZpZXdwb3J0IGF4aXMsXHJcblx0XHRcdC8vIHF1YW50aXplZCBpbnRvIGFuIGludDE2ICgtMzI3NjcuLjMyNzY3KS5cclxuXHRcdFx0Ly8gVGhpcyBhbGxvd3MgdGhlIGJyb3dzZXIgdmlld3BvcnQgYW5kIGNsaWVudCB2aWV3cG9ydCB0byBoYXZlIGEgZGlmZmVyZW50XHJcblx0XHRcdC8vIHNpemUuXHJcblx0XHRcdC8vIEhhY2s6IEN1cnJlbnRseSB3ZSBzZXQgYW4gb3V0LW9mLXJhbmdlIHBvc2l0aW9uIHRvIGFuIGV4dHJlbWUgKDY1NTM1KVxyXG5cdFx0XHQvLyBhcyB3ZSBjYW4ndCB5ZXQgYWNjdXJhdGVseSBkZXRlY3QgbW91c2UgZW50ZXIgYW5kIGxlYXZlIGV2ZW50c1xyXG5cdFx0XHQvLyBwcmVjaXNlbHkgaW5zaWRlIGEgdmlkZW8gd2l0aCBhbiBhc3BlY3QgcmF0aW8gd2hpY2ggY2F1c2VzIG1hdHRlcy5cclxuXHRcdFx0aWYgKHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpbykge1xyXG5cdFx0XHRcdExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NldHVwIE5vcm1hbGl6ZSBhbmQgUXVhbnRpemUgZm9yIHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpbycsIDYpO1xyXG5cclxuXHRcdFx0XHRsZXQgcmF0aW8gPSBwbGF5ZXJBc3BlY3RSYXRpbyAvIHZpZGVvQXNwZWN0UmF0aW87XHJcblx0XHRcdFx0Ly8gVW5zaWduZWQuXHJcblx0XHRcdFx0bGV0IG5vcm1hbGl6ZWRYID0geCAvICh0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZSArIDEpO1xyXG5cdFx0XHRcdGxldCBub3JtYWxpemVkWSA9ICh5IC8gKHRoaXMudW5zaWduZWRPdXRPZlJhbmdlICsgMSkgLSAwLjUpIC8gcmF0aW8gKyAwLjU7XHJcblxyXG5cdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHR4OiBub3JtYWxpemVkWCAqIHJvb3REaXYuY2xpZW50V2lkdGgsXHJcblx0XHRcdFx0XHR5OiBub3JtYWxpemVkWSAqIHJvb3REaXYuY2xpZW50SGVpZ2h0XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdTZXR1cCBOb3JtYWxpemUgYW5kIFF1YW50aXplIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA8PSB2aWRlb0FzcGVjdFJhdGlvJywgNik7XHJcblxyXG5cdFx0XHRcdGxldCByYXRpbyA9IHZpZGVvQXNwZWN0UmF0aW8gLyBwbGF5ZXJBc3BlY3RSYXRpbztcclxuXHRcdFx0XHQvLyBVbnNpZ25lZC5cclxuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFggPSAoeCAvICh0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZSArIDEpIC0gMC41KSAvIHJhdGlvICsgMC41O1xyXG5cdFx0XHRcdGxldCBub3JtYWxpemVkWSA9IHkgLyAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKTtcclxuXHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0eDogbm9ybWFsaXplZFggKiByb290RGl2LmNsaWVudFdpZHRoLFxyXG5cdFx0XHRcdFx0eTogbm9ybWFsaXplZFkgKiByb290RGl2LmNsaWVudEhlaWdodFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTm9ybWFsaXNlcyBhbmQgUXVhbnRpc2VkIHRoZSBNb3VzZSBDb29yZGluYXRlc1x0XHJcblx0ICogQHBhcmFtIHggLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuXHQgKiBAcGFyYW0geSAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxyXG5cdCAqIEByZXR1cm5zIC0gTm9ybWFsaXplIEFuZCBRdWFudGl6ZSBTaWduZWQgRGF0YSBUeXBlXHJcblx0ICovXHJcblx0bm9ybWFsaXNlQW5kUXVhbnRpc2VTaWduZWQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBOb3JtYWxpc2VBbmRRdWFudGlzZVNpZ25lZCB7XHJcblxyXG5cdFx0bGV0IHJvb3REaXYgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG5cdFx0bGV0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XHJcblxyXG5cdFx0aWYgKHJvb3REaXYgJiYgdmlkZW9FbGVtZW50KSB7XHJcblx0XHRcdGxldCBwbGF5ZXJBc3BlY3RSYXRpbyA9IHJvb3REaXYuY2xpZW50SGVpZ2h0IC8gcm9vdERpdi5jbGllbnRXaWR0aDtcclxuXHRcdFx0bGV0IHZpZGVvQXNwZWN0UmF0aW8gPSB2aWRlb0VsZW1lbnQudmlkZW9IZWlnaHQgLyB2aWRlb0VsZW1lbnQudmlkZW9XaWR0aDtcclxuXHJcblx0XHRcdC8vIFVuc2lnbmVkIFhZIHBvc2l0aW9ucyBhcmUgdGhlIHJhdGlvICgwLjAuLjEuMCkgYWxvbmcgYSB2aWV3cG9ydCBheGlzLFxyXG5cdFx0XHQvLyBxdWFudGl6ZWQgaW50byBhbiB1aW50MTYgKDAuLjY1NTM2KS5cclxuXHRcdFx0Ly8gU2lnbmVkIFhZIGRlbHRhcyBhcmUgdGhlIHJhdGlvICgtMS4wLi4xLjApIGFsb25nIGEgdmlld3BvcnQgYXhpcyxcclxuXHRcdFx0Ly8gcXVhbnRpemVkIGludG8gYW4gaW50MTYgKC0zMjc2Ny4uMzI3NjcpLlxyXG5cdFx0XHQvLyBUaGlzIGFsbG93cyB0aGUgYnJvd3NlciB2aWV3cG9ydCBhbmQgY2xpZW50IHZpZXdwb3J0IHRvIGhhdmUgYSBkaWZmZXJlbnRcclxuXHRcdFx0Ly8gc2l6ZS5cclxuXHRcdFx0Ly8gSGFjazogQ3VycmVudGx5IHdlIHNldCBhbiBvdXQtb2YtcmFuZ2UgcG9zaXRpb24gdG8gYW4gZXh0cmVtZSAoNjU1MzUpXHJcblx0XHRcdC8vIGFzIHdlIGNhbid0IHlldCBhY2N1cmF0ZWx5IGRldGVjdCBtb3VzZSBlbnRlciBhbmQgbGVhdmUgZXZlbnRzXHJcblx0XHRcdC8vIHByZWNpc2VseSBpbnNpZGUgYSB2aWRlbyB3aXRoIGFuIGFzcGVjdCByYXRpbyB3aGljaCBjYXVzZXMgbWF0dGVzLlxyXG5cdFx0XHRpZiAocGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvKSB7XHJcblx0XHRcdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2V0dXAgTm9ybWFsaXplIGFuZCBRdWFudGl6ZSBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvJywgNik7XHJcblxyXG5cdFx0XHRcdGxldCByYXRpbyA9IHBsYXllckFzcGVjdFJhdGlvIC8gdmlkZW9Bc3BlY3RSYXRpbztcclxuXHRcdFx0XHQvLyBVbnNpZ25lZC5cclxuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFggPSB4IC8gKDAuNSAqIHJvb3REaXYuY2xpZW50V2lkdGgpO1xyXG5cdFx0XHRcdGxldCBub3JtYWxpemVkWSA9IChyYXRpbyAqIHkpIC8gKDAuNSAqIHJvb3REaXYuY2xpZW50SGVpZ2h0KTtcclxuXHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0eDogbm9ybWFsaXplZFggKiB0aGlzLnNpZ25lZE91dE9mUmFuZ2UsXHJcblx0XHRcdFx0XHR5OiBub3JtYWxpemVkWSAqIHRoaXMuc2lnbmVkT3V0T2ZSYW5nZVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aWYgKHRoaXMucHJpbnRJbnB1dHMpIHtcclxuXHRcdFx0XHRcdExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NldHVwIE5vcm1hbGl6ZSBhbmQgUXVhbnRpemUgZm9yIHBsYXllckFzcGVjdFJhdGlvIDw9IHZpZGVvQXNwZWN0UmF0aW8nLCA2KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bGV0IHJhdGlvID0gdmlkZW9Bc3BlY3RSYXRpbyAvIHBsYXllckFzcGVjdFJhdGlvO1xyXG5cdFx0XHRcdC8vIFNpZ25lZC5cclxuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFggPSAocmF0aW8gKiB4KSAvICgwLjUgKiByb290RGl2LmNsaWVudFdpZHRoKTtcclxuXHRcdFx0XHRsZXQgbm9ybWFsaXplZFkgPSB5IC8gKDAuNSAqIHJvb3REaXYuY2xpZW50SGVpZ2h0KTtcclxuXHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0eDogbm9ybWFsaXplZFggKiB0aGlzLnNpZ25lZE91dE9mUmFuZ2UsXHJcblx0XHRcdFx0XHR5OiBub3JtYWxpemVkWSAqIHRoaXMuc2lnbmVkT3V0T2ZSYW5nZVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iLCIvKipcclxuICogUmVnaXN0ZXJzIHRoZSBTcGVjaWFsIEtleSBjb2Rlc1xyXG4gKiAgTXVzdCBiZSBrZXB0IGluIHN5bmMgd2l0aCBKYXZhU2NyaXB0S2V5Q29kZVRvRktleSBDKysgYXJyYXkuIFxyXG4gKiBUaGUgaW5kZXggb2YgdGhlIGVudHJ5IGluIHRoZSBhcnJheSBpcyB0aGUgc3BlY2lhbCBrZXkgY29kZSBnaXZlbiBiZWxvdy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBTcGVjaWFsS2V5Q29kZXMge1xyXG5cdHN0YXRpYyBiYWNrU3BhY2UgPSA4O1xyXG5cdHN0YXRpYyBzaGlmdCA9IDE2O1xyXG5cdHN0YXRpYyBjb250cm9sID0gMTc7XHJcblx0c3RhdGljIGFsdCA9IDE4O1xyXG5cdHN0YXRpYyByaWdodFNoaWZ0ID0gMjUzO1xyXG5cdHN0YXRpYyByaWdodENvbnRyb2wgPSAyNTQ7XHJcblx0c3RhdGljIHJpZ2h0QWx0ID0gMjU1O1xyXG59XHJcbiIsImltcG9ydCB7IFVlSW5wdXRUb3VjaE1lc3NhZ2UgfSBmcm9tIFwiLi4vVWVJbnN0YW5jZU1lc3NhZ2UvVWVJbnB1dFRvdWNoTWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IElUb3VjaENvbnRyb2xsZXIgfSBmcm9tIFwiLi9JVG91Y2hDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IElWaWRlb1BsYXllciB9IGZyb20gXCIuLi9WaWRlb1BsYXllci9JVmlkZW9QbGF5ZXJcIjtcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuLyoqIFxyXG4gKiBIYW5kbGVzIHRoZSBUb3VjaCBpbnB1dCBFdmVudHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUb3VjaENvbnRyb2xsZXIgaW1wbGVtZW50cyBJVG91Y2hDb250cm9sbGVyIHtcclxuICAgIHVlSW5wdXRUb3VjaE1lc3NhZ2U6IFVlSW5wdXRUb3VjaE1lc3NhZ2U7XHJcbiAgICBwbGF5ZXJFbGVtZW50OiBIVE1MVmlkZW9FbGVtZW50O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZGF0YUNoYW5uZWxDb250cm9sbGVyIC0gdGhlIGRhdGEgY2hhbm5lbCBjb250cm9sbGVyIFxyXG4gICAgICogQHBhcmFtIHBsYXllckVsZW1lbnQgLSB0aGUgcGxheWVyIGVsZW1lbnQgRE9NXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGRhdGFDaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyLCBwbGF5ZXJFbGVtZW50OiBIVE1MVmlkZW9FbGVtZW50LCB2aWRlb0VsZW1lbnRQcm92aWRlcjogSVZpZGVvUGxheWVyKSB7XHJcbiAgICAgICAgdGhpcy51ZUlucHV0VG91Y2hNZXNzYWdlID0gbmV3IFVlSW5wdXRUb3VjaE1lc3NhZ2UoZGF0YUNoYW5uZWxDb250cm9sbGVyLCB2aWRlb0VsZW1lbnRQcm92aWRlcik7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJFbGVtZW50ID0gcGxheWVyRWxlbWVudDtcclxuICAgICAgICB0aGlzLnBsYXllckVsZW1lbnQub250b3VjaHN0YXJ0ID0gKGV2OiBUb3VjaEV2ZW50KSA9PiB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJFbGVtZW50Lm9udG91Y2hlbmQgPSAoZXY6IFRvdWNoRXZlbnQpID0+IHRoaXMub25Ub3VjaEVuZChldik7XHJcbiAgICAgICAgdGhpcy5wbGF5ZXJFbGVtZW50Lm9udG91Y2htb3ZlID0gKGV2OiBUb3VjaEV2ZW50KSA9PiB0aGlzLm9uVG91Y2hNb3ZlKGV2KTtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiVG91Y2ggRXZlbnRzIFJlZ2lzdGVyZWRcIiwgNik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGEgdG91Y2ggZXZlbnQgc3RhcnRzIFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gdGhlIHRvdWNoIGV2ZW50IGJlaW5nIGludGVyY2VwdGVkICBcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaFN0YXJ0KHRvdWNoRXZlbnQ6IFRvdWNoRXZlbnQpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwib24gVG91Y2ggU3RhcnRcIiwgNik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0b3VjaDogVG91Y2ggPSB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldO1xyXG5cclxuICAgICAgICAgICAgbGV0IGZpbmdlciA9IHRoaXMudWVJbnB1dFRvdWNoTWVzc2FnZS5maW5nZXJzLnBvcCgpO1xyXG4gICAgICAgICAgICBpZiAoZmluZ2VyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJ3aG8gaGFzIG1vcmUgdGhlbiAxMCBmaW5nZXJzXCIsIDYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudWVJbnB1dFRvdWNoTWVzc2FnZS5maW5nZXJzSWRzW3RvdWNoLmlkZW50aWZpZXJdID0gZmluZ2VyO1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwidG91Y2guaWRlbnRpZmllcjogXCIgKyB0b3VjaC5pZGVudGlmaWVyLCA2KTtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcImZpbmdlcjogXCIgKyBmaW5nZXIsIDYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51ZUlucHV0VG91Y2hNZXNzYWdlLnNlbmRUb3VjaFN0YXJ0KHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXMpO1xyXG4gICAgICAgIHRvdWNoRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYSB0b3VjaCBldmVudCBlbmRzIFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gdGhlIHRvdWNoIGV2ZW50IGJlaW5nIGludGVyY2VwdGVkICBcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaEVuZCh0b3VjaEV2ZW50OiBUb3VjaEV2ZW50KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIm9uIFRvdWNoIEVORFwiLCA2KTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0b3VjaCA9IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXNbaV07XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJvbiBGb3JnZXQgVG91Y2hcIiwgNik7XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJ0b3VjaCBpZDogXCIgKyB0b3VjaC5pZGVudGlmaWVyLCA2KTtcclxuICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkZpbmdlcnMgaWQgVG91Y2ggaWQ6IFwiICsgdGhpcy51ZUlucHV0VG91Y2hNZXNzYWdlLmZpbmdlcnNJZHNbdG91Y2guaWRlbnRpZmllcl0sIDYpO1xyXG4gICAgICAgICAgICB0aGlzLnVlSW5wdXRUb3VjaE1lc3NhZ2UuZmluZ2Vycy5wdXNoKHRoaXMudWVJbnB1dFRvdWNoTWVzc2FnZS5maW5nZXJzSWRzW3RvdWNoLmlkZW50aWZpZXJdKTtcclxuICAgICAgICAgICAgdGhpcy51ZUlucHV0VG91Y2hNZXNzYWdlLmZpbmdlcnMuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBiLWF9KTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMudWVJbnB1dFRvdWNoTWVzc2FnZS5maW5nZXJzSWRzW3RvdWNoLmlkZW50aWZpZXJdO1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwidG91Y2guaWRlbnRpZmllcjogXCIgKyB0b3VjaC5pZGVudGlmaWVyLCA2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51ZUlucHV0VG91Y2hNZXNzYWdlLnNlbmRUb3VjaEVuZCh0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzKTtcclxuXHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiU3VjZXNzZnVsIHRvdWNoIEVORFwiLCA2KTtcclxuICAgICAgICB0b3VjaEV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHdoZW4gYSBtb3ZpbmcgdG91Y2ggZXZlbnQgb2NjdXJzIFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gdGhlIHRvdWNoIGV2ZW50IGJlaW5nIGludGVyY2VwdGVkICBcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaE1vdmUodG91Y2hFdmVudDogVG91Y2hFdmVudCkge1xyXG5cdHRoaXMudWVJbnB1dFRvdWNoTWVzc2FnZS5zZW5kVG91Y2hNb3ZlKHRvdWNoRXZlbnQudG91Y2hlcyk7XHJcblx0dG91Y2hFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBMb2dnZXIge1xyXG4gICAgc3RhdGljIHZlcmJvc2VMb2dMZXZlbDogbnVtYmVyID0gNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENhcHR1cmVzIHRoZSBzdGFjayBhbmQgcmV0dXJucyBpdFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgc3RhY2tcclxuICAgICAqL1xyXG4gICAgc3RhdGljIEdldFN0YWNrVHJhY2UoKSB7XHJcbiAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKCk7XHJcbiAgICAgICAgbGV0IGZvcm1hdHRlZFN0YWNrID0gXCJObyBTdGFjayBBdmFpbGFibGUgZm9yIHRoaXMgYnJvd3NlclwiO1xyXG5cclxuICAgICAgICAvLyBmb3JtYXQgdGhlIGVycm9yXHJcbiAgICAgICAgaWYgKGVycm9yLnN0YWNrKSB7XHJcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0YWNrID0gZXJyb3Iuc3RhY2sudG9TdHJpbmcoKS5yZXBsYWNlKC9FcnJvci9nLCAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkU3RhY2s7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBsb2cgdmVyYm9zaXR5IGxldmVsXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBTZXRMb2dnZXJWZXJib3NpdHkodmVyYm9zZUxvZ0xldmVsOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy52ZXJib3NlTG9nTGV2ZWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnZlcmJvc2VMb2dMZXZlbCA9IHZlcmJvc2VMb2dMZXZlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3RhbmRhcmQgbG9nZ2luZyBvdXRwdXQgXHJcbiAgICAgKiBAcGFyYW0gc3RhY2sgLSB0aGUgc3RhY2sgdHJhY2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gdGhlIG1lc3NhZ2UgdG8gYmUgbG9nZ2VkXHJcbiAgICAgKiBAcGFyYW0gdmVyYm9zaXR5IC0gdGhlIHZlcmJvc2l0eSBsZXZlbFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgTG9nKHN0YWNrOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgdmVyYm9zaXR5PzogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHZlcmJvc2l0eSA+IHRoaXMudmVyYm9zZUxvZ0xldmVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCByZXR1cm5TdHJpbmcgPSBgTGV2ZWw6IExvZywgQ2FsbGVyOiAke3N0YWNrfSwgTXNnOiAke21lc3NhZ2V9YDtcclxuICAgICAgICBjb25zb2xlLmxvZyhyZXR1cm5TdHJpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHN0YW5kYXJkIGxvZ2dpbmcgb3V0cHV0IFxyXG4gICAgICogQHBhcmFtIHN0YWNrIC0gdGhlIHN0YWNrIHRyYWNlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIHRoZSBtZXNzYWdlIHRvIGJlIGxvZ2dlZFxyXG4gICAgICogQHBhcmFtIHZlcmJvc2l0eSAtIHRoZSB2ZXJib3NpdHkgbGV2ZWxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIEluZm8oc3RhY2s6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCB2ZXJib3NpdHk/OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodmVyYm9zaXR5ID4gdGhpcy52ZXJib3NlTG9nTGV2ZWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJldHVyblN0cmluZyA9IGBMZXZlbDogSW5mbywgTXNnOiAke21lc3NhZ2V9YDtcclxuICAgICAgICBjb25zb2xlLmluZm8ocmV0dXJuU3RyaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGFuZGFyZCBsb2dnaW5nIG91dHB1dCBcclxuICAgICAqIEBwYXJhbSBzdGFjayAtIHRoZSBzdGFjayB0cmFjZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIEVycm9yKHN0YWNrOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIGxldCByZXR1cm5TdHJpbmcgPSBgTGV2ZWw6IEVycm9yLCBDYWxsZXI6ICR7c3RhY2t9LCBNc2c6ICR7bWVzc2FnZX1gO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IocmV0dXJuU3RyaW5nKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1pY0NvbnRyb2xsZXIge1xyXG4gICAgdXNlTWljOiBib29sZWFuO1xyXG4gICAgaXNMb2NhbGhvc3RDb25uZWN0aW9uOiBib29sZWFuO1xyXG4gICAgaXNIdHRwc0Nvbm5lY3Rpb246IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IodXJsUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXMpIHtcclxuICAgICAgICAvLyBnZXQgdGhlIG1pYyBzdGF0dXMgZnJvbSB0aGUgdXJsIFxyXG4gICAgICAgIHRoaXMudXNlTWljID0gdXJsUGFyYW1zLmhhcygndXNlTWljJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnVzZU1pYykge1xyXG4gICAgICAgICAgICBMb2dnZXIuSW5mbyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIk1pY3JvcGhvbmUgYWNjZXNzIGlzIGVuYWJsZWQgSVQgSVMgRVhQRVJJTUVOVEFMIEFORCBJUyBOT1QgUFJPUEVSTFkgU1VQUE9SVEVEIEFDUk9TUyBVRS4gSUYgSVQgRE9FUyBOT1QgV09SSyBJVFMgWU9VUiBPV04gRkFVTFQhIFlPVSBIQVZFIEJFRU4gVE9MRC5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiAoIXRoaXMudXNlTWljKSB7XHJcbiAgICAgICAgLy8gICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJNaWNyb3Bob25lIGFjY2VzcyBpcyBub3QgZW5hYmxlZC4gUGFzcyA/dXNlTWljIGluIHRoZSB1cmwgdG8gZW5hYmxlIGl0LlwiKTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZSBjb25uZWN0aW9uIGlzIG5vdCBsb2NhbCBhbmQgaXMgaHR0cHMgb3IgbWljIHdpbGwgbm90IHdvcmsgXHJcbiAgICAgICAgdGhpcy5pc0xvY2FsaG9zdENvbm5lY3Rpb24gPSBsb2NhdGlvbi5ob3N0bmFtZSA9PT0gXCJsb2NhbGhvc3RcIiB8fCBsb2NhdGlvbi5ob3N0bmFtZSA9PT0gXCIxMjcuMC4wLjFcIjtcclxuICAgICAgICB0aGlzLmlzSHR0cHNDb25uZWN0aW9uID0gbG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonO1xyXG4gICAgICAgIGlmICh0aGlzLnVzZU1pYyAmJiAhdGhpcy5pc0xvY2FsaG9zdENvbm5lY3Rpb24gJiYgIXRoaXMuaXNIdHRwc0Nvbm5lY3Rpb24pIHtcclxuICAgICAgICAgICAgdGhpcy51c2VNaWMgPSBmYWxzZTtcclxuICAgICAgICAgICAgTG9nZ2VyLkVycm9yKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiTWljcm9waG9uZSBhY2Nlc3MgaW4gdGhlIGJyb3dzZXIgd2lsbCBub3Qgd29yayBpZiB5b3UgYXJlIG5vdCBvbiBIVFRQUyBvciBsb2NhbGhvc3QuIERpc2FibGluZyBtaWMgYWNjZXNzLlwiKTtcclxuICAgICAgICAgICAgTG9nZ2VyLkVycm9yKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiRm9yIHRlc3RpbmcgeW91IGNhbiBlbmFibGUgSFRUUCBtaWNyb3Bob25lIGFjY2VzcyBDaHJvbWUgYnkgdmlzaXRpbmcgY2hyb21lOi8vZmxhZ3MvIGFuZCBlbmFibGluZyAndW5zYWZlbHktdHJlYXQtaW5zZWN1cmUtb3JpZ2luLWFzLXNlY3VyZSdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSIsImltcG9ydCB7IGluYm91bmRBdWRpb1N0YXRzIH0gZnJvbSBcIi4vSW5ib3VuZEF1ZGlvU3RhdHNcIjtcclxuaW1wb3J0IHsgaW5ib3VuZFZpZGVvU3RhdHMgfSBmcm9tIFwiLi9JbmJvdW5kVmlkZW9TdGF0c1wiO1xyXG5pbXBvcnQgeyBkYXRhQ2hhbm5lbFN0YXRzIH0gZnJvbSBcIi4vRGF0YUNoYW5uZWxTdGF0c1wiO1xyXG5pbXBvcnQgeyBDYW5kaWRhdGVTdGF0IH0gZnJvbSBcIi4vQ2FuZGlkYXRlU3RhdFwiO1xyXG5pbXBvcnQgeyBDYW5kaWRhdGVQYWlyU3RhdHMgfSBmcm9tIFwiLi9DYW5kaWRhdGVQYWlyU3RhdHNcIjtcclxuaW1wb3J0IHsgT3V0Qm91bmRWaWRlb1N0YXRzIH0gZnJvbSBcIi4vT3V0Qm91bmRWaWRlb1N0YXRzXCI7XHJcbmltcG9ydCB7IFN0cmVhbVN0YXRzIH0gZnJvbSBcIi4vU3RyZWFtU3RhdHNcIjtcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgQWdncmVnYXRlZCBTdGF0cyB0aGF0IGlzIGdlbmVyYXRlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5cclxudHlwZSBSVENTdGF0c1R5cGVTUFMgPSBSVENTdGF0c1R5cGUgfCBcInN0cmVhbVwiXHJcbmV4cG9ydCBjbGFzcyBBZ2dyZWdhdGVkU3RhdHMge1xyXG4gICAgaW5ib3VuZFZpZGVvU3RhdHM6IGluYm91bmRWaWRlb1N0YXRzO1xyXG4gICAgaW5ib3VuZEF1ZGlvU3RhdHM6IGluYm91bmRBdWRpb1N0YXRzO1xyXG4gICAgbGFzdFZpZGVvU3RhdHM6IGluYm91bmRWaWRlb1N0YXRzO1xyXG4gICAgY2FuZGlkYXRlUGFpcjogQ2FuZGlkYXRlUGFpclN0YXRzXHJcbiAgICBkYXRhQ2hhbm5lbFN0YXRzOiBkYXRhQ2hhbm5lbFN0YXRzO1xyXG4gICAgbG9jYWxDYW5kaWRhdGVzOiBBcnJheTxDYW5kaWRhdGVTdGF0PjtcclxuICAgIHJlbW90ZUNhbmRpZGF0ZXM6IEFycmF5PENhbmRpZGF0ZVN0YXQ+O1xyXG4gICAgb3V0Qm91bmRWaWRlb1N0YXRzOiBPdXRCb3VuZFZpZGVvU3RhdHM7XHJcbiAgICBzdHJlYW1TdGF0czogU3RyZWFtU3RhdHNcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzID0gbmV3IGluYm91bmRWaWRlb1N0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cyA9IG5ldyBpbmJvdW5kQXVkaW9TdGF0cygpO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpciA9IG5ldyBDYW5kaWRhdGVQYWlyU3RhdHMoKTtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU3RhdHMgPSBuZXcgZGF0YUNoYW5uZWxTdGF0cygpO1xyXG4gICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzID0gbmV3IE91dEJvdW5kVmlkZW9TdGF0cygpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtU3RhdHMgPSBuZXcgU3RyZWFtU3RhdHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdhdGhlciBhbGwgdGhlIGluZm9ybWF0aW9uIGZyb20gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb24gUmVwb3J0XHJcbiAgICAgKiBAcGFyYW0gcnRjU3RhdHNSZXBvcnQgLSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAgICAgKi9cclxuICAgIHByb2Nlc3NTdGF0cyhydGNTdGF0c1JlcG9ydDogUlRDU3RhdHNSZXBvcnQpIHtcclxuICAgICAgICB0aGlzLmxvY2FsQ2FuZGlkYXRlcyA9IG5ldyBBcnJheTxDYW5kaWRhdGVTdGF0PigpO1xyXG4gICAgICAgIHRoaXMucmVtb3RlQ2FuZGlkYXRlcyA9IG5ldyBBcnJheTxDYW5kaWRhdGVTdGF0PigpO1xyXG5cclxuICAgICAgICBydGNTdGF0c1JlcG9ydC5mb3JFYWNoKChzdGF0KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCB0eXBlOiBSVENTdGF0c1R5cGVTUFMgPSBzdGF0LnR5cGU7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJjYW5kaWRhdGUtcGFpclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2FuZGlkYXRlUGFpcihzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJjZXJ0aWZpY2F0ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImNvZGVjXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiY3NyY1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRhdGEtY2hhbm5lbFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRGF0YUNoYW5uZWwoc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiaW5ib3VuZC1ydHBcIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUluQm91bmRSVFAoc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwibG9jYWwtY2FuZGlkYXRlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVMb2NhbENhbmRpZGF0ZShzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtZWRpYS1zb3VyY2VcIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJvdXRib3VuZC1ydHBcIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJwZWVyLWNvbm5lY3Rpb25cIjpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZW1vdGUtY2FuZGlkYXRlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZW1vdGVDYW5kaWRhdGUoc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVtb3RlLWluYm91bmQtcnRwXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVtb3RlLW91dGJvdW5kLXJ0cFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlUmVtb3RlT3V0Qm91bmQoc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidHJhY2tcIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRyYWNrKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInRyYW5zcG9ydFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmVhbVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RyZWFtKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJ1bmhhbmRsZWQgU3RhdCBUeXBlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHN0cmVhbSBzdGF0cyBkYXRhIGZyb20gd2VicnRjXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBzdGF0IHRoZSBzdGF0cyBjb21pbmcgaW4gZnJvbSB3ZWJydGNcclxuICAgICAqL1xyXG4gICAgaGFuZGxlU3RyZWFtKHN0YXQ6IGFueSkge1xyXG4gICAgICAgIHRoaXMuc3RyZWFtU3RhdHMgPSBzdGF0XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICogUHJvY2VzcyB0aGUgSWNlIENhbmRpZGF0ZSBQYWlyIERhdGEgXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUNhbmRpZGF0ZVBhaXIoc3RhdDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLmJ5dGVzUmVjZWl2ZWQgPSBzdGF0LmJ5dGVzUmVjZWl2ZWQ7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLmJ5dGVzU2VudCA9IHN0YXQuYnl0ZXNTZW50O1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5sb2NhbENhbmRpZGF0ZUlkID0gc3RhdC5sb2NhbENhbmRpZGF0ZUlkXHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLnJlbW90ZUNhbmRpZGF0ZUlkID0gc3RhdC5yZW1vdGVDYW5kaWRhdGVJZFxyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5ub21pbmF0ZWQgPSBzdGF0Lm5vbWluYXRlZDtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIucmVhZGFibGUgPSBzdGF0LnJlYWRhYmxlO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5zZWxlY3RlZCA9IHN0YXQuc2VsZWN0ZWQ7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLndyaXRhYmxlID0gc3RhdC53cml0YWJsZTtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIuc3RhdGUgPSBzdGF0LnN0YXRlO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5jdXJyZW50Um91bmRUcmlwVGltZSA9IHN0YXQuY3VycmVudFJvdW5kVHJpcFRpbWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICogUHJvY2VzcyB0aGUgRGF0YSBDaGFubmVsIERhdGEgXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZURhdGFDaGFubmVsKHN0YXQ6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTdGF0cy5ieXRlc1JlY2VpdmVkID0gc3RhdC5kYXRheXRlc1JlY2VpdmVkO1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTdGF0cy5ieXRlc1NlbnQgPSBzdGF0LmJ5dGVzU2VudFxyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTdGF0cy5kYXRhQ2hhbm5lbElkZW50aWZpZXIgPSBzdGF0LmRhdGFDaGFubmVsSWRlbnRpZmllclxyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTdGF0cy5pZCA9IHN0YXQuaWRcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU3RhdHMubGFiZWwgPSBzdGF0LmxhYmVsXHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFN0YXRzLm1lc3NhZ2VzUmVjZWl2ZWQgPSBzdGF0Lm1lc3NhZ2VzUmVjZWl2ZWRcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU3RhdHMubWVzc2FnZXNTZW50ID0gc3RhdC5tZXNzYWdlc1NlbnRcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU3RhdHMucHJvdG9jb2wgPSBzdGF0LnByb3RvY29sXHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFN0YXRzLnN0YXRlID0gc3RhdC5zdGF0ZVxyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTdGF0cy50aW1lc3RhbXAgPSBzdGF0LnRpbWVzdGFtcFxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBcclxuICAgICAqIFByb2Nlc3MgdGhlIExvY2FsIEljZSBDYW5kaWRhdGUgRGF0YSBcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTG9jYWxDYW5kaWRhdGUoc3RhdDogYW55KSB7XHJcbiAgICAgICAgbGV0IGxvY2FsQ2FuZGlkYXRlID0gbmV3IENhbmRpZGF0ZVN0YXQoKTtcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5sYWJlbCA9IFwibG9jYWwtY2FuZGlkYXRlXCJcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5hZGRyZXNzID0gc3RhdC5hZGRyZXNzO1xyXG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLnBvcnQgPSBzdGF0LnBvcnRcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5wcm90b2NvbCA9IHN0YXQucHJvdG9jb2w7XHJcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUuY2FuZGlkYXRlVHlwZSA9IHN0YXQuY2FuZGlkYXRlVHlwZTtcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5pZCA9IHN0YXQuaWQ7XHJcbiAgICAgICAgdGhpcy5sb2NhbENhbmRpZGF0ZXMucHVzaChsb2NhbENhbmRpZGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzIHRoZSBSZW1vdGUgSWNlIENhbmRpZGF0ZSBEYXRhIFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVSZW1vdGVDYW5kaWRhdGUoc3RhdDogYW55KSB7XHJcbiAgICAgICAgbGV0IFJlbW90ZUNhbmRpZGF0ZSA9IG5ldyBDYW5kaWRhdGVTdGF0KCk7XHJcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLmxhYmVsID0gXCJsb2NhbC1jYW5kaWRhdGVcIlxyXG4gICAgICAgIFJlbW90ZUNhbmRpZGF0ZS5hZGRyZXNzID0gc3RhdC5hZGRyZXNzO1xyXG4gICAgICAgIFJlbW90ZUNhbmRpZGF0ZS5wb3J0ID0gc3RhdC5wb3J0XHJcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLnByb3RvY29sID0gc3RhdC5wcm90b2NvbDtcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUuaWQgPSBzdGF0LmlkO1xyXG4gICAgICAgIFJlbW90ZUNhbmRpZGF0ZS5jYW5kaWRhdGVUeXBlID0gc3RhdC5jYW5kaWRhdGVUeXBlO1xyXG4gICAgICAgIHRoaXMucmVtb3RlQ2FuZGlkYXRlcy5wdXNoKFJlbW90ZUNhbmRpZGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFxyXG4gICAgICogUHJvY2VzcyB0aGUgSW5ib3VuZCBSVFAgQXVkaW8gYW5kIFZpZGVvIERhdGEgIFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVJbkJvdW5kUlRQKHN0YXQ6IGFueSkge1xyXG4gICAgICAgIHN3aXRjaCAoc3RhdC5raW5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ2aWRlb1wiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy50aW1lc3RhbXAgPSBzdGF0LnRpbWVzdGFtcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYnl0ZXNSZWNlaXZlZCA9IHN0YXQuYnl0ZXNSZWNlaXZlZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVzRGVjb2RlZCA9IHN0YXQuZnJhbWVzRGVjb2RlZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMucGFja2V0c0xvc3QgPSBzdGF0LnBhY2tldHNMb3N0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5qaXR0ZXIgPSBzdGF0LmppdHRlcjtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJ5dGVzUmVjZWl2ZWRTdGFydCA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJ5dGVzUmVjZWl2ZWRTdGFydCA9PSBudWxsKSA/IHN0YXQuYnl0ZXNSZWNlaXZlZCA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYnl0ZXNSZWNlaXZlZFN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkU3RhcnQgPSAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkU3RhcnQgPT0gbnVsbCkgPyBzdGF0LmZyYW1lc0RlY29kZWQgOiB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc0RlY29kZWRTdGFydDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMudGltZXN0YW1wU3RhcnQgPSAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy50aW1lc3RhbXBTdGFydCA9PSBudWxsKSA/IHN0YXQudGltZXN0YW1wIDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy50aW1lc3RhbXBTdGFydDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVzRGVjb2RlZFN0YXJ0ID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVzRGVjb2RlZFN0YXJ0ID09IG51bGwpID8gc3RhdC5mcmFtZXNEZWNvZGVkIDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkU3RhcnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGFzdFZpZGVvU3RhdHMgIT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA9IDggKiAoc3RhdC5ieXRlc1JlY2VpdmVkIC0gdGhpcy5sYXN0VmlkZW9TdGF0cy5ieXRlc1JlY2VpdmVkKSAvIChzdGF0LnRpbWVzdGFtcCAtIHRoaXMubGFzdFZpZGVvU3RhdHMudGltZXN0YW1wKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJpdHJhdGUgPSBNYXRoLmZsb29yKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93Qml0cmF0ZSA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0JpdHJhdGUgPT0gdW5kZWZpbmVkIHx8IE51bWJlci5pc05hTih0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0JpdHJhdGUpKSA/IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93Qml0cmF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0JpdHJhdGUgPSAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5iaXRyYXRlIDwgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5sb3dCaXRyYXRlIHx8IE51bWJlci5pc05hTih0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0JpdHJhdGUpKSA/IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93Qml0cmF0ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoQml0cmF0ZSA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmhpZ2hCaXRyYXRlID09IHVuZGVmaW5lZCB8fCBOdW1iZXIuaXNOYU4odGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoQml0cmF0ZSkpID8gdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5iaXRyYXRlIDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoQml0cmF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmhpZ2hCaXRyYXRlID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA+IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuaGlnaEJpdHJhdGUpID8gdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5iaXRyYXRlIDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoQml0cmF0ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5hdmdCaXRyYXRlID0gOCAqICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJ5dGVzUmVjZWl2ZWQgLSB0aGlzLmxhc3RWaWRlb1N0YXRzLmJ5dGVzUmVjZWl2ZWQpIC8gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMudGltZXN0YW1wIC0gdGhpcy5sYXN0VmlkZW9TdGF0cy50aW1lc3RhbXApO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYXZnQml0cmF0ZSA9IE1hdGguZmxvb3IodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5hdmdCaXRyYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXJhdGUgPSAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkIC0gdGhpcy5sYXN0VmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkKSAvICgodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy50aW1lc3RhbXAgLSB0aGlzLmxhc3RWaWRlb1N0YXRzLnRpbWVzdGFtcCkgLyAxMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lcmF0ZSA9IE1hdGguZmxvb3IodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXJhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0ZyYW1lcmF0ZSA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0ZyYW1lcmF0ZSA9PSB1bmRlZmluZWQgfHwgTnVtYmVyLmlzTmFOKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93RnJhbWVyYXRlKSkgPyB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lcmF0ZSA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93RnJhbWVyYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMubG93RnJhbWVyYXRlID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVyYXRlIDwgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5sb3dGcmFtZXJhdGUpID8gdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXJhdGUgOiB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmxvd0ZyYW1lcmF0ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoRnJhbWVyYXRlID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuaGlnaEZyYW1lcmF0ZSA9PSB1bmRlZmluZWQgfHwgTnVtYmVyLmlzTmFOKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuaGlnaEZyYW1lcmF0ZSkpID8gdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXJhdGUgOiB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmhpZ2hGcmFtZXJhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoRnJhbWVyYXRlID0gKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVyYXRlIDwgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoRnJhbWVyYXRlKSA/IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVyYXRlIDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5oaWdoRnJhbWVyYXRlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmF2ZXJhZ2VGcmFtZVJhdGUgPSAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkIC0gdGhpcy5sYXN0VmlkZW9TdGF0cy5mcmFtZXNEZWNvZGVkU3RhcnQpIC8gKCh0aGlzLmluYm91bmRWaWRlb1N0YXRzLnRpbWVzdGFtcCAtIHRoaXMubGFzdFZpZGVvU3RhdHMudGltZXN0YW1wU3RhcnQpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5hdmVyYWdlRnJhbWVSYXRlID0gTWF0aC5mbG9vcih0aGlzLmluYm91bmRWaWRlb1N0YXRzLmF2ZXJhZ2VGcmFtZVJhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0VmlkZW9TdGF0cyA9IHsgLi4udGhpcy5pbmJvdW5kVmlkZW9TdGF0cyB9O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhdWRpb1wiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cy5ieXRlc1JlY2VpdmVkID0gc3RhdC5ieXRlc1JlY2VpdmVkXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzLmppdHRlciA9IHN0YXQuaml0dGVyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cy5wYWNrZXRzTG9zdCA9IHN0YXQucGFja2V0c2xvc3Q7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzLnRpbWVzdGFtcCA9IHN0YXQudGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiS2luZCBpcyBub3QgaGFuZGxlZFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBcclxuICAgICAqIFByb2Nlc3MgdGhlIG91dGJvdW5kIFJUUCBBdWRpbyBhbmQgVmlkZW8gRGF0YSAgXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVJlbW90ZU91dEJvdW5kKHN0YXQ6IGFueSkge1xyXG4gICAgICAgIHN3aXRjaCAoc3RhdC5raW5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJ2aWRlb1wiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMuYnl0ZXNTZW50ID0gc3RhdC5ieXRlc1NlbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5pZCA9IHN0YXQuaWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy5sb2NhbElkID0gc3RhdC5sb2NhbElkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMucGFja2V0c1NlbnQgPSBzdGF0LnBhY2tldHNTZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMucmVtb3RlVGltZXN0YW1wID0gc3RhdC5yZW1vdGVUaW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cy50aW1lc3RhbXAgPSBzdGF0LnRpbWVzdGFtcDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYXVkaW9cIjpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiBQcm9jZXNzIHRoZSBJbmJvdW5kIFZpZGVvIFRyYWNrIERhdGEgIFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVUcmFjayhzdGF0OiBhbnkpIHtcclxuXHJcbiAgICAgICAgLy8gd2Ugb25seSB3YW50IHRvIGV4dHJhY3Qgc3RhdHMgZnJvbSB0aGUgdmlkZW8gdHJhY2tcclxuICAgICAgICBpZihzdGF0LnR5cGUgPT09ICd0cmFjaycgJiYgKHN0YXQudHJhY2tJZGVudGlmaWVyID09PSAndmlkZW9fbGFiZWwnIHx8IHN0YXQua2luZCA9PT0gJ3ZpZGVvJykpIHtcclxuICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEcm9wcGVkID0gc3RhdC5mcmFtZXNEcm9wcGVkO1xyXG4gICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc1JlY2VpdmVkID0gc3RhdC5mcmFtZXNSZWNlaXZlZDtcclxuICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNEcm9wcGVkUGVyY2VudGFnZSA9IHN0YXQuZnJhbWVzRHJvcHBlZCAvIHN0YXQuZnJhbWVzUmVjZWl2ZWQgKiAxMDA7XHJcbiAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVIZWlnaHQgPSBzdGF0LmZyYW1lSGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lV2lkdGggPSBzdGF0LmZyYW1lV2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVIZWlnaHRTdGFydCA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lSGVpZ2h0U3RhcnQgPT0gbnVsbCkgPyBzdGF0LmZyYW1lSGVpZ2h0IDogdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZUhlaWdodFN0YXJ0O1xyXG4gICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lV2lkdGhTdGFydCA9ICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lV2lkdGhTdGFydCA9PSBudWxsKSA/IHN0YXQuZnJhbWVXaWR0aCA6IHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVXaWR0aFN0YXJ0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiBDaGVjayBpZiBhIHZhbHVlIGNvbWluZyBpbiBmcm9tIG91ciBzdGF0cyBpcyBhY3R1YWxseSBhIG51bWJlciAgXHJcbiAgICAgKi9cclxuICAgIGlzTnVtYmVyKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIi8qKiBcclxuICogSUNFIENhbmRpZGF0ZSBQYWlyIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2FuZGlkYXRlUGFpclN0YXRzIHtcclxuICAgIGJ5dGVzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIGJ5dGVzU2VudDogbnVtYmVyO1xyXG4gICAgbG9jYWxDYW5kaWRhdGVJZDogc3RyaW5nO1xyXG4gICAgcmVtb3RlQ2FuZGlkYXRlSWQ6IHN0cmluZztcclxuICAgIG5vbWluYXRlZDogYm9vbGVhbjtcclxuICAgIHJlYWRhYmxlOiBib29sZWFuO1xyXG4gICAgd3JpdGFibGU6IGJvb2xlYW47XHJcbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcclxuICAgIHN0YXRlOiBzdHJpbmc7XHJcbiAgICBjdXJyZW50Um91bmRUcmlwVGltZTogbnVtYmVyO1xyXG59XHJcbiIsIi8qKiBcclxuICogSUNFIENhbmRpZGF0ZSBTdGF0IGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ2FuZGlkYXRlU3RhdCB7XHJcbiAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGFkZHJlc3M6IHN0cmluZztcclxuICAgIGNhbmRpZGF0ZVR5cGU6IHN0cmluZztcclxuICAgIHBvcnQ6IG51bWJlcjtcclxuICAgIHByb3RvY29sOiBcInRjcFwiIHwgXCJ1ZHBcIlxyXG59IiwiLyoqIFxyXG4gKiBEYXRhIENoYW5uZWwgU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBkYXRhQ2hhbm5lbFN0YXRzIHtcclxuICAgIGJ5dGVzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIGJ5dGVzU2VudDogbnVtYmVyO1xyXG4gICAgZGF0YUNoYW5uZWxJZGVudGlmaWVyOiBudW1iZXI7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxuICAgIG1lc3NhZ2VzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIG1lc3NhZ2VzU2VudDogbnVtYmVyO1xyXG4gICAgcHJvdG9jb2w6IHN0cmluZztcclxuICAgIHN0YXRlOiBzdHJpbmc7XHJcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxufSIsIi8qKiBcclxuICogSW5ib3VuZCBBdWRpbyBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIGluYm91bmRBdWRpb1N0YXRzIHtcclxuICAgIGJ5dGVzUmVjZWl2ZWQ6IG51bWJlcjtcclxuICAgIGppdHRlcjogbnVtYmVyO1xyXG4gICAgcGFja2V0c0xvc3Q6IG51bWJlcjtcclxuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xyXG59IiwiLyoqIFxyXG4gKiBJbmJvdW5kIFZpZGVvIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgaW5ib3VuZFZpZGVvU3RhdHMge1xyXG4gICAgcmVjZWl2ZVRvQ29tcG9zaXRlTXM6IG51bWJlciA9IDA7XHJcbiAgICB0aW1lc3RhbXA6IG51bWJlciA9IDA7XHJcbiAgICBieXRlc1JlY2VpdmVkOiBudW1iZXIgPSAwO1xyXG4gICAgZnJhbWVzRGVjb2RlZDogbnVtYmVyID0gMDtcclxuICAgIHBhY2tldHNMb3N0OiBudW1iZXIgPSAwO1xyXG4gICAgYnl0ZXNSZWNlaXZlZFN0YXJ0OiBudW1iZXIgPSAwO1xyXG4gICAgZnJhbWVzRGVjb2RlZFN0YXJ0OiBudW1iZXIgPSAwO1xyXG4gICAgdGltZXN0YW1wU3RhcnQ6IG51bWJlciA9IDA7XHJcbiAgICBiaXRyYXRlOiBudW1iZXIgPSAwO1xyXG4gICAgbG93Qml0cmF0ZTogbnVtYmVyID0gMDtcclxuICAgIGhpZ2hCaXRyYXRlOiBudW1iZXIgPSAwO1xyXG4gICAgYXZnQml0cmF0ZTogbnVtYmVyID0gMDtcclxuICAgIGZyYW1lcmF0ZTogbnVtYmVyID0gMDtcclxuICAgIGxvd0ZyYW1lcmF0ZTogbnVtYmVyID0gMDtcclxuICAgIGhpZ2hGcmFtZXJhdGU6IG51bWJlciA9IDA7XHJcbiAgICBhdmVyYWdlRnJhbWVSYXRlOiBudW1iZXIgPSAwO1xyXG4gICAgZnJhbWVzRHJvcHBlZDogbnVtYmVyID0gMDtcclxuICAgIGZyYW1lc1JlY2VpdmVkOiBudW1iZXIgPSAwO1xyXG4gICAgZnJhbWVzRHJvcHBlZFBlcmNlbnRhZ2U6IG51bWJlciA9IDA7XHJcbiAgICBmcmFtZUhlaWdodDogbnVtYmVyID0gMDtcclxuICAgIGZyYW1lV2lkdGg6IG51bWJlciA9IDA7XHJcbiAgICBmcmFtZUhlaWdodFN0YXJ0OiBudW1iZXIgPSAwO1xyXG4gICAgZnJhbWVXaWR0aFN0YXJ0OiBudW1iZXIgPSAwO1xyXG4gICAgaml0dGVyOiBudW1iZXIgPSAwO1xyXG59IiwiLyoqIFxyXG4gKiBPdXRib3VuZCBWaWRlbyBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE91dEJvdW5kVmlkZW9TdGF0cyB7XHJcbiAgICBieXRlc1NlbnQ6IG51bWJlcjtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBsb2NhbElkOiBzdHJpbmc7XHJcbiAgICBwYWNrZXRzU2VudDogbnVtYmVyO1xyXG4gICAgcmVtb3RlVGltZXN0YW1wOiBudW1iZXI7XHJcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxufSIsImltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi9Mb2dnZXIvTG9nZ2VyXCI7XHJcbmltcG9ydCB7IEFnZ3JlZ2F0ZWRTdGF0cyB9IGZyb20gXCIuL0FnZ3JlZ2F0ZWRTdGF0c1wiO1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgdGhlIFBlZXIgQ29ubmVjdGlvbiBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIge1xyXG4gICAgcGVlckNvbm5lY3Rpb246IFJUQ1BlZXJDb25uZWN0aW9uO1xyXG4gICAgYWdncmVnYXRlZFN0YXRzOiBBZ2dyZWdhdGVkU3RhdHM7XHJcbiAgICBmb3JjZVR1cm46IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBuZXcgUlRDIFBlZXIgQ29ubmVjdGlvbiBjbGllbnRcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gUGVlciBjb25uZWN0aW9uIE9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogUlRDQ29uZmlndXJhdGlvbiwgdHVyblN0YXRlOiBib29sZWFuKSB7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgdHVybiBzdGF0ZSB0byB0cnVlIG9yIGZhbHNlIGZvciBydGMgb3B0aW9uc1xyXG4gICAgICAgIHRoaXMuZm9yY2VUdXJuID0gdHVyblN0YXRlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5mb3JjZVR1cm4gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgb3B0aW9ucy5pY2VUcmFuc3BvcnRQb2xpY3kgPSBcInJlbGF5XCI7XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJGb3JjaW5nIFRVUk4gdXNhZ2UgYnkgc2V0dGluZyBJQ0UgVHJhbnNwb3J0IFBvbGljeSBpbiBwZWVyIGNvbm5lY3Rpb24gY29uZmlnLlwiLCA2KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIGEgbmV3IHBlZXIgY29ubmVjdGlvbiB3aXRoIHRoZSBvcHRpb25zXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbihvcHRpb25zKTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2UgPSAoZXY6IEV2ZW50KSA9PiB0aGlzLmhhbmRsZVNpZ25hbFN0YXRlQ2hhbmdlKGV2KTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gKGV2OiBFdmVudCkgPT4gdGhpcy5oYW5kbGVJY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UoZXYpO1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSA9IChldjogRXZlbnQpID0+IHRoaXMuaGFuZGxlSWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2UoZXYpO1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub250cmFjayA9IChldjogUlRDVHJhY2tFdmVudCkgPT4gdGhpcy5oYW5kbGVPblRyYWNrKGV2KTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uaWNlY2FuZGlkYXRlID0gKGV2OiBSVENQZWVyQ29ubmVjdGlvbkljZUV2ZW50KSA9PiB0aGlzLmhhbmRlbEljZUNhbmRpZGF0ZShldik7XHJcbiAgICAgICAgdGhpcy5hZ2dyZWdhdGVkU3RhdHMgPSBuZXcgQWdncmVnYXRlZFN0YXRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYW4gb2ZmZXIgZm9yIHRoZSBXZWIgUlRDIGhhbmRzaGFrZSBhbmQgc2VuZCB0aGUgb2ZmZXIgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxyXG4gICAgICogQHBhcmFtIG9mZmVyT3B0aW9ucyAtIFJUQyBPZmZlciBPcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZU9mZmVyKG9mZmVyT3B0aW9uczogUlRDT2ZmZXJPcHRpb25zLCB1c2VNaWM6IGJvb2xlYW4pIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiQ3JlYXRlIE9mZmVyXCIsIDYpO1xyXG5cclxuICAgICAgICB0aGlzLnNldHVwVHJhY2tzVG9TZW5kQXN5bmModXNlTWljKS5maW5hbGx5KCgpID0+IHsgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24uY3JlYXRlT2ZmZXIob2ZmZXJPcHRpb25zKS50aGVuKChvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dUZXh0T3ZlcmxheUNvbm5lY3RpbmcoKTtcclxuICAgICAgICAgICAgb2ZmZXIuc2RwID0gdGhpcy5tdW5nZU9mZmVyKG9mZmVyLnNkcCwgdXNlTWljKTtcclxuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKG9mZmVyKTtcclxuICAgICAgICAgICAgdGhpcy5vblNlbmRXZWJSVENPZmZlcihvZmZlcik7XHJcbiAgICAgICAgfSkuY2F0Y2goKG9uUmVqZWN0ZWRSZWFzb246IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dUZXh0T3ZlcmxheVNldHVwRmFpbHVyZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGUgQWdncmVnYXRlZCBTdGF0cyBhbmQgdGhlbiBmaXJlIGEgb25WaWRlbyBTdGF0cyBldmVudFxyXG4gICAgICovXHJcbiAgICBnZW5lcmF0ZVN0YXRzKCkge1xyXG4gICAgICAgIC8qdGhpcy5wZWVyQ29ubmVjdGlvbi5nZXRTdGF0cyhudWxsKS50aGVuKChTdGF0c0RhdGE6IFJUQ1N0YXRzUmVwb3J0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWdncmVnYXRlZFN0YXRzLnByb2Nlc3NTdGF0cyhTdGF0c0RhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLm9uVmlkZW9TdGF0cyh0aGlzLmFnZ3JlZ2F0ZWRTdGF0cyk7XHJcbiAgICAgICAgfSk7Ki9cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsb3NlIFRoZSBQZWVyIENvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGVlckNvbm5lY3Rpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5jbG9zZSgpXHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1vZGlmeSB0aGUgU2Vzc2lvbiBEZXNjcmlwdG9yIFxyXG4gICAgICogQHBhcmFtIHNkcCAtIFNlc3Npb24gRGVzY3JpcHRvciBhcyBhIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHVzZU1pYyAtIElzIHRoZSBtaWNyb3Bob25lIGluIHVzZVxyXG4gICAgICogQHJldHVybnMgQSBtb2RpZmllZCBTZXNzaW9uIERlc2NyaXB0b3JcclxuICAgICAqL1xyXG4gICAgbXVuZ2VPZmZlcihzZHA6IHN0cmluZywgdXNlTWljOiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IHRlbXAgPSBzZHA7XHJcbiAgICAgICAgdGVtcC5yZXBsYWNlKC8oYT1mbXRwOlxcZCsgLipsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0uKilcXHJcXG4vZ20sIFwiJDE7eC1nb29nbGUtc3RhcnQtYml0cmF0ZT0xMDAwMDt4LWdvb2dsZS1tYXgtYml0cmF0ZT0xMDAwMDBcXHJcXG5cIik7XHJcbiAgICAgICAgdGVtcC5yZXBsYWNlKCd1c2VpbmJhbmRmZWM9MScsICd1c2VpbmJhbmRmZWM9MTtzdGVyZW89MTtzcHJvcC1tYXhjYXB0dXJlcmF0ZT00ODAwMCcpO1xyXG5cclxuICAgICAgICAvLyBJbmNyZWFzZSB0aGUgY2FwdHVyZSByYXRlIG9mIGF1ZGlvIHNvIHdlIGNhbiBoYXZlIGhpZ2hlciBxdWFsaXR5IGF1ZGlvIG92ZXIgbWljXHJcbiAgICAgICAgaWYgKHVzZU1pYykge1xyXG4gICAgICAgICAgICB0ZW1wID0gdGVtcC5yZXBsYWNlKCd1c2VpbmJhbmRmZWM9MScsICd1c2VpbmJhbmRmZWM9MTtzcHJvcC1tYXhjYXB0dXJlcmF0ZT00ODAwMDttYXhhdmVyYWdlYml0cmF0ZT01MTAwMDAnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0ZW1wO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBSZW1vdGUgRGVzY3JpcHRvciBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyIHRvIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uIFxyXG4gICAgICogQHBhcmFtIHNkcEFuc3dlciAtIFJUQyBTZXNzaW9uIERlc2NyaXB0b3IgZnJvbSB0aGUgU2lnbmFsaW5nIFNlcnZlclxyXG4gICAgICovXHJcbiAgICBoYW5kbGVBbnN3ZXIoc2RwQW5zd2VyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihzZHBBbnN3ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBhIEljZSBDYW5kaWRhdGUgaXMgcmVjZWl2ZWQgYWRkIHRvIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uIFxyXG4gICAgICogQHBhcmFtIGljZUNhbmRpZGF0ZSAtIFJUQyBJY2UgQ2FuZGlkYXRlIGZyb20gdGhlIFNpZ25hbGluZyBTZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25JY2UoaWNlQ2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGUpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwicGVlcmNvbm5lY3Rpb24gaGFuZGxlT25JY2VcIiwgNik7XHJcblxyXG4gICAgICAgIC8vIC8vIGlmIGZvcmNpbmcgVFVSTiwgcmVqZWN0IGFueSBjYW5kaWRhdGVzIG5vdCByZWxheVxyXG4gICAgICAgIGlmICh0aGlzLmZvcmNlVHVybikge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBubyByZWxheSBhZGRyZXNzIGlzIGZvdW5kLCBpZiBzbywgd2UgYXJlIGFzc3VtaW5nIGl0IG1lYW5zIG5vIFRVUk4gc2VydmVyXHJcbiAgICAgICAgICAgIGlmIChpY2VDYW5kaWRhdGUuY2FuZGlkYXRlLmluZGV4T2YoXCJyZWxheVwiKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5JbmZvKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBEcm9wcGluZyBjYW5kaWRhdGUgYmVjYXVzZSBpdCB3YXMgbm90IFRVUk4gcmVsYXkuIHwgVHlwZT0gJHtpY2VDYW5kaWRhdGUudHlwZX0gfCBQcm90b2NvbD0gJHtpY2VDYW5kaWRhdGUucHJvdG9jb2x9IHwgQWRkcmVzcz0ke2ljZUNhbmRpZGF0ZS5hZGRyZXNzfSB8IFBvcnQ9JHtpY2VDYW5kaWRhdGUucG9ydH0gfGAsIDYpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvbiBTaWduYWxpbmcgc2VydmVyIHN0YXRlIENoYW5nZXNcclxuICAgICAqIEBwYXJhbSBzdGF0ZSAtIFNpZ25hbGluZyBTZXJ2ZXIgU3RhdGUgQ2hhbmdlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVNpZ25hbFN0YXRlQ2hhbmdlKHN0YXRlOiBFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3NpZ25hbGluZyBzdGF0ZSBjaGFuZ2U6ICcgKyBzdGF0ZSwgNik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgd2hlbiB0aGUgSWNlIENvbm5lY3Rpb24gU3RhdGUgQ2hhbmdlc1xyXG4gICAgICogQHBhcmFtIHN0YXRlIC0gSWNlIENvbm5lY3Rpb24gU3RhdGVcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKHN0YXRlOiBFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ2ljZSBjb25uZWN0aW9uIHN0YXRlIGNoYW5nZTogJyArIHN0YXRlLCA2KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB3aGVuIHRoZSBJY2UgR2F0aGVyaW5nIFN0YXRlIENoYW5nZXNcclxuICAgICAqIEBwYXJhbSBzdGF0ZSAtIEljZSBHYXRoZXJpbmcgU3RhdGUgQ2hhbmdlXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUljZUdhdGhlcmluZ1N0YXRlQ2hhbmdlKHN0YXRlOiBFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ2ljZSBnYXRoZXJpbmcgc3RhdGUgY2hhbmdlOiAnICsgSlNPTi5zdHJpbmdpZnkoc3RhdGUpLCA2KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2YXRlcyB0aGUgb25UcmFjayBtZXRob2RcclxuICAgICAqIEBwYXJhbSBldmVudCAtIFRoZSB3ZWJSdGMgdHJhY2sgZXZlbnQgXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uVHJhY2soZXZlbnQ6IFJUQ1RyYWNrRXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uVHJhY2soZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZhdGVzIHRoZSBvblBlZXJJY2VDYW5kaWRhdGUgXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgcGVlciBpY2UgY2FuZGlkYXRlXHJcbiAgICAgKi9cclxuICAgIGhhbmRlbEljZUNhbmRpZGF0ZShldmVudDogUlRDUGVlckNvbm5lY3Rpb25JY2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMub25QZWVySWNlQ2FuZGlkYXRlKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3Igb25UcmFjayBmb3IgdXNlIG91dHNpZGUgb2YgdGhlIFBlZXJDb25uZWN0aW9uQ29udHJvbGxlclxyXG4gICAgICogQHBhcmFtIHRyYWNrRXZlbnQgLSBUaGUgd2ViUnRjIHRyYWNrIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIG9uVHJhY2sodHJhY2tFdmVudDogUlRDVHJhY2tFdmVudCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIG9uUGVlckljZUNhbmRpZGF0ZSBmb3IgdXNlIG91dHNpZGUgb2YgdGhlIFBlZXJDb25uZWN0aW9uQ29udHJvbGxlclxyXG4gICAgICogQHBhcmFtIHBlZXJDb25uZWN0aW9uSWNlRXZlbnQgLSBUaGUgcGVlciBpY2UgY2FuZGlkYXRlXHJcbiAgICAgKi9cclxuICAgIG9uUGVlckljZUNhbmRpZGF0ZShwZWVyQ29ubmVjdGlvbkljZUV2ZW50OiBSVENQZWVyQ29ubmVjdGlvbkljZUV2ZW50KSB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR1cCB0cmFja3Mgb24gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb24gXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHNldHVwVHJhY2tzVG9TZW5kQXN5bmModXNlTWljOiBib29sZWFuKSB7XHJcblxyXG4gICAgICAgIGxldCBoYXNUcmFuc2NlaXZlcnMgPSB0aGlzLnBlZXJDb25uZWN0aW9uLmdldFRyYW5zY2VpdmVycygpLmxlbmd0aCA+IDA7XHJcblxyXG4gICAgICAgIC8vIFNldHVwIGEgdHJhbnNjZWl2ZXIgZm9yIGdldHRpbmcgVUUgdmlkZW9cclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZFRyYW5zY2VpdmVyKFwidmlkZW9cIiwgeyBkaXJlY3Rpb246IFwicmVjdm9ubHlcIiB9KTtcclxuXHJcbiAgICAgICAgLy8gU2V0dXAgYSB0cmFuc2NlaXZlciBmb3Igc2VuZGluZyBtaWMgYXVkaW8gdG8gVUUgYW5kIHJlY2VpdmluZyBhdWRpbyBmcm9tIFVFXHJcbiAgICAgICAgaWYgKCF1c2VNaWMpIHtcclxuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5hZGRUcmFuc2NlaXZlcihcImF1ZGlvXCIsIHsgZGlyZWN0aW9uOiBcInJlY3Zvbmx5XCIgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHRoZSBhdWRpbyBvcHRpb25zIGJhc2VkIG9uIG1pYyB1c2FnZVxyXG4gICAgICAgICAgICBsZXQgYXVkaW9PcHRpb25zID0gdXNlTWljID9cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBhdXRvR2FpbkNvbnRyb2w6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxDb3VudDogMSxcclxuICAgICAgICAgICAgICAgICAgICBlY2hvQ2FuY2VsbGF0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBsYXRlbmN5OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vaXNlU3VwcHJlc3Npb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZVJhdGU6IDQ4MDAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZVNpemU6IDE2LFxyXG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZTogMS4wXHJcbiAgICAgICAgICAgICAgICB9IDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIG1lZGlhIHNlbmQgb3B0aW9ucyBcclxuICAgICAgICAgICAgbGV0IG1lZGlhU2VuZE9wdGlvbnM6IE1lZGlhU3RyZWFtQ29uc3RyYWludHMgPSB7XHJcbiAgICAgICAgICAgICAgICB2aWRlbzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhdWRpbzogYXVkaW9PcHRpb25zLFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBOb3RlIHVzaW5nIG1pYyBvbiBhbmRyb2lkIGNocm9tZSByZXF1aXJlcyBTU0wgb3IgY2hyb21lOi8vZmxhZ3MvIFwidW5zYWZlbHktdHJlYXQtaW5zZWN1cmUtb3JpZ2luLWFzLXNlY3VyZVwiXHJcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKG1lZGlhU2VuZE9wdGlvbnMpO1xyXG4gICAgICAgICAgICBpZiAoc3RyZWFtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzVHJhbnNjZWl2ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdHJhbnNjZWl2ZXIgb2YgdGhpcy5wZWVyQ29ubmVjdGlvbi5nZXRUcmFuc2NlaXZlcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNjZWl2ZXIgJiYgdHJhbnNjZWl2ZXIucmVjZWl2ZXIgJiYgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sgJiYgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sua2luZCA9PT0gXCJhdWRpb1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYWNrIG9mIHN0cmVhbS5nZXRUcmFja3MoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFjay5raW5kICYmIHRyYWNrLmtpbmQgPT0gXCJhdWRpb1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRlci5yZXBsYWNlVHJhY2sodHJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5kaXJlY3Rpb24gPSBcInNlbmRyZWN2XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiBzdHJlYW0uZ2V0VHJhY2tzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLmtpbmQgJiYgdHJhY2sua2luZCA9PSBcImF1ZGlvXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24uYWRkVHJhbnNjZWl2ZXIodHJhY2ssIHsgZGlyZWN0aW9uOiBcInNlbmRyZWN2XCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZFRyYW5zY2VpdmVyKFwiYXVkaW9cIiwgeyBkaXJlY3Rpb246IFwicmVjdm9ubHlcIiB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuZCBvdmVycmlkZSBldmVudCBmb3Igd2hlbiB0aGUgdmlkZW8gc3RhdHMgYXJlIGZpcmVkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBBZ2dyZWdhdGVkIFN0YXRzXHJcbiAgICAgKi9cclxuICAgIG9uVmlkZW9TdGF0cyhldmVudDogQWdncmVnYXRlZFN0YXRzKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IHRvIHNlbmQgdGhlIFJUQyBvZmZlciB0byB0aGUgU2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICogQHBhcmFtIG9mZmVyIC0gUlRDIE9mZmVyXHJcbiAgICAgKi9cclxuICAgIG9uU2VuZFdlYlJUQ09mZmVyKG9mZmVyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIGZvciBzaG93aW5nIHRoZSBQZWVyIGNvbm5lY3Rpb24gY29ubmVjdGluZyBPdmVybGF5XHJcbiAgICAgKi9cclxuICAgIHNob3dUZXh0T3ZlcmxheUNvbm5lY3RpbmcoKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIGZvciBzaG93aW5nIHRoZSBQZWVyIGNvbm5lY3Rpb24gRmFpbGVkIG92ZXJsYXlcclxuICAgICAqL1xyXG4gICAgc2hvd1RleHRPdmVybGF5U2V0dXBGYWlsdXJlKCkgeyB9XHJcbn1cclxuIiwiLyoqIFxyXG4gKiBDbGFzcyB0byBob2xkIHRoZSBzdHJlYW0gc3RhdHMgZGF0YSBjb21pbmcgaW4gZnJvbSB3ZWJSdGNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJlYW1TdGF0cyB7XHJcbiAgICBpZDogc3RyaW5nXHJcbiAgICBzdHJlYW1JZGVudGlmaWVyOiBzdHJpbmdcclxuICAgIHRpbWVzdGFtcDogbnVtYmVyXHJcbiAgICB0cmFja0lkczogc3RyaW5nW11cclxufSIsImltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgVWVNZXNzYWdlVHlwZSB9IGZyb20gXCIuL1VlTWVzc2FnZVR5cGVzXCI7XHJcbmltcG9ydCB7IFVlRGVzY3JpcHRvciB9IGZyb20gXCIuL1VlRGVzY3JpcHRvclwiO1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgU2VuZGluZyBjb250cm9sIG1lc3NhZ2VzIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFVlQ29udHJvbE1lc3NhZ2UgZXh0ZW5kcyBVZURlc2NyaXB0b3Ige1xyXG5cclxuXHQvKipcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gZGF0YUNoYW5uZWxDb250cm9sbGVyIC0gRGF0YSBDaGFubmVsIENvbnRyb2xsZXJcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcikge1xyXG5cdFx0c3VwZXIoZGF0YUNoYW5uZWxDb250cm9sbGVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNlbmQgSUZyYW1lIFJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlXHJcblx0ICovXHJcblx0U2VuZElGcmFtZVJlcXVlc3QoKSB7XHJcblx0XHRsZXQgcGF5bG9hZCA9IG5ldyBVaW50OEFycmF5KFtVZU1lc3NhZ2VUeXBlLmlGcmFtZVJlcXVlc3RdKTtcclxuXHRcdHRoaXMuc2VuZERhdGEocGF5bG9hZC5idWZmZXIpO1xyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNlbmQgUmVxdWVzdCB0byBUYWtlIFF1YWxpdHkgQ29udHJvbCB0byB0aGUgVUUgSW5zdGFuY2VcclxuXHQgKi9cclxuXHRTZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sKCkge1xyXG5cdFx0bGV0IHBheWxvYWQgPSBuZXcgVWludDhBcnJheShbVWVNZXNzYWdlVHlwZS5yZXF1ZXN0UXVhbGl0eUNvbnRyb2xdKTtcclxuXHRcdHRoaXMuc2VuZERhdGEocGF5bG9hZC5idWZmZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2VuZCBNYXggRlBTIFJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlXHJcblx0ICovXHJcblx0U2VuZE1heEZwc1JlcXVlc3QoKSB7XHJcblx0XHRsZXQgcGF5bG9hZCA9IG5ldyBVaW50OEFycmF5KFtVZU1lc3NhZ2VUeXBlLm1heEZwc1JlcXVlc3RdKTtcclxuXHRcdHRoaXMuc2VuZERhdGEocGF5bG9hZC5idWZmZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2VuZCBBdmVyYWdlIEJpdHJhdGUgUmVxdWVzdCB0byB0aGUgVUUgSW5zdGFuY2VcclxuXHQgKi9cclxuXHRTZW5kQXZlcmFnZUJpdHJhdGVSZXF1ZXN0KCkge1xyXG5cdFx0bGV0IHBheWxvYWQgPSBuZXcgVWludDhBcnJheShbVWVNZXNzYWdlVHlwZS5hdmVyYWdlQml0cmF0ZVJlcXVlc3RdKTtcclxuXHRcdHRoaXMuc2VuZERhdGEocGF5bG9hZC5idWZmZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2VuZCBhIFN0YXJ0IFN0cmVhbWluZyBNZXNzYWdlIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG5cdCAqL1xyXG5cdFNlbmRTdGFydFN0cmVhbWluZygpIHtcclxuXHRcdGxldCBwYXlsb2FkID0gbmV3IFVpbnQ4QXJyYXkoW1VlTWVzc2FnZVR5cGUuc3RhcnRTdHJlYW1pbmddKTtcclxuXHRcdHRoaXMuc2VuZERhdGEocGF5bG9hZC5idWZmZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2VuZCBhIFN0b3AgU3RyZWFtaW5nIE1lc3NhZ2UgdG8gdGhlIFVFIEluc3RhbmNlXHJcblx0ICovXHJcblx0U2VuZFN0b3BTdHJlYW1pbmcoKSB7XHJcblx0XHRsZXQgcGF5bG9hZCA9IG5ldyBVaW50OEFycmF5KFtVZU1lc3NhZ2VUeXBlLnN0b3BTdHJlYW1pbmddKTtcclxuXHRcdHRoaXMuc2VuZERhdGEocGF5bG9hZC5idWZmZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2VuZCBhIExhdGVuY3kgVGVzdCB0byB0aGUgVUUgSW5zdGFuY2VcclxuXHQgKiBAcGFyYW0gU3RhcnRUaW1lTXMgLSBTdGFydCBUaW1lIG9mIHRoZSBMYXRlbmN5IHRlc3RcclxuXHQgKi9cclxuXHRzZW5kTGF0ZW5jeVRlc3QoU3RhcnRUaW1lTXM6IG51bWJlcikge1xyXG5cdFx0bGV0IHBheWxvYWQgPSB7XHJcblx0XHRcdFN0YXJ0VGltZTogU3RhcnRUaW1lTXMsXHJcblx0XHR9O1xyXG5cclxuXHRcdHRoaXMuc2VuZERlc2NyaXB0b3IoVWVNZXNzYWdlVHlwZS5sYXRlbmN5VGVzdCwgSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2VuZCBhIFJlcXVlc3QgSW5pdGlhbCBTZXR0aW5ncyB0byB0aGUgVUUgSW5zdGFuY2VcclxuXHQgKi9cclxuXHRTZW5kUmVxdWVzdEluaXRpYWxTZXR0aW5ncygpIHtcclxuXHRcdGxldCBwYXlsb2FkID0gbmV3IFVpbnQ4QXJyYXkoW1VlTWVzc2FnZVR5cGUucmVxdWVzdEluaXRpYWxTZXR0aW5nc10pO1xyXG5cdFx0dGhpcy5zZW5kRGF0YShwYXlsb2FkLmJ1ZmZlcik7XHJcblx0fVxyXG59IiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgc2VuZGluZyBhIG1lc3NhZ2UgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVWVEYXRhTWVzc2FnZSB7XHJcblxyXG4gICAgZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBkYXRhQ2hhbm5lbENvbnRyb2xsZXIgLSBEYXRhIENoYW5uZWwgQ29udHJvbGxlclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcil7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIgPSBkYXRhQ2hhbm5lbENvbnRyb2xsZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGFuIEFycmF5IEJ1ZmZlciB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBidWZmZXIgLSBNZXNzYWdlIEJ1ZmZlciBBcnJheVxyXG4gICAgICovXHJcbiAgICBzZW5kRGF0YShidWZmZXI6IEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIuc2VuZERhdGEoYnVmZmVyKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuaW1wb3J0IHsgVWVEYXRhTWVzc2FnZSB9IGZyb20gXCIuL1VlRGF0YU1lc3NhZ2VcIjtcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHNlbmRpbmcgYSBEZXNjcmlwdG9yIHRvIHRoZSBVRSBJbnN0YW5jZSBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVZURlc2NyaXB0b3IgZXh0ZW5kcyBVZURhdGFNZXNzYWdlIHtcclxuXHJcbiAgICAvKipcclxuICAgICogQHBhcmFtIGRhdGFjaGFubmVsQ29udHJvbGxlciAtIERhdGEgQ2hhbm5lbCBDb250cm9sbGVyXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGF0YWNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIpIHtcclxuICAgICAgICBzdXBlcihkYXRhY2hhbm5lbENvbnRyb2xsZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIERlc2NyaXB0b3IgdG8gdGhlIFVFIEluc3RhbmNlc1xyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VUeXBlIC0gVUUgTWVzc2FnZSBUeXBlXHJcbiAgICAgKiBAcGFyYW0gSlNPRGVzY3JpcHRvciAtIERlc2NyaXB0b3IgTWVzc2FnZSBhcyBKU09OXHJcbiAgICAgKi9cclxuICAgIHNlbmREZXNjcmlwdG9yKG1lc3NhZ2VUeXBlOiBudW1iZXIsIEpTT0Rlc2NyaXB0b3I6IHN0cmluZykge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJTZW5kaW5nOiBcIiArIEpTT0Rlc2NyaXB0b3IsIDYpO1xyXG4gICAgICAgIC8vIEFkZCB0aGUgVVRGLTE2IEpTT04gc3RyaW5nIHRvIHRoZSBhcnJheSBieXRlIGJ1ZmZlciwgZ29pbmcgdHdvIGJ5dGVzIGF0XHJcbiAgICAgICAgLy8gYSB0aW1lLlxyXG4gICAgICAgIGxldCBkYXRhID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxICsgMiArIDIgKiBKU09EZXNjcmlwdG9yLmxlbmd0aCkpO1xyXG4gICAgICAgIGxldCBieXRlSWR4ID0gMDtcclxuICAgICAgICBkYXRhLnNldFVpbnQ4KGJ5dGVJZHgsIG1lc3NhZ2VUeXBlKTtcclxuICAgICAgICBieXRlSWR4Kys7XHJcbiAgICAgICAgZGF0YS5zZXRVaW50MTYoYnl0ZUlkeCwgSlNPRGVzY3JpcHRvci5sZW5ndGgsIHRydWUpO1xyXG4gICAgICAgIGJ5dGVJZHggKz0gMjtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBKU09EZXNjcmlwdG9yLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRhdGEuc2V0VWludDE2KGJ5dGVJZHgsIEpTT0Rlc2NyaXB0b3IuY2hhckNvZGVBdChpKSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGJ5dGVJZHggKz0gMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2VuZERhdGEoZGF0YS5idWZmZXIpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBVZURlc2NyaXB0b3IgfSBmcm9tIFwiLi9VZURlc2NyaXB0b3JcIjtcclxuaW1wb3J0IHsgVWVNZXNzYWdlVHlwZSB9IGZyb20gXCIuL1VlTWVzc2FnZVR5cGVzXCI7XHJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9Db25maWcvQ29uZmlnXCI7XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgU2VuZGluZyBvZiBhIFVJIERlc2NyaXB0b3IgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVWVEZXNjcmlwdG9yVWkgZXh0ZW5kcyBVZURlc2NyaXB0b3Ige1xyXG5cclxuICAgIGRhdGFDaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyO1xyXG4gICAgY29uZmlnOiBDb25maWc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZGF0YUNoYW5uZWxDb250cm9sbGVyIC0gRGF0YSBDaGFubmVsIENvbnRyb2xsZXJcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGF0YUNoYW5uZWxDb250cm9sbGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIsIGNvbmZpZzogQ29uZmlnKSB7XHJcbiAgICAgICAgc3VwZXIoZGF0YUNoYW5uZWxDb250cm9sbGVyKTtcclxuXHR0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlciA9IGRhdGFDaGFubmVsQ29udHJvbGxlcjtcclxuXHR0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBzZXQgcmVzIFVJIERlc2NyaXB0b3IgdG8gVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB3aWR0aCAtIFdpZHRoIG9mIHJlc1xyXG4gICAgICogQHBhcmFtIGhlaWdodCAtIEhlaWdodCBvZiByZXNcclxuICAgICAqL1xyXG4gICAgc2VuZFVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xyXG5cdGlmICh0aGlzLmNvbmZpZy5pc01vYmlsZSkge1xyXG5cdFx0d2lkdGggKj0gMjtcclxuXHRcdGhlaWdodCAqPSAyO1xyXG5cdH1cclxuXHRjb25zdCBzID0gSlNPTi5zdHJpbmdpZnkoe1xyXG5cdFx0XCJSZXNvbHV0aW9uLldpZHRoXCI6IHdpZHRoLFxyXG5cdFx0XCJSZXNvbHV0aW9uLkhlaWdodFwiOiBoZWlnaHRcclxuXHR9KTtcclxuXHRjb25zdCBuID0ge1xyXG5cdFx0aWQ6IDUxXHJcblx0fTtcclxuXHRjb25zdCByID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigzICsgMiAqIHMubGVuZ3RoKSk7XHJcblx0bGV0IG8gPSAwO1xyXG5cdHIuc2V0VWludDgobywgbi5pZCksIG8rKywgci5zZXRVaW50MTYobywgcy5sZW5ndGgsICEwKSwgbyArPSAyO1xyXG5cdGZvciAobGV0IGUgPSAwOyBlIDwgcy5sZW5ndGg7IGUrKykge1xyXG5cdFx0ci5zZXRVaW50MTYobywgcy5jaGFyQ29kZUF0KGUpLCAhMCk7XHJcblx0XHRvICs9IDI7XHJcblx0fVxyXG5cdHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLnNlbmREYXRhKHIuYnVmZmVyKTtcdFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIHN0YXQgZnBzIFVJIERlc2NyaXB0b3IgdG8gVUUgSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgc2VuZFNob3dGcHMoKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oXCJzdGF0IGZwc1wiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBFbmNvZGVyIFJhdGUgQ29udHJvbCB0byBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHJhdGVDb250cm9sIC0gUmF0ZSBDb250cm9sIFwiQ0JSXCIgfCBcIlZCUlwiIHwgXCJDb25zdFFQXCIgXHJcbiAgICAgKi9cclxuICAgIHNlbmRFbmNvZGVyUmF0ZUNvbnRyb2wocmF0ZUNvbnRyb2w6IFwiQ0JSXCIgfCBcIlZCUlwiIHwgXCJDb25zdFFQXCIpIHtcclxuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLkVuY29kZXIuUmF0ZUNvbnRyb2wgXCIgKyByYXRlQ29udHJvbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIEVuY29kZXIgVGFyZ2V0IEJpdCBSYXRlIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHRhcmdldEJpdFJhdGUgLSBTZW5kIGEgVGFyZ2V0IEJpdCBSYXRlXHJcbiAgICAgKi9cclxuICAgIHNlbmRFbmNvZGVyVGFyZ2V0Qml0UmF0ZSh0YXJnZXRCaXRSYXRlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLkVuY29kZXIuVGFyZ2V0Qml0cmF0ZSBcIiArICh0YXJnZXRCaXRSYXRlID4gMCA/IHRhcmdldEJpdFJhdGUgOiAtMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBFbmNvZGVyIE1heCBCaXQgUmF0ZSBWQlIgdG8gVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtYXhCaXRSYXRlIC0gU2VuZCBBIE1heCBCaXQgUmF0ZVxyXG4gICAgICovXHJcbiAgICBzZW5kRW5jb2Rlck1heEJpdHJhdGVWYnIobWF4Qml0UmF0ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oXCJQaXhlbFN0cmVhbWluZy5FbmNvZGVyLk1heEJpdHJhdGVWQlIgXCIgKyAobWF4Qml0UmF0ZSA+IDAgPyBtYXhCaXRSYXRlIDogMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgTWluaW11bSBRdWFudGl6YXRpb24gUGFyYW1ldGVyIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1pblFQIC0gTWluaW11bSBRdWFudGl6YXRpb24gUGFyYW1ldGVyIFxyXG4gICAgICovXHJcbiAgICBzZW5kRW5jb2Rlck1pblFQKG1pblFQOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLkVuY29kZXIuTWluUVAgXCIgKyBtaW5RUCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBNYXhpbXVtIFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbWF4UVAgLSBNYXhpbXVtIFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgXHJcbiAgICAgKi9cclxuICAgIHNlbmRFbmNvZGVyTWF4UVAobWF4UVA6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc2VuZFVpQ29uc29sZUludGVyYWN0aW9uKFwiUGl4ZWxTdHJlYW1pbmcuRW5jb2Rlci5NYXhRUCBcIiArIG1heFFQKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgRW5hYmxlIEZpbGxlciBEYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGVuYWJsZSAtIFRydWVcclxuICAgICAqL1xyXG4gICAgc2VuZEVuY29kZXJFbmFibGVGaWxsZXJEYXRhKGVuYWJsZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuc2VuZFVpQ29uc29sZUludGVyYWN0aW9uKFwiUGl4ZWxTdHJlYW1pbmcuRW5jb2Rlci5FbmFibGVGaWxsZXJEYXRhIFwiICsgTnVtYmVyKGVuYWJsZSkudmFsdWVPZigpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgRW5jb2RlciBNdWx0aVBhc3MgdG8gVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtdWx0aVBhc3MgLSBNdWx0aVBhc3MgXCJESVNBQkxFRFwiIHwgXCJRVUFSVEVSXCIgfCBcIkZVTExcIlxyXG4gICAgICovXHJcbiAgICBzZW5kRW5jb2Rlck11bHRpUGFzcyhtdWx0aVBhc3M6IFwiRElTQUJMRURcIiB8IFwiUVVBUlRFUlwiIHwgXCJGVUxMXCIpIHtcclxuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLkVuY29kZXIuTXVsdGlwYXNzIFwiICsgbXVsdGlQYXNzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBXZWIgUlRDIERlZ3JhZGF0aW9uIFByZWZlcmVuY2UgdG8gVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBEZWdyYWRhdGlvblByZWZlcmVuY2UgLSBEZWdyYWRhdGlvbiBQcmVmZXJlbmNlIFwiQkFMQU5DRURcIiB8IFwiTUFJTlRBSU5fRlJBTUVSQVRFXCIgfCBcIk1BSU5UQUlOX1JFU09MVVRJT05cIlxyXG4gICAgICovXHJcbiAgICBzZW5kV2ViUnRjRGVncmFkYXRpb25QcmVmZXJlbmNlKERlZ3JhZGF0aW9uUHJlZmVyZW5jZTogXCJCQUxBTkNFRFwiIHwgXCJNQUlOVEFJTl9GUkFNRVJBVEVcIiB8IFwiTUFJTlRBSU5fUkVTT0xVVElPTlwiKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oXCJQaXhlbFN0cmVhbWluZy5XZWJSVEMuRGVncmFkYXRpb25QcmVmZXJlbmNlIFwiICsgRGVncmFkYXRpb25QcmVmZXJlbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIHRoZSBNYXggRlBTIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIE1heEZwcyAtIFdlYiBSVEMgTWF4IEZyYW1lcyBQZXIgU2Vjb25kXHJcbiAgICAgKi9cclxuICAgIHNlbmRXZWJSdGNNYXhGcHMoTWF4RnBzOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLldlYlJUQy5NYXhGcHMgXCIgKyBNYXhGcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBTZW5kcyB0aGUgRlBTIHRvIHRoZSBVRSBJbnN0YW5jZSB1c2VkIHVuIFVFIDUuMFxyXG4gICAgKiBAcGFyYW0gRnBzIC0gV2ViIFJUQyBGcmFtZXMgUGVyIFNlY29uZFxyXG4gICAgKi9cclxuICAgIHNlbmRXZWJSdGNGcHMoRnBzOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLldlYlJUQy5GcHMgXCIgKyBGcHMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgdGhlIE1pbmltdW0gYml0IHJhdGUgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gTWluQml0cmF0ZSAtIFdlYiBSVEMgTWluaW11bSBCaXRyYXRlXHJcbiAgICAgKi9cclxuICAgIHNlbmRXZWJSdGNNaW5CaXRyYXRlKE1pbkJpdHJhdGU6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc2VuZFVpQ29uc29sZUludGVyYWN0aW9uKFwiUGl4ZWxTdHJlYW1pbmcuV2ViUlRDLk1pbkJpdHJhdGUgXCIgKyBNaW5CaXRyYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIHRoZSBNYXhpbXVtIGJpdCByYXRlIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIE1heEJpdHJhdGUgLSBXZWIgUlRDIE1heGltdW0gQml0cmF0ZVxyXG4gICAgICovXHJcbiAgICBzZW5kV2ViUnRjTWF4Qml0cmF0ZShNYXhCaXRyYXRlOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLldlYlJUQy5NYXhCaXRyYXRlIFwiICsgTWF4Qml0cmF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyB0aGUgTG93IFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgVGhyZXNob2xkIGxldmVsIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIExvd1FwVGhyZXNob2xkIC0gTG93IFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgVGhyZXNob2xkIExldmVsXHJcbiAgICAgKi9cclxuICAgIHNlbmRXZWJSdGNMb3dRcFRocmVzaG9sZChMb3dRcFRocmVzaG9sZDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kVWlDb25zb2xlSW50ZXJhY3Rpb24oXCJQaXhlbFN0cmVhbWluZy5XZWJSVEMuTG93UXBUaHJlc2hvbGQgXCIgKyBMb3dRcFRocmVzaG9sZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyB0aGUgSGlnaCBRdWFudGl6YXRpb24gUGFyYW1ldGVyIFRocmVzaG9sZCBsZXZlbCB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBIaWdoUXBUaHJlc2hvbGQgLSBIaWdoIFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgVGhyZXNob2xkIExldmVsXHJcbiAgICAgKi9cclxuICAgIHNlbmRXZWJSdGNIaWdoUXBUaHJlc2hvbGQoSGlnaFFwVGhyZXNob2xkOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnNlbmRVaUNvbnNvbGVJbnRlcmFjdGlvbihcIlBpeGVsU3RyZWFtaW5nLldlYlJUQy5IaWdoUXBUaHJlc2hvbGQgXCIgKyBIaWdoUXBUaHJlc2hvbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgYSBkZXNjcmlwdG9yIHN0cmluZyB0byB0aGUgVUUgSW50ZXJhY3Rpb24gSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBkZXNjcmlwdG9yIC0gdGhlIFN0cmluZyBkZXNjcmlwdG9yIHRvIHNlbmRcclxuICAgICAqL1xyXG4gICAgc2VuZFVpSW50ZXJhY3Rpb24oZGVzY3JpcHRvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvcihVZU1lc3NhZ2VUeXBlLnVpSW50ZXJhY3Rpb24sIGRlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2VuZHMgYSBjb25zb2xlIGRlc2NyaXB0b3JcclxuICAgICAqIEBwYXJhbSBkZXNjcmlwdG9yIC0gVGhlIHN0cmluZyBkZXNjcmlwdG9yIHRvIHNlbmRcclxuICAgICAqL1xyXG4gICAgc2VuZFVpQ29uc29sZUludGVyYWN0aW9uKGRlc2NyaXB0b3I6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBwYXlsb2FkID0ge1xyXG4gICAgICAgICAgICBDb25zb2xlOiBkZXNjcmlwdG9yXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2VuZFVpSW50ZXJhY3Rpb24oSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbmRDb21tYW5kKHBheWxvYWQ6IFJlY29yZDxzdHJpbmcsIGFueT4pIHtcclxuXHR0aGlzLnNlbmRVaUludGVyYWN0aW9uKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBVZURhdGFNZXNzYWdlIH0gZnJvbSBcIi4vVWVEYXRhTWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBVZU1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vVWVNZXNzYWdlVHlwZXNcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgY2xhc3MgZm9yIGhhbmRsaW5nIFVFIElucHV0IEdhbWVQYWQgTWVzc2FnZXMuIEl0IGltcGxlbWVudHMgdGhlIFVlRGF0YU1lc3NhZ2UgY2xhc3NcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVZUlucHV0R2FtZVBhZE1lc3NhZ2UgZXh0ZW5kcyBVZURhdGFNZXNzYWdlIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGRhdGFjaGFubmVsQ29udHJvbGxlciAtIERhdGEgQ2hhbm5lbCBDb250cm9sbGVyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGRhdGFjaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyKSB7XHJcbiAgICAgICAgc3VwZXIoZGF0YWNoYW5uZWxDb250cm9sbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIGNvbnRyb2xsZXIgYnV0dG9uIHByZXNzIGRhdGEgdGhyb3VnaCB0aGUgZGF0YSBjaGFubmVsIFxyXG4gICAgICogQHBhcmFtIGNvbnRyb2xsZXJJbmRleCAtIHRoZSBjb250cm9sbGVyIGluZGV4IG51bWJlciBcclxuICAgICAqIEBwYXJhbSBidXR0b25JbmRleCAtIHRoZSBidXR0b24gaW5kZXggbnVtYmVyXHJcbiAgICAgKiBAcGFyYW0gaXNSZXBlYXQgLSBpcyB0aGlzIGEgcmVwZWF0IHByZXNzIFxyXG4gICAgICovXHJcbiAgICBzZW5kQ29udHJvbGxlckJ1dHRvblByZXNzZWQoY29udHJvbGxlckluZGV4OiBudW1iZXIsIGJ1dHRvbkluZGV4OiBudW1iZXIsIGlzUmVwZWF0OiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IERhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDQpKTtcclxuICAgICAgICBEYXRhLnNldFVpbnQ4KDAsIFVlTWVzc2FnZVR5cGUuZ2FtZXBhZEJ1dHRvblByZXNzZWQpO1xyXG4gICAgICAgIERhdGEuc2V0VWludDgoMSwgY29udHJvbGxlckluZGV4KTtcclxuICAgICAgICBEYXRhLnNldFVpbnQ4KDIsIGJ1dHRvbkluZGV4KTtcclxuICAgICAgICBEYXRhLnNldFVpbnQ4KDMsIE51bWJlcihpc1JlcGVhdCkudmFsdWVPZigpKTtcclxuICAgICAgICB0aGlzLnNlbmREYXRhKERhdGEuYnVmZmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIGNvbnRyb2xsZXIgYnV0dG9uIHJlbGVhc2UgZGF0YSB0aHJvdWdoIHRoZSBkYXRhIGNoYW5uZWwgXHJcbiAgICAgKiBAcGFyYW0gY29udHJvbGxlckluZGV4IC0gdGhlIGNvbnRyb2xsZXIgaW5kZXggbnVtYmVyIFxyXG4gICAgICogQHBhcmFtIGJ1dHRvbkluZGV4ICAtIHRoZSBidXR0b24gaW5kZXggbnVtYmVyXHJcbiAgICAgKi9cclxuICAgIHNlbmRDb250cm9sbGVyQnV0dG9uUmVsZWFzZWQoY29udHJvbGxlckluZGV4OiBudW1iZXIsIGJ1dHRvbkluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgRGF0YSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMykpO1xyXG4gICAgICAgIERhdGEuc2V0VWludDgoMCwgVWVNZXNzYWdlVHlwZS5nYW1lcGFkQnV0dG9uUmVsZWFzZWQpO1xyXG4gICAgICAgIERhdGEuc2V0VWludDgoMSwgY29udHJvbGxlckluZGV4KTtcclxuICAgICAgICBEYXRhLnNldFVpbnQ4KDIsIGJ1dHRvbkluZGV4KTtcclxuICAgICAgICB0aGlzLnNlbmREYXRhKERhdGEuYnVmZmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgY29udHJvbGxlciBheGlzIGRhdGEgdGhyb3VnaCB0aGUgZGF0YSBjaGFubmVsIFxyXG4gICAgICogQHBhcmFtIGNvbnRyb2xsZXJJbmRleCAtIHRoZSBjb250cm9sbGVyIGluZGV4IG51bWJlciBcclxuICAgICAqIEBwYXJhbSBheGlzSW5kZXggLSB0aGUgYXhpcyBpbmRleCBudW1iZXIgXHJcbiAgICAgKiBAcGFyYW0gYW5hbG9nVmFsdWUgLSB0aGUgYW5hbG9ndWUgdmFsdWUgbnVtYmVyIFxyXG4gICAgICovXHJcbiAgICBzZW5kQ29udHJvbGxlckF4aXNNb3ZlKGNvbnRyb2xsZXJJbmRleDogbnVtYmVyLCBheGlzSW5kZXg6IG51bWJlciwgYW5hbG9nVmFsdWU6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBEYXRhID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxMSkpO1xyXG4gICAgICAgIERhdGEuc2V0VWludDgoMCwgVWVNZXNzYWdlVHlwZS5nYW1lcGFkQW5hbG9nKTtcclxuICAgICAgICBEYXRhLnNldFVpbnQ4KDEsIGNvbnRyb2xsZXJJbmRleCk7XHJcbiAgICAgICAgRGF0YS5zZXRVaW50OCgyLCBheGlzSW5kZXgpO1xyXG4gICAgICAgIERhdGEuc2V0RmxvYXQ2NCgzLCBhbmFsb2dWYWx1ZSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHRoaXMuc2VuZERhdGEoRGF0YS5idWZmZXIpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG59XHJcbiIsImltcG9ydCB7IERhdGFDaGFubmVsQ29udHJvbGxlciB9IGZyb20gXCIuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgVWVEYXRhTWVzc2FnZSB9IGZyb20gXCIuL1VlRGF0YU1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgVWVNZXNzYWdlVHlwZSB9IGZyb20gXCIuL1VlTWVzc2FnZVR5cGVzXCJcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHNlbmRpbmcgS2V5Ym9hcmQgTWVzc2FnZXMgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVWVJbnB1dEtleWJvYXJkTWVzc2FnZSBleHRlbmRzIFVlRGF0YU1lc3NhZ2V7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBkYXRhY2hhbm5lbENvbnRyb2xsZXIgLSBEYXRhIENoYW5uZWwgQ29udHJvbGxlclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhY2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcil7XHJcbiAgICAgICAgc3VwZXIoZGF0YWNoYW5uZWxDb250cm9sbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIHRoZSBrZXkgZG93biB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBrZXlDb2RlIC0gS2V5IGNvZGVcclxuICAgICAqIEBwYXJhbSBpc1JlcGVhdCAtIElzIHRoZSBrZXkgcmVwZWF0aW5nXHJcbiAgICAgKi9cclxuICAgIHNlbmRLZXlEb3duKGtleUNvZGU6bnVtYmVyLCBpc1JlcGVhdDpib29sZWFuKXtcclxuICAgICAgICBsZXQgUGF5bG9hZCA9IG5ldyBVaW50OEFycmF5KFtVZU1lc3NhZ2VUeXBlLmtleURvd24sIGtleUNvZGUsIE51bWJlcihpc1JlcGVhdCkudmFsdWVPZigpXSk7XHJcbiAgICAgICAgdGhpcy5zZW5kRGF0YShQYXlsb2FkLmJ1ZmZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyB0aGUgS2V5IFVwIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGtleUNvZGUgLSBLZXkgY29kZVxyXG4gICAgICovXHJcbiAgICBzZW5kS2V5VXAoa2V5Q29kZTogbnVtYmVyKXtcclxuICAgICAgICBsZXQgcGF5bG9hZCA9IG5ldyBVaW50OEFycmF5KFtVZU1lc3NhZ2VUeXBlLmtleVVwLCBrZXlDb2RlXSk7XHJcbiAgICAgICAgdGhpcy5zZW5kRGF0YShwYXlsb2FkLmJ1ZmZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyB0aGUga2V5IHByZXNzIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIENoYXJDb2RlIC0gY2hhcmFjdGVyIGNvZGUgb2YgYSBrZXkgcHJlc3NlZFxyXG4gICAgICovXHJcbiAgICBzZW5kS2V5UHJlc3MoQ2hhckNvZGU6bnVtYmVyKXtcclxuICAgICAgICBsZXQgZGF0YSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMykpO1xyXG4gICAgICAgIGRhdGEuc2V0VWludDgoMCwgVWVNZXNzYWdlVHlwZS5rZXlQcmVzcyk7XHJcbiAgICAgICAgZGF0YS5zZXRVaW50MTYoMSwgQ2hhckNvZGUsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuc2VuZERhdGEoZGF0YS5idWZmZXIpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBVZURhdGFNZXNzYWdlIH0gZnJvbSBcIi4vVWVEYXRhTWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBVZU1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vVWVNZXNzYWdlVHlwZXNcIlxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgc2VuZGluZyBNb3VzZSBNZXNzYWdlcyB0byB0aGUgVUUgSW5zdGFuY2VcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVZUlucHV0TW91c2VNZXNzYWdlIGV4dGVuZHMgVWVEYXRhTWVzc2FnZSB7XHJcblxyXG5cdC8qKlxyXG5cdCogQHBhcmFtIGRhdGFjaGFubmVsQ29udHJvbGxlciAtIERhdGEgY2hhbm5lbCBDb250cm9sbGVyXHJcblx0Ki9cclxuXHRjb25zdHJ1Y3RvcihkYXRhY2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcikge1xyXG5cdFx0c3VwZXIoZGF0YWNoYW5uZWxDb250cm9sbGVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNlbmQgTW91c2UgRW50ZXIgdG8gdGhlIFVFIEluc3RhbmNlXHJcblx0ICovXHJcblx0c2VuZE1vdXNlRW50ZXIoKSB7XHJcblx0XHRsZXQgRGF0YSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpO1xyXG5cdFx0RGF0YS5zZXRVaW50OCgwLCBVZU1lc3NhZ2VUeXBlLm1vdXNlRW50ZXIpO1xyXG5cdFx0dGhpcy5zZW5kRGF0YShEYXRhLmJ1ZmZlcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZW5kIE1vdXNlIExlYXZlIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG5cdCAqL1xyXG5cdHNlbmRNb3VzZUxlYXZlKCkge1xyXG5cdFx0bGV0IERhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKTtcclxuXHRcdERhdGEuc2V0VWludDgoMCwgVWVNZXNzYWdlVHlwZS5tb3VzZUxlYXZlKTtcclxuXHRcdHRoaXMuc2VuZERhdGEoRGF0YS5idWZmZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2VuZCBNb3VzZSBEb3duIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG5cdCAqIEBwYXJhbSBidXR0b24gLSBNb3VzZSBCdXR0b24gXHJcblx0ICogQHBhcmFtIFggLSBYIENvb3JkaW5hdGUgVmFsdWUgb2YgbW91c2UgXHJcblx0ICogQHBhcmFtIFkgLSBZIENvb3JkaW5hdGUgVmFsdWUgb2YgbW91c2UgXHJcblx0ICovXHJcblx0c2VuZE1vdXNlRG93bihidXR0b246IG51bWJlciwgWDogbnVtYmVyLCBZOiBudW1iZXIpIHtcclxuXHRcdGxldCBEYXRhID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig2KSk7XHJcblx0XHREYXRhLnNldFVpbnQ4KDAsIFVlTWVzc2FnZVR5cGUubW91c2VEb3duKTtcclxuXHRcdERhdGEuc2V0VWludDgoMSwgYnV0dG9uKTtcclxuXHRcdERhdGEuc2V0VWludDE2KDIsIFgsIHRydWUpO1xyXG5cdFx0RGF0YS5zZXRVaW50MTYoNCwgWSwgdHJ1ZSk7XHJcblx0XHR0aGlzLnNlbmREYXRhKERhdGEuYnVmZmVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNlbmQgTW91c2UgVXAgdG8gdGhlIFVFIEluc3RhbmNlXHJcblx0ICogQHBhcmFtIGJ1dHRvbiAtIE1vdXNlIEJ1dHRvbiBcclxuXHQgKiBAcGFyYW0gWCAtIFggQ29vcmRpbmF0ZSBWYWx1ZSBvZiBtb3VzZSBcclxuXHQgKiBAcGFyYW0gWSAtIFkgQ29vcmRpbmF0ZSBWYWx1ZSBvZiBtb3VzZSBcclxuXHQgKi9cclxuXHRzZW5kTW91c2VVcChidXR0b246IG51bWJlciwgWDogbnVtYmVyLCBZOiBudW1iZXIpIHtcclxuXHRcdGxldCBEYXRhID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcig2KSk7XHJcblx0XHREYXRhLnNldFVpbnQ4KDAsIFVlTWVzc2FnZVR5cGUubW91c2VVcCk7XHJcblx0XHREYXRhLnNldFVpbnQ4KDEsIGJ1dHRvbik7XHJcblx0XHREYXRhLnNldFVpbnQxNigyLCBYLCB0cnVlKTtcclxuXHRcdERhdGEuc2V0VWludDE2KDQsIFksIHRydWUpO1xyXG5cdFx0dGhpcy5zZW5kRGF0YShEYXRhLmJ1ZmZlcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZW5kIE1vdXNlIE1vdmUgdG8gdGhlIFVFIEluc3RhbmNlXHJcblx0ICogQHBhcmFtIG1vdXNlQ29yZFggLSBYIE1vdXNlIENvb3JkaW5hdGVcclxuXHQgKiBAcGFyYW0gbW91c2VDb3JkWSAtIFkgTW91c2UgQ29vcmRpbmF0ZVxyXG5cdCAqIEBwYXJhbSBkZWx0YVggLSBYIE1vdXNlIERlbHRhIENvb3JkaW5hdGVcclxuXHQgKiBAcGFyYW0gZGVsdGFZIC0gWSBNb3VzZSBEZWx0YSBDb29yZGluYXRlXHJcblx0ICovXHJcblx0c2VuZE1vdXNlTW92ZShtb3VzZUNvcmRYOiBudW1iZXIsIG1vdXNlQ29yZFk6IG51bWJlciwgZGVsdGFYOiBudW1iZXIsIGRlbHRhWTogbnVtYmVyKSB7XHJcblx0XHRsZXQgRGF0YSA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoOSkpO1xyXG5cdFx0RGF0YS5zZXRVaW50OCgwLCBVZU1lc3NhZ2VUeXBlLm1vdXNlTW92ZSk7XHJcblx0XHREYXRhLnNldFVpbnQxNigxLCBtb3VzZUNvcmRYLCB0cnVlKTtcclxuXHRcdERhdGEuc2V0VWludDE2KDMsIG1vdXNlQ29yZFksIHRydWUpO1xyXG5cdFx0RGF0YS5zZXRJbnQxNig1LCBkZWx0YVgsIHRydWUpO1xyXG5cdFx0RGF0YS5zZXRJbnQxNig3LCBkZWx0YVksIHRydWUpO1xyXG5cdFx0dGhpcy5zZW5kRGF0YShEYXRhLmJ1ZmZlcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZW5kIE1vdXNlIHdoZWVsIGV2ZW50IHRvIHRoZSBVRSBJbnN0YW5jZVxyXG5cdCAqIEBwYXJhbSBkZWx0YVkgLSBNb3VzZSBXaGVlbCBkZWx0YSBZXHJcblx0ICogQHBhcmFtIFggLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuXHQgKiBAcGFyYW0gWSAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxyXG5cdCAqL1xyXG5cdHNlbmRNb3VzZVdoZWVsKGRlbHRhWTogbnVtYmVyLCBYOiBudW1iZXIsIFk6IG51bWJlcikge1xyXG5cdFx0bGV0IERhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDcpKTtcclxuXHRcdERhdGEuc2V0VWludDgoMCwgVWVNZXNzYWdlVHlwZS5tb3VzZVdoZWVsKTtcclxuXHRcdERhdGEuc2V0SW50MTYoMSwgZGVsdGFZLCB0cnVlKTtcclxuXHRcdERhdGEuc2V0VWludDE2KDMsIFgsIHRydWUpO1xyXG5cdFx0RGF0YS5zZXRVaW50MTYoNSwgWSwgdHJ1ZSk7XHJcblx0XHR0aGlzLnNlbmREYXRhKERhdGEuYnVmZmVyKTtcclxuXHR9XHJcbn1cclxuIiwiaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBOb3JtYWxpc2VBbmRRdWFudGlzZVVuc2lnbmVkIH0gZnJvbSBcIi4uL0lucHV0cy9Db29yZGluYXRlRGF0YVwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xyXG5pbXBvcnQgeyBJVmlkZW9QbGF5ZXIgfSBmcm9tIFwiLi4vVmlkZW9QbGF5ZXIvSVZpZGVvUGxheWVyXCI7XHJcbmltcG9ydCB7IFVlRGF0YU1lc3NhZ2UgfSBmcm9tIFwiLi9VZURhdGFNZXNzYWdlXCI7XHJcbmltcG9ydCB7IFVlTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi9VZU1lc3NhZ2VUeXBlc1wiXHJcblxyXG4vKipcclxuICogSGFuZGxlcyBTZW5kaW5nIFRvdWNoIG1lc3NhZ2VzIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFVlSW5wdXRUb3VjaE1lc3NhZ2UgZXh0ZW5kcyBVZURhdGFNZXNzYWdlIHtcclxuXHJcbiAgICBmaW5nZXJzOiBudW1iZXJbXTtcclxuICAgIGZpbmdlcnNJZHM6IHsgW2tleTogbnVtYmVyXTogbnVtYmVyIH07XHJcblxyXG4gICAgcmVhZG9ubHkgdW5zaWduZWRPdXRPZlJhbmdlOiBudW1iZXIgPSA2NTUzNTtcclxuICAgIHJlYWRvbmx5IHNpZ25lZE91dE9mUmFuZ2U6IG51bWJlciA9IDMyNzY3O1xyXG5cclxuICAgIHByaW50SW5wdXRzOiBib29sZWFuO1xyXG5cclxuICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBJVmlkZW9QbGF5ZXI7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGRhdGFjaGFubmVsQ29udHJvbGxlciAtIERhdGEgY2hhbm5lbCBDb250cm9sbGVyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGRhdGFjaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyLCB2aWRlb0VsZW1lbnRQcm92aWRlcjogSVZpZGVvUGxheWVyKSB7XHJcbiAgICAgICAgc3VwZXIoZGF0YWNoYW5uZWxDb250cm9sbGVyKTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyID0gdmlkZW9FbGVtZW50UHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5maW5nZXJzSWRzID0ge31cclxuICAgICAgICB0aGlzLmZpbmdlcnMgPSBbOSwgOCwgNywgNiwgNSwgNCwgMywgMiwgMSwgMF07XHJcbiAgICAgICAgdGhpcy5wcmludElucHV0cyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBUb3VjaCBldmVudCBTdGFydFxyXG4gICAgICogQHBhcmFtIHRvdWNoZXMgLSBUb3VjaCBMaXN0XHJcbiAgICAgKi9cclxuICAgIHNlbmRUb3VjaFN0YXJ0KHRvdWNoZXM6IFRvdWNoTGlzdCkge1xyXG4gICAgICAgIHRoaXMuc2VuZFRvdWNoKFVlTWVzc2FnZVR5cGUudG91Y2hTdGFydCwgdG91Y2hlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIFRvdWNoIGV2ZW50IEVuZFxyXG4gICAgICogQHBhcmFtIHRvdWNoZXMgLSBUb3VjaCBMaXN0XHJcbiAgICAgKi9cclxuICAgIHNlbmRUb3VjaEVuZCh0b3VjaGVzOiBUb3VjaExpc3QpIHtcclxuICAgICAgICB0aGlzLnNlbmRUb3VjaChVZU1lc3NhZ2VUeXBlLnRvdWNoRW5kLCB0b3VjaGVzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgVG91Y2ggZXZlbnQgTW92ZVxyXG4gICAgICogQHBhcmFtIHRvdWNoZXMgLSBUb3VjaCBMaXN0XHJcbiAgICAgKi9cclxuICAgIHNlbmRUb3VjaE1vdmUodG91Y2hlczogVG91Y2hMaXN0KSB7XHJcbiAgICAgICAgdGhpcy5zZW5kVG91Y2goVWVNZXNzYWdlVHlwZS50b3VjaE1vdmUsIHRvdWNoZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBTZW5kaW5nIHRoZSBUb3VjaCBFdmVudCB0byB0aGUgVUUgSW5zdGFuY2UgdmlhIHRoZSBEYXRhIGNoYW5uZWxcclxuICAgICAqIEBwYXJhbSB0b3VjaGVzIC0gVG91Y2ggTGlzdFxyXG4gICAgICovXHJcbiAgICBzZW5kVG91Y2godG91Y2hUeXBlOiBudW1iZXIsIHRvdWNoZXM6IFRvdWNoTGlzdCkge1xyXG4gICAgICAgIGxldCBkYXRhID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigyICsgNyAqIHRvdWNoZXMubGVuZ3RoKSk7XHJcbiAgICAgICAgZGF0YS5zZXRVaW50OCgwLCB0b3VjaFR5cGUpO1xyXG4gICAgICAgIGRhdGEuc2V0VWludDgoMSwgdG91Y2hlcy5sZW5ndGgpO1xyXG4gICAgICAgIGxldCBieXRlID0gMjtcclxuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRvdWNoZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgbGV0IHRvdWNoID0gdG91Y2hlc1t0XTtcclxuLy9cdCAgICBsZXQgb2Zmc2V0TGVmdCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuLy8gICAgICAgICAgbGV0IG9mZnNldFRvcCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xyXG4gICAgICAgICAgICBsZXQgeCA9IHRvdWNoLmNsaWVudFg7XHJcbiAgICAgICAgICAgIGxldCB5ID0gdG91Y2guY2xpZW50WTtcclxuXHJcblx0ICAgIGlmICh0b3VjaFR5cGUgPT09IFVlTWVzc2FnZVR5cGUudG91Y2hNb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICB4IC09IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdFxyXG4gICAgICAgICAgICAgICAgeSAtPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCBjb29yZCA9IHRoaXMubm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZCh4LCB5KTtcclxuXHQgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIlg6IFwiICsgeCArIFwiIFk6IFwiICsgeSwgNik7XHJcbiAgICAgICAgICAgIC8vICAgICAgYnl0ZSA9ICAyXHJcbiAgICAgICAgICAgIGRhdGEuc2V0VWludDE2KGJ5dGUsIGNvb3JkLngsIHRydWUpO1xyXG4gICAgICAgICAgICBieXRlICs9IDI7XHJcbiAgICAgICAgICAgIC8vICAgICAgYnl0ZSA9ICA0XHJcbiAgICAgICAgICAgIGRhdGEuc2V0VWludDE2KGJ5dGUsIGNvb3JkLnksIHRydWUpO1xyXG4gICAgICAgICAgICBieXRlICs9IDI7XHJcbiAgICAgICAgICAgIC8vICAgICAgYnl0ZSA9ICA2XHJcbiAgICAgICAgICAgIGRhdGEuc2V0VWludDgoYnl0ZSwgdGhpcy5maW5nZXJzSWRzW3RvdWNoLmlkZW50aWZpZXJdKTtcclxuICAgICAgICAgICAgYnl0ZSArPSAxO1xyXG4gICAgICAgICAgICAvLyAgICAgIGJ5dGUgPSAgN1xyXG4gICAgICAgICAgICBkYXRhLnNldFVpbnQ4KGJ5dGUsIDI1NSAqIHRvdWNoLmZvcmNlKTsgICAvLyBmb3JjZSBpcyBiZXR3ZWVuIDAuMCBhbmQgMS4wIHNvIHF1YW50aXplIGludG8gYnl0ZS5cclxuICAgICAgICAgICAgYnl0ZSArPSAxO1xyXG4gICAgICAgICAgICAvLyAgICAgIGJ5dGUgPSAgOFxyXG4gICAgICAgICAgICBkYXRhLnNldFVpbnQ4KGJ5dGUsIGNvb3JkLmluUmFuZ2UgPyAxIDogMCk7IC8vIG1hcmsgdGhlIHRvdWNoIGFzIGluIHRoZSBwbGF5ZXIgb3Igbm90XHJcbiAgICAgICAgICAgIGJ5dGUgKz0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZW5kRGF0YShkYXRhLmJ1ZmZlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUTyBET1xyXG4gICAgICogQHBhcmFtIHggLSBYIENvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSB5IC0gWSBDb29yZGluYXRlXHJcbiAgICAgKiBAcmV0dXJucyAtIE5vcm1hbGlzZWQgYW5kIFF1YW50aXNlZCBVbnNpZ25lZCB2YWx1ZXNcclxuICAgICAqL1xyXG4gICAgbm9ybWFsaXNlQW5kUXVhbnRpc2VVbnNpZ25lZCh4OiBudW1iZXIsIHk6IG51bWJlcik6IE5vcm1hbGlzZUFuZFF1YW50aXNlVW5zaWduZWQge1xyXG4gICAgICAgIGxldCByb290RGl2ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICBsZXQgdmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb0VsZW1lbnQoKTtcclxuXHJcbiAgICAgICAgaWYgKHJvb3REaXYgJiYgdmlkZW9FbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGxldCBwbGF5ZXJBc3BlY3RSYXRpbyA9IHJvb3REaXYuY2xpZW50SGVpZ2h0IC8gcm9vdERpdi5jbGllbnRXaWR0aDtcclxuICAgICAgICAgICAgbGV0IHZpZGVvQXNwZWN0UmF0aW8gPSB2aWRlb0VsZW1lbnQudmlkZW9IZWlnaHQgLyB2aWRlb0VsZW1lbnQudmlkZW9XaWR0aDtcclxuXHJcbiAgICAgICAgICAgIC8vIFVuc2lnbmVkIFhZIHBvc2l0aW9ucyBhcmUgdGhlIHJhdGlvICgwLjAuLjEuMCkgYWxvbmcgYSB2aWV3cG9ydCBheGlzLFxyXG4gICAgICAgICAgICAvLyBxdWFudGl6ZWQgaW50byBhbiB1aW50MTYgKDAuLjY1NTM2KS5cclxuICAgICAgICAgICAgLy8gU2lnbmVkIFhZIGRlbHRhcyBhcmUgdGhlIHJhdGlvICgtMS4wLi4xLjApIGFsb25nIGEgdmlld3BvcnQgYXhpcyxcclxuICAgICAgICAgICAgLy8gcXVhbnRpemVkIGludG8gYW4gaW50MTYgKC0zMjc2Ny4uMzI3NjcpLlxyXG4gICAgICAgICAgICAvLyBUaGlzIGFsbG93cyB0aGUgYnJvd3NlciB2aWV3cG9ydCBhbmQgY2xpZW50IHZpZXdwb3J0IHRvIGhhdmUgYSBkaWZmZXJlbnRcclxuICAgICAgICAgICAgLy8gc2l6ZS5cclxuICAgICAgICAgICAgLy8gSGFjazogQ3VycmVudGx5IHdlIHNldCBhbiBvdXQtb2YtcmFuZ2UgcG9zaXRpb24gdG8gYW4gZXh0cmVtZSAoNjU1MzUpXHJcbiAgICAgICAgICAgIC8vIGFzIHdlIGNhbid0IHlldCBhY2N1cmF0ZWx5IGRldGVjdCBtb3VzZSBlbnRlciBhbmQgbGVhdmUgZXZlbnRzXHJcbiAgICAgICAgICAgIC8vIHByZWNpc2VseSBpbnNpZGUgYSB2aWRlbyB3aXRoIGFuIGFzcGVjdCByYXRpbyB3aGljaCBjYXVzZXMgbWF0dGVzLlxyXG4gICAgICAgICAgICBpZiAocGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHJhdGlvID0gcGxheWVyQXNwZWN0UmF0aW8gLyB2aWRlb0FzcGVjdFJhdGlvO1xyXG4gICAgICAgICAgICAgICAgLy8gVW5zaWduZWQuXHJcbiAgICAgICAgICAgICAgICBsZXQgbm9ybWFsaXplZFggPSB4IC8gcm9vdERpdi5jbGllbnRXaWR0aDtcclxuICAgICAgICAgICAgICAgIGxldCBub3JtYWxpemVkWSA9IHJhdGlvICogKHkgLyByb290RGl2LmNsaWVudEhlaWdodCAtIDAuNSkgKyAwLjU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRYIDwgMC4wIHx8IG5vcm1hbGl6ZWRYID4gMS4wIHx8IG5vcm1hbGl6ZWRZIDwgMC4wIHx8IG5vcm1hbGl6ZWRZID4gMS4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5SYW5nZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHRoaXMudW5zaWduZWRPdXRPZlJhbmdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5SYW5nZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeDogbm9ybWFsaXplZFggKiAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTogbm9ybWFsaXplZFkgKiAodGhpcy51bnNpZ25lZE91dE9mUmFuZ2UgKyAxKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJpbnRJbnB1dHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdTZXR1cCBOb3JtYWxpemUgYW5kIFF1YW50aXplIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA8PSB2aWRlb0FzcGVjdFJhdGlvJywgNik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHJhdGlvID0gdmlkZW9Bc3BlY3RSYXRpbyAvIHBsYXllckFzcGVjdFJhdGlvO1xyXG4gICAgICAgICAgICAgICAgLy8gVW5zaWduZWQuIFxyXG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbGl6ZWRYID0gcmF0aW8gKiAoeCAvIHJvb3REaXYuY2xpZW50V2lkdGggLSAwLjUpICsgMC41O1xyXG4gICAgICAgICAgICAgICAgbGV0IG5vcm1hbGl6ZWRZID0geSAvIHJvb3REaXYuY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRYIDwgMC4wIHx8IG5vcm1hbGl6ZWRYID4gMS4wIHx8IG5vcm1hbGl6ZWRZIDwgMC4wIHx8IG5vcm1hbGl6ZWRZID4gMS4wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5SYW5nZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHRoaXMudW5zaWduZWRPdXRPZlJhbmdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiB0aGlzLnVuc2lnbmVkT3V0T2ZSYW5nZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluUmFuZ2U6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IG5vcm1hbGl6ZWRYICogKHRoaXMudW5zaWduZWRPdXRPZlJhbmdlICsgMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IG5vcm1hbGl6ZWRZICogKHRoaXMudW5zaWduZWRPdXRPZlJhbmdlICsgMSlcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgVHlwZSBvZiBtZXNzYWdlIHNlbnQgdG8gdGhlIFVFIGluc3RhbmNlIG92ZXIgdGhlIGRhdGEgY2hhbm5lbFxyXG4gKiBNdXN0IGJlIGtlcHQgaW4gc3luYyB3aXRoIFBpeGVsU3RyZWFtaW5nUHJvdG9jb2w6OkVUb1VFNE1zZyBDKysgZW51bS5cclxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9FcGljR2FtZXMvVW5yZWFsRW5naW5lL2Jsb2IvcmVsZWFzZS9FbmdpbmUvUGx1Z2lucy9NZWRpYS9QaXhlbFN0cmVhbWluZy9Tb3VyY2UvUGl4ZWxTdHJlYW1pbmcvUHJpdmF0ZS9Qcm90b2NvbERlZnMuaH0gUmVxdWlyZXMgTG9naW5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBVZU1lc3NhZ2VUeXBlIHtcclxuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcblx0LypcclxuXHQgKiBDb250cm9sIE1lc3NhZ2VzLiBSYW5nZSA9IDAuLjQ5LlxyXG5cdCAqL1xyXG5cdHN0YXRpYyBpRnJhbWVSZXF1ZXN0ID0gMDtcclxuXHRzdGF0aWMgcmVxdWVzdFF1YWxpdHlDb250cm9sID0gMTtcclxuXHRzdGF0aWMgbWF4RnBzUmVxdWVzdCA9IDI7XHJcblx0c3RhdGljIGF2ZXJhZ2VCaXRyYXRlUmVxdWVzdCA9IDM7XHJcblx0c3RhdGljIHN0YXJ0U3RyZWFtaW5nID0gNDtcclxuXHRzdGF0aWMgc3RvcFN0cmVhbWluZyA9IDU7XHJcblx0c3RhdGljIGxhdGVuY3lUZXN0ID0gNjtcclxuXHRzdGF0aWMgcmVxdWVzdEluaXRpYWxTZXR0aW5ncyA9IDc7XHJcblxyXG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuXHQvKlxyXG5cdCAqIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDUwLi44OS5cclxuXHQgKi9cclxuXHJcblx0Ly8gR2VuZXJpYyBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA1MC4uNTkuXHJcblx0c3RhdGljIHVpSW50ZXJhY3Rpb24gPSA1MDtcclxuXHRzdGF0aWMgY29tbWFuZCA9IDUxO1xyXG5cclxuXHQvLyBLZXlib2FyZCBJbnB1dCBNZXNzYWdlLiBSYW5nZSA9IDYwLi42OS5cclxuXHRzdGF0aWMga2V5RG93biA9IDYwO1xyXG5cdHN0YXRpYyBrZXlVcCA9IDYxO1xyXG5cdHN0YXRpYyBrZXlQcmVzcyA9IDYyO1xyXG5cclxuXHQvLyBNb3VzZSBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA3MC4uNzkuXHJcblx0c3RhdGljIG1vdXNlRW50ZXIgPSA3MDtcclxuXHRzdGF0aWMgbW91c2VMZWF2ZSA9IDcxO1xyXG5cdHN0YXRpYyBtb3VzZURvd24gPSA3MjtcclxuXHRzdGF0aWMgbW91c2VVcCA9IDczO1xyXG5cdHN0YXRpYyBtb3VzZU1vdmUgPSA3NDtcclxuXHRzdGF0aWMgbW91c2VXaGVlbCA9IDc1O1xyXG5cclxuXHQvLyBUb3VjaCBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA4MC4uODkuXHJcblx0c3RhdGljIHRvdWNoU3RhcnQgPSA4MDtcclxuXHRzdGF0aWMgdG91Y2hFbmQgPSA4MTtcclxuXHRzdGF0aWMgdG91Y2hNb3ZlID0gODI7XHJcblxyXG5cdC8vIEdhbWVwYWQgSW5wdXQgTWVzc2FnZXMuIFJhbmdlID0gOTAuLjk5XHJcblx0c3RhdGljIGdhbWVwYWRCdXR0b25QcmVzc2VkID0gOTA7XHJcblx0c3RhdGljIGdhbWVwYWRCdXR0b25SZWxlYXNlZCA9IDkxO1xyXG5cdHN0YXRpYyBnYW1lcGFkQW5hbG9nID0gOTI7XHJcblxyXG5cclxuXHQvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbn0iLCJpbXBvcnQgeyBJVmlkZW9QbGF5ZXIgfSBmcm9tIFwiLi4vVmlkZW9QbGF5ZXIvSVZpZGVvUGxheWVyXCI7XHJcblxyXG4vKipcclxuICogVGhlIFVpIENvbnRyb2xsZXIgY2xhc3MgaGFuZGxlcyBhbGwgbWV0aG9kcyB0aGF0IGludGVyYWN0IHdpdGggdGhlIFVJXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVWlDb250cm9sbGVyIHtcclxuICAgIHZpZGVvUGxheWVyUHJvdmlkZXI6IElWaWRlb1BsYXllcjtcclxuICAgIHBsYXllclN0eWxlQXR0cmlidXRlczogcGxheWVyU3R5bGVBdHRyaWJ1dGVzO1xyXG4gICAgb3JpZW50YXRpb25DaGFuZ2VUaW1lb3V0OiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PjtcclxuICAgIGxhc3RUaW1lUmVzaXplZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgcmVzaXplVGltZW91dDogbnVtYmVyO1xyXG4gICAgZW5sYXJnZURpc3BsYXlUb0ZpbGxXaW5kb3c6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IodmlkZW9QbGF5ZXJQcm92aWRlcjogSVZpZGVvUGxheWVyKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb1BsYXllclByb3ZpZGVyID0gdmlkZW9QbGF5ZXJQcm92aWRlcjtcclxuICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcyA9IG5ldyBwbGF5ZXJTdHlsZUF0dHJpYnV0ZXMoKTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHJlc2l6ZSBldmVudHMgdG8gdGhlIHdpbmRvd3MgaWYgaXQgaXMgcmVzaXplZCBvciBpdHMgb3JpZW50YXRpb24gaXMgY2hhbmdlZFxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB0aGlzLnJlc2l6ZVBsYXllclN0eWxlKCksIHRydWUpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsICgpID0+IHRoaXMub25PcmllbnRhdGlvbkNoYW5nZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc2l6ZXMgdGhlIHBsYXllciBlbGVtZW50IHRvIGZpbGwgdGhlIHdpbmRvdyBcclxuICAgICAqIEBwYXJhbSBwbGF5ZXJFbGVtZW50IC0gdGhlIHBsYXllciBET00gZWxlbWVudCBcclxuICAgICAqL1xyXG4gICAgcmVzaXplUGxheWVyU3R5bGVUb0ZpbGxXaW5kb3cocGxheWVyRWxlbWVudDogSFRNTERpdkVsZW1lbnQpIHtcclxuICAgICAgICBsZXQgdmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb1BsYXllclByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpO1xyXG4gICAgICAgIC8vIEZpbGwgdGhlIHBsYXllciBkaXNwbGF5IGluIHdpbmRvdywga2VlcGluZyBwaWN0dXJlJ3MgYXNwZWN0IHJhdGlvLlxyXG4gICAgICAgIGxldCB3aW5kb3dBc3BlY3RSYXRpbyA9IHdpbmRvdy5pbm5lckhlaWdodCAvIHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgIGxldCBwbGF5ZXJBc3BlY3RSYXRpbyA9IHBsYXllckVsZW1lbnQuY2xpZW50SGVpZ2h0IC8gcGxheWVyRWxlbWVudC5jbGllbnRXaWR0aDtcclxuICAgICAgICAvLyBXZSB3YW50IHRvIGtlZXAgdGhlIHZpZGVvIHJhdGlvIGNvcnJlY3QgZm9yIHRoZSB2aWRlbyBzdHJlYW1cclxuICAgICAgICBsZXQgdmlkZW9XaWR0aDtcclxuICAgICAgICBsZXQgdmlkZW9IZWlnaHQ7XHJcbiAgICAgICAgaWYgKCF2aWRlb0VsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2aWRlb1dpZHRoID0gcGFyc2VJbnQodmlkZW9FbGVtZW50LmdldEF0dHJpYnV0ZShcInZpZGVvV2lkdGhcIikpO1xyXG4gICAgICAgICAgICB2aWRlb0hlaWdodCA9IHBhcnNlSW50KHZpZGVvRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ2aWRlb0hlaWdodFwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB2aWRlb0FzcGVjdFJhdGlvID0gdmlkZW9IZWlnaHQgLyB2aWRlb1dpZHRoO1xyXG5cclxuICAgICAgICBpZiAoaXNOYU4odmlkZW9Bc3BlY3RSYXRpbykpIHtcclxuICAgICAgICAgICAgLy9WaWRlbyBpcyBub3QgaW5pdGlhbGlzZWQgeWV0IHNvIHNldCBwbGF5ZXJFbGVtZW50IHRvIHNpemUgb2Ygd2luZG93XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlVG9wID0gMDtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVMZWZ0ID0gMDtcclxuICAgICAgICAgICAgcGxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgXCJ0b3A6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVUb3AgKyBcInB4OyBsZWZ0OiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlTGVmdCArIFwicHg7IHdpZHRoOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlV2lkdGggKyBcInB4OyBoZWlnaHQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVIZWlnaHQgKyBcInB4OyBjdXJzb3I6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVDdXJzb3IgKyBcIjsgXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUFkZGl0aW9uYWwpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93QXNwZWN0UmF0aW8gPCBwbGF5ZXJBc3BlY3RSYXRpbykge1xyXG4gICAgICAgICAgICAvLyBXaW5kb3cgaGVpZ2h0IGlzIHRoZSBjb25zdHJhaW5pbmcgZmFjdG9yIHNvIHRvIGtlZXAgYXNwZWN0IHJhdGlvIGNoYW5nZSB3aWR0aCBhcHByb3ByaWF0ZWx5XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlV2lkdGggPSBNYXRoLmZsb29yKHdpbmRvdy5pbm5lckhlaWdodCAvIHZpZGVvQXNwZWN0UmF0aW8pO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVUb3AgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUxlZnQgPSBNYXRoLmZsb29yKCh3aW5kb3cuaW5uZXJXaWR0aCAtIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlV2lkdGgpICogMC41KTtcclxuICAgICAgICAgICAgcGxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgXCJ0b3A6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVUb3AgKyBcInB4OyBsZWZ0OiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlTGVmdCArIFwicHg7IHdpZHRoOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlV2lkdGggKyBcInB4OyBoZWlnaHQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVIZWlnaHQgKyBcInB4OyBjdXJzb3I6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVDdXJzb3IgKyBcIjsgXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUFkZGl0aW9uYWwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFdpbmRvdyB3aWR0aCBpcyB0aGUgY29uc3RyYWluaW5nIGZhY3RvciBzbyB0byBrZWVwIGFzcGVjdCByYXRpbyBjaGFuZ2UgaGVpZ2h0IGFwcHJvcHJpYXRlbHlcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCA9IE1hdGguZmxvb3Iod2luZG93LmlubmVyV2lkdGggKiB2aWRlb0FzcGVjdFJhdGlvKTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVUb3AgPSBNYXRoLmZsb29yKCh3aW5kb3cuaW5uZXJIZWlnaHQgLSB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCkgKiAwLjUpO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUxlZnQgPSAwO1xyXG4gICAgICAgICAgICBwbGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBcInRvcDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVRvcCArIFwicHg7IGxlZnQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVMZWZ0ICsgXCJweDsgd2lkdGg6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVXaWR0aCArIFwicHg7IGhlaWdodDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCArIFwicHg7IGN1cnNvcjogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUN1cnNvciArIFwiOyBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQWRkaXRpb25hbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzaXplcyB0aGUgcGxheWVyIGVsZW1lbnQgdG8gZml0IHRoZSBhY3R1YWwgc2l6ZSBvZiB0aGUgc3RyZWFtXHJcbiAgICAgKiBAcGFyYW0gcGxheWVyRWxlbWVudCAtIHRoZSBwbGF5ZXIgRE9NIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgcmVzaXplUGxheWVyU3R5bGVUb0FjdHVhbFNpemUocGxheWVyRWxlbWVudDogSFRNTERpdkVsZW1lbnQpIHtcclxuICAgICAgICBsZXQgdmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb1BsYXllclByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpO1xyXG4gICAgICAgIGxldCB2aWRlb0VsZW1lbnRMZW5ndGg7XHJcbiAgICAgICAgaWYgKCF2aWRlb0VsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnRMZW5ndGggPSBwYXJzZUludCh2aWRlb0VsZW1lbnQuZ2V0QXR0cmlidXRlKFwibGVuZ3RoXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZpZGVvRWxlbWVudExlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gRGlzcGxheSBpbWFnZSBpbiBpdHMgYWN0dWFsIHNpemVcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVXaWR0aCA9IHZpZGVvRWxlbWVudC52aWRlb1dpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCA9IHZpZGVvRWxlbWVudC52aWRlb0hlaWdodDtcclxuICAgICAgICAgICAgbGV0IFRvcCA9IE1hdGguZmxvb3IoKHdpbmRvdy5pbm5lckhlaWdodCAtIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlSGVpZ2h0KSAqIDAuNSk7XHJcbiAgICAgICAgICAgIGxldCBMZWZ0ID0gTWF0aC5mbG9vcigod2luZG93LmlubmVyV2lkdGggLSB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVdpZHRoKSAqIDAuNSk7XHJcbiAgICAgICAgICAgIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlVG9wID0gKFRvcCA+IDApID8gVG9wIDogMDtcclxuICAgICAgICAgICAgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVMZWZ0ID0gKExlZnQgPiAwKSA/IExlZnQgOiAwO1xyXG4gICAgICAgICAgICBwbGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBcInRvcDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVRvcCArIFwicHg7IGxlZnQ6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVMZWZ0ICsgXCJweDsgd2lkdGg6IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVXaWR0aCArIFwicHg7IGhlaWdodDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUhlaWdodCArIFwicHg7IGN1cnNvcjogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZUN1cnNvciArIFwiOyBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQWRkaXRpb25hbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzaXplcyB0aGUgcGxheWVyIGVsZW1lbnQgdG8gZml0IGFuIGFyYml0cmFyeSBzaXplIFxyXG4gICAgICogQHBhcmFtIHBsYXllckVsZW1lbnQgLSB0aGUgcGxheWVyIERPTSBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHJlc2l6ZVBsYXllclN0eWxlVG9BcmJpdHJhcnlTaXplKHBsYXllckVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSB7XHJcbiAgICAgICAgcGxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgXCJ0b3A6IDBweDsgbGVmdDogMHB4OyB3aWR0aDogXCIgKyB0aGlzLnBsYXllclN0eWxlQXR0cmlidXRlcy5zdHlsZVdpZHRoICsgXCJweDsgaGVpZ2h0OiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlSGVpZ2h0ICsgXCJweDsgY3Vyc29yOiBcIiArIHRoaXMucGxheWVyU3R5bGVBdHRyaWJ1dGVzLnN0eWxlQ3Vyc29yICsgXCI7IFwiICsgdGhpcy5wbGF5ZXJTdHlsZUF0dHJpYnV0ZXMuc3R5bGVBZGRpdGlvbmFsKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIGZvciBzZXR0aW5nIHVwIHRoZSBtb3VzZSBhbmQgZnJlZXplRnJhbWUgXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCAtIHRoZSBwbGF5ZXIgRE9NIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIGZvciB1cGRhdGluZyB0aGUgdmlkZW8gc3RyZWFtIHNpemVcclxuICAgICAqL1xyXG4gICAgdXBkYXRlVmlkZW9TdHJlYW1TaXplKCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNpemVzIHRoZSBwbGF5ZXIgc3R5bGUgYmFzZWQgb24gdGhlIHdpbmRvdyBoZWlnaHQgYW5kIHdpZHRoIFxyXG4gICAgICogQHJldHVybnMgLSBuaWwgaWYgcmVxdWlyZW1lbnRzIGFyZSBzYXRpc2ZpZWQgXHJcbiAgICAgKi9cclxuICAgIHJlc2l6ZVBsYXllclN0eWxlKCkge1xyXG4gICAgICAgIGxldCBwbGF5ZXJFbGVtZW50ID0gdGhpcy52aWRlb1BsYXllclByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpIGFzIEhUTUxEaXZFbGVtZW50O1xyXG5cclxuICAgICAgICBpZiAoIXBsYXllckVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWRlb1N0cmVhbVNpemUoKTtcclxuXHJcbiAgICAgICAgaWYgKHBsYXllckVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmaXhlZC1zaXplJykpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRVcE1vdXNlQW5kRnJlZXplRnJhbWUocGxheWVyRWxlbWVudClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY29udHJvbHMgZm9yIHJlc2l6aW5nIHRoZSBwbGF5ZXIgXHJcbiAgICAgICAgbGV0IHZpZGVvV2lkdGggPSBwYXJzZUludChwbGF5ZXJFbGVtZW50LmdldEF0dHJpYnV0ZShcInZpZGVvV2lkdGhcIikpXHJcbiAgICAgICAgbGV0IHZpZGVvSGVpZ2h0ID0gcGFyc2VJbnQocGxheWVyRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ2aWRlb0hlaWdodFwiKSlcclxuICAgICAgICBsZXQgd2luZG93U21hbGxlclRoYW5QbGF5ZXIgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IHZpZGVvV2lkdGggfHwgd2luZG93LmlubmVySGVpZ2h0IDwgdmlkZW9IZWlnaHQ7XHJcbiAgICAgICAgaWYgKHRoaXMuZW5sYXJnZURpc3BsYXlUb0ZpbGxXaW5kb3cgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5sYXJnZURpc3BsYXlUb0ZpbGxXaW5kb3cgPT09IHRydWUgfHwgd2luZG93U21hbGxlclRoYW5QbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGVUb0ZpbGxXaW5kb3cocGxheWVyRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZVBsYXllclN0eWxlVG9BY3R1YWxTaXplKHBsYXllckVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZVRvQXJiaXRyYXJ5U2l6ZShwbGF5ZXJFbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKHBsYXllckVsZW1lbnQpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPbiB0aGUgb3JpZW50YXRpb24gY2hhbmdlIG9mIGEgd2luZG93IGNsZWFyIHRoZSB0aW1lb3V0IFxyXG4gICAgICovXHJcbiAgICBvbk9yaWVudGF0aW9uQ2hhbmdlKCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm9yaWVudGF0aW9uQ2hhbmdlVGltZW91dCk7XHJcbiAgICAgICAgdGhpcy5vcmllbnRhdGlvbkNoYW5nZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpIH0sIDUwMCk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgcGxheWVyIHN0eWxlIGF0dHJpYnV0ZXMgc28gdGhleSBjYW4gYmUgaW5zdGFudGlhdGVkXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgcGxheWVyU3R5bGVBdHRyaWJ1dGVzIHtcclxuICAgIHN0eWxlV2lkdGg6IG51bWJlcjtcclxuICAgIHN0eWxlSGVpZ2h0OiBudW1iZXI7XHJcbiAgICBzdHlsZVRvcDogbnVtYmVyO1xyXG4gICAgc3R5bGVMZWZ0OiBudW1iZXI7XHJcbiAgICBzdHlsZUN1cnNvciA9ICdkZWZhdWx0JztcclxuICAgIHN0eWxlQWRkaXRpb25hbDogbnVtYmVyO1xyXG59IiwiaW1wb3J0IHsgTW91c2VDb250cm9sbGVyIH0gZnJvbSBcIi4uL0lucHV0cy9Nb3VzZUNvbnRyb2xsZXJcIlxyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xyXG5pbXBvcnQgeyBJVmlkZW9QbGF5ZXIgfSBmcm9tIFwiLi9JVmlkZW9QbGF5ZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBWaWRlbyBQbGF5ZXIgQ29udHJvbGxlciBoYW5kbGVzIHRoZSBjcmVhdGlvbiBvZiB0aGUgdmlkZW8gSFRNTCBlbGVtZW50IGFuZCBhbGwgaGFuZGxlcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTdHJlYW1Db250cm9sbGVyIHtcclxuICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBJVmlkZW9QbGF5ZXI7XHJcbiAgICBhdWRpb0VsZW1lbnQ6IEhUTUxBdWRpb0VsZW1lbnQ7XHJcbiAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih2aWRlb0VsZW1lbnRQcm92aWRlcjogSVZpZGVvUGxheWVyKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuYXVkaW9FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkF1ZGlvXCIpIGFzIEhUTUxBdWRpb0VsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIFBlZXIgY29ubmVjdGlvbiBoYXMgYSB0cmFjayBldmVudFxyXG4gICAgICogQHBhcmFtIHJ0Y1RyYWNrRXZlbnQgLSBSVEMgVHJhY2sgRXZlbnQgXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uVHJhY2socnRjVHJhY2tFdmVudDogUlRDVHJhY2tFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJoYW5kbGVPblRyYWNrIFwiICsgSlNPTi5zdHJpbmdpZnkocnRjVHJhY2tFdmVudC5zdHJlYW1zKSwgNik7XHJcbiAgICAgICAgbGV0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XHJcblxyXG4gICAgICAgIGlmIChydGNUcmFja0V2ZW50LnRyYWNrKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0dvdCB0cmFjayAtICcgKyBydGNUcmFja0V2ZW50LnRyYWNrLmtpbmQgKyAnIGlkPScgKyBydGNUcmFja0V2ZW50LnRyYWNrLmlkICsgJyByZWFkeVN0YXRlPScgKyBydGNUcmFja0V2ZW50LnRyYWNrLnJlYWR5U3RhdGUsIDYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJ0Y1RyYWNrRXZlbnQudHJhY2sua2luZCA9PSBcImF1ZGlvXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5DcmVhdGVBdWRpb1RyYWNrKHJ0Y1RyYWNrRXZlbnQuc3RyZWFtc1swXSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2UgaWYgKHJ0Y1RyYWNrRXZlbnQudHJhY2sua2luZCA9PSBcInZpZGVvXCIgJiYgdmlkZW9FbGVtZW50LnNyY09iamVjdCAhPT0gcnRjVHJhY2tFdmVudC5zdHJlYW1zWzBdKSB7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgPSBydGNUcmFja0V2ZW50LnN0cmVhbXNbMF07XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NldCB2aWRlbyBzb3VyY2UgZnJvbSB2aWRlbyB0cmFjayBvbnRyYWNrLicsIDYpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIHRoZSBhdWRpbyBkZXZpY2Ugd2hlbiByZWNlaXZpbmcgYW4gUlRDVHJhY2tFdmVudCB3aXRoIHRoZSBraW5kIG9mIFwiYXVkaW9cIlxyXG4gICAgKiBAcGFyYW0gYXVkaW9NZWRpYVN0cmVhbSAtIEF1ZGlvIE1lZGlhIHN0cmVhbSB0cmFja1xyXG4gICAgKi9cclxuICAgIENyZWF0ZUF1ZGlvVHJhY2soYXVkaW9NZWRpYVN0cmVhbTogTWVkaWFTdHJlYW0pIHtcclxuICAgICAgICBsZXQgdmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb0VsZW1lbnQoKTtcclxuXHJcbiAgICAgICAgLy8gZG8gbm90aGluZyB0aGUgdmlkZW8gaGFzIHRoZSBzYW1lIG1lZGlhIHN0cmVhbSBhcyB0aGUgYXVkaW8gdHJhY2sgd2UgaGF2ZSBoZXJlICh0aGV5IGFyZSBsaW5rZWQpXHJcbiAgICAgICAgaWYgKHZpZGVvRWxlbWVudC5zcmNPYmplY3QgPT0gYXVkaW9NZWRpYVN0cmVhbSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHZpZGVvIGVsZW1lbnQgaGFzIHNvbWUgb3RoZXIgbWVkaWEgc3RyZWFtIHRoYXQgaXMgbm90IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGF1ZGlvIHRyYWNrXHJcbiAgICAgICAgZWxzZSBpZiAodmlkZW9FbGVtZW50LnNyY09iamVjdCAmJiB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ICE9PSBhdWRpb01lZGlhU3RyZWFtKSB7XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhIG5ldyBhdWRpbyBlbGVtZW50XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9FbGVtZW50LnNyY09iamVjdCA9IGF1ZGlvTWVkaWFTdHJlYW07XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0NyZWF0ZWQgbmV3IGF1ZGlvIGVsZW1lbnQgdG8gcGxheSBzZXBhcmF0ZSBhdWRpbyBzdHJlYW0uJywgNik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IElWaWRlb1BsYXllciB9IGZyb20gXCIuL0lWaWRlb1BsYXllclwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZpZGVvUGxheWVyIGltcGxlbWVudHMgSVZpZGVvUGxheWVyIHtcclxuICAgIHZpZGVvRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihyb290RGl2OiBIVE1MRGl2RWxlbWVudCwgc3RhcnRWaWRlb011dGVkOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIik7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuaWQgPSBcInN0cmVhbWluZ1ZpZGVvXCI7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQubXV0ZWQgPSBzdGFydFZpZGVvTXV0ZWQ7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnBsYXlzSW5saW5lID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgIHJvb3REaXYuYXBwZW5kQ2hpbGQodGhpcy52aWRlb0VsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIGh0bWwgdmlkZW8gZWxlbWVudFxyXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgY29udGV4dCBvZiB0aGUgdmlkZW8gZWxlbWVudFxyXG4gICAgICovXHJcbiAgICBnZXRWaWRlb0VsZW1lbnQoKTogSFRNTFZpZGVvRWxlbWVudCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmlkZW9FbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIGh0bWwgdmlkZW8gZWxlbWVudHMgcGFyZW50XHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSB2aWRlbyBlbGVtZW50cyBwYXJlbnRcclxuICAgICAqL1xyXG4gICAgZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWRlb0VsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgY2xpY2sgYWN0aW9ucyBmb3Igd2hlbiB0aGUgRWxlbWVudCBpcyBtb3VzZSBjbGlja2VkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBzZXRDbGlja0FjdGlvbnMoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy52aWRlb0VsZW1lbnQucGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnBsYXkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG1pbm9yIGhhY2sgdG8gYWxsZXZpYXRlIGlvcyBub3Qgc3VwcG9ydGluZyBwb2ludGVybG9ja1xyXG4gICAgICAgIGlmICh0aGlzLnZpZGVvRWxlbWVudC5yZXF1ZXN0UG9pbnRlckxvY2spIHtcclxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucmVxdWVzdFBvaW50ZXJMb2NrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBTZXQgdGhlIG1vdXNlIGVudGVyIGFuZCBtb3VzZSBsZWF2ZSBldmVudHMgXHJcbiAgICAqL1xyXG4gICAgc2V0TW91c2VFbnRlckFuZExlYXZlRXZlbnRzKG1vdXNlRW50ZXJDYWxsQmFjazogKCkgPT4gdm9pZCwgbW91c2VMZWF2ZUNhbGxCYWNrOiAoKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgLy8gSGFuZGxlIHdoZW4gdGhlIE1vdXNlIGhhcyBlbnRlcmVkIHRoZSBlbGVtZW50XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQub25tb3VzZWVudGVyID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJNb3VzZSBFbnRlcmVkXCIsIDYpO1xyXG4gICAgICAgICAgICBtb3VzZUVudGVyQ2FsbEJhY2soKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBIYW5kbGVzIHdoZW4gdGhlIG1vdXNlIGhhcyBsZWZ0IHRoZSBlbGVtZW50IFxyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm9ubW91c2VsZWF2ZSA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiTW91c2UgTGVmdFwiLCA2KTtcclxuICAgICAgICAgICAgbW91c2VMZWF2ZUNhbGxCYWNrKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogU2V0IHRoZSBWaWRlbyBFbGVtZW50cyBzcmMgb2JqZWN0IHRyYWNrcyB0byBlbmFibGVcclxuICAgICogQHBhcmFtIGVuYWJsZWQgLSBFbmFibGUgVHJhY2tzIG9uIHRoZSBTcmMgT2JqZWN0XHJcbiAgICAqL1xyXG4gICAgc2V0VmlkZW9FbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICAvLyB0aGlzIGlzIGEgdGVtcG9yYXJ5IGhhY2sgdW50aWwgdHlwZSBzY3JpcHRzIHZpZGVvIGVsZW1lbnQgaXMgdXBkYXRlZCB0byByZWZsZWN0IHRoZSBuZWVkIGZvciB0cmFja3Mgb24gYSBodG1sIHZpZGVvIGVsZW1lbnQgXHJcbiAgICAgICAgbGV0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50IGFzIGFueTtcclxuICAgICAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0LmdldFRyYWNrcygpLmZvckVhY2goKHRyYWNrOiBNZWRpYVN0cmVhbVRyYWNrKSA9PiB0cmFjay5lbmFibGVkID0gZW5hYmxlZCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBNb3VzZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vSW5wdXRzL01vdXNlQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xyXG5pbXBvcnQgeyBJVmlkZW9QbGF5ZXJNb3VzZUludGVyZmFjZSB9IGZyb20gXCIuL1ZpZGVvUGxheWVyTW91c2VJbnRlcmZhY2VcIjtcclxuXHJcbi8qKlxyXG4gKiBWaWRlbyBQbGF5ZXIgbW91c2UgSG92ZXIgaGFuZGxlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZpZGVvUGxheWVyTW91c2VIb3ZlckV2ZW50cyBpbXBsZW1lbnRzIElWaWRlb1BsYXllck1vdXNlSW50ZXJmYWNlIHtcclxuXHJcbiAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgLSBNb3VzZSBDb250cm9sbGVyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIgPSBtb3VzZUNvbnRyb2xsZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTYXRpc2ZpZXMgdGhlIGludGVyZmFjZXMgaGFuZGxlTG9ja1N0YXRlQ2hhbmdlIHJlcXVpcmVtZW50IFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVMb2NrU3RhdGVDaGFuZ2UoKTogdm9pZCB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgbW92ZSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlTW92ZShtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIk1vdXNlTW92ZVwiLCA2KTtcclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5zZW5kTW91c2VNb3ZlKG1vdXNlRXZlbnQub2Zmc2V0WCwgbW91c2VFdmVudC5vZmZzZXRZLCBtb3VzZUV2ZW50Lm1vdmVtZW50WCwgbW91c2VFdmVudC5tb3ZlbWVudFkpO1xyXG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgRG93biBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlRG93bihtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIm9uTW91c2UgRG93blwiLCA2KTtcclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5zZW5kTW91c2VEb3duKG1vdXNlRXZlbnQuYnV0dG9uLCBtb3VzZUV2ZW50Lm9mZnNldFgsIG1vdXNlRXZlbnQub2Zmc2V0WSk7XHJcbiAgICAgICAgbW91c2VFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBVcCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlVXAobW91c2VFdmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnNlbmRNb3VzZVVwKG1vdXNlRXZlbnQuYnV0dG9uLCBtb3VzZUV2ZW50Lm9mZnNldFgsIG1vdXNlRXZlbnQub2Zmc2V0WSk7XHJcbiAgICAgICAgbW91c2VFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSB3aGVlbCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIHdoZWVsIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gd2hlZWxFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlV2hlZWwod2hlZWxFdmVudDogV2hlZWxFdmVudCkge1xyXG4gICAgICAgIC8vd2hlZWxFdmVudC5kZXRhaWwgKiAtMTIwXHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuc2VuZE1vdXNlV2hlZWwod2hlZWxFdmVudC5kZWx0YVksIHdoZWVsRXZlbnQub2Zmc2V0WCwgd2hlZWxFdmVudC5vZmZzZXRZKTtcclxuICAgICAgICB3aGVlbEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIGNvbnRleHQgbWVudSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUNvbnRleHRNZW51KG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5zZW5kTW91c2VVcChtb3VzZUV2ZW50LmJ1dHRvbiwgbW91c2VFdmVudC5vZmZzZXRYLCBtb3VzZUV2ZW50Lm9mZnNldFkpO1xyXG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBNb3VzZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vSW5wdXRzL01vdXNlQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tIFwiLi4vTG9nZ2VyL0xvZ2dlclwiO1xyXG5pbXBvcnQgeyBJVmlkZW9QbGF5ZXIgfSBmcm9tIFwiLi9JVmlkZW9QbGF5ZXJcIjtcclxuaW1wb3J0IHsgSVZpZGVvUGxheWVyTW91c2VJbnRlcmZhY2UgfSBmcm9tIFwiLi9WaWRlb1BsYXllck1vdXNlSW50ZXJmYWNlXCI7XHJcblxyXG4vKipcclxuICogSGFuZGxlIHRoZSBtb3VzZSBsb2NrZWQgZXZlbnRzXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmlkZW9QbGF5ZXJNb3VzZUxvY2tlZEV2ZW50cyBpbXBsZW1lbnRzIElWaWRlb1BsYXllck1vdXNlSW50ZXJmYWNlIHtcclxuXHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcblxyXG4gICAgdmlkZW9FbGVtZW50UHJvdmlkZXI6IElWaWRlb1BsYXllcjtcclxuICAgIG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFByb3ZpZGVyIC0gVGhlIEhUTUwgVmlkZW8gRWxlbWVudCBwcm92aWRlclxyXG4gICAgICogQHBhcmFtIG1vdXNlQ29udHJvbGxlciAgLSBNb3VzZSBDb250cm9sbGVyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHZpZGVvRWxlbWVudFByb3ZpZGVyOiBJVmlkZW9QbGF5ZXIsIG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyID0gbW91c2VDb250cm9sbGVyO1xyXG5cclxuICAgICAgICBsZXQgdmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb0VsZW1lbnQoKTtcclxuICAgICAgICB0aGlzLnggPSB2aWRlb0VsZW1lbnQud2lkdGggLyAyO1xyXG4gICAgICAgIHRoaXMueSA9IHZpZGVvRWxlbWVudC5oZWlnaHQgLyAyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIGxvY2tlZCBzdGF0ZSBDaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUxvY2tTdGF0ZUNoYW5nZSgpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiTG9jayBzdGF0ZSBoYXMgY2hhbmdlZFwiLCA2KTtcclxuICAgICAgICBsZXQgdmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb0VsZW1lbnQoKTtcclxuICAgICAgICBpZiAoZG9jdW1lbnQucG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQub25tb3VzZW1vdmUgPSAobW91c2VFdmVudCkgPT4gdGhpcy5oYW5kbGVNb3VzZU1vdmUobW91c2VFdmVudCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50Lm9ud2hlZWwgPSAod2hlZWxFdmVudCkgPT4gdGhpcy5oYW5kbGVNb3VzZVdoZWVsKHdoZWVsRXZlbnQpO1xyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQub25tb3VzZWRvd24gPSAod2hlZWxFdmVudCkgPT4gdGhpcy5oYW5kbGVNb3VzZURvd24od2hlZWxFdmVudCk7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5vbm1vdXNldXAgPSAobW91c2VFdmVudCkgPT4gdGhpcy5oYW5kbGVNb3VzZVVwKG1vdXNlRXZlbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gbnVsbDtcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50Lm9ubW91c2Vkb3duID0gbnVsbDtcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50Lm9ubW91c2V1cCA9IG51bGw7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5vbndoZWVsID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIG1vdmUgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZU1vdmUobW91c2VFdmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGxldCB2aWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpO1xyXG5cclxuICAgICAgICB0aGlzLnggKz0gbW91c2VFdmVudC5tb3ZlbWVudFg7XHJcbiAgICAgICAgdGhpcy55ICs9IG1vdXNlRXZlbnQubW92ZW1lbnRZO1xyXG4gICAgICAgIGlmICh0aGlzLnggPiB2aWRlb0VsZW1lbnQuY2xpZW50V2lkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy54IC09IHZpZGVvRWxlbWVudC5jbGllbnRXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMueSA+IHZpZGVvRWxlbWVudC5jbGllbnRIZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy55IC09IHZpZGVvRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnggPCAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHZpZGVvRWxlbWVudC5jbGllbnRXaWR0aCArIHRoaXMueDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMueSA8IDApIHtcclxuICAgICAgICAgICAgdGhpcy55ID0gdmlkZW9FbGVtZW50LmNsaWVudEhlaWdodCAtIHRoaXMueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnNlbmRNb3VzZU1vdmUodGhpcy54LCB0aGlzLnksIG1vdXNlRXZlbnQubW92ZW1lbnRYLCBtb3VzZUV2ZW50Lm1vdmVtZW50WSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIERvd24gZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZURvd24obW91c2VFdmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnNlbmRNb3VzZURvd24obW91c2VFdmVudC5idXR0b24sIG1vdXNlRXZlbnQueCwgbW91c2VFdmVudC55KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIFVwIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTW91c2VVcChtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuc2VuZE1vdXNlVXAobW91c2VFdmVudC5idXR0b24sIG1vdXNlRXZlbnQueCwgbW91c2VFdmVudC55KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2Ugd2hlZWwgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSB3aGVlbCBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHdoZWVsRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZVdoZWVsKHdoZWVsRXZlbnQ6IFdoZWVsRXZlbnQpIHtcclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5zZW5kTW91c2VXaGVlbCh3aGVlbEV2ZW50LmRlbHRhWSwgd2hlZWxFdmVudC54LCB3aGVlbEV2ZW50LnkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBjb250ZXh0IG1lbnUgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVDb250ZXh0TWVudShtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgTG9nZ2VyLkluZm8oTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJvbkNvbnRleHRNZW51XCIpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgV2ViU29ja2V0Q29udHJvbGxlciB9IGZyb20gXCIuLi9XZWJTb2NrZXRzL1dlYlNvY2tldENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgU3RyZWFtQ29udHJvbGxlciB9IGZyb20gXCIuLi9WaWRlb1BsYXllci9TdHJlYW1Db250cm9sbGVyXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VJbnN0YW5jZVN0YXRlLCBNZXNzYWdlQW5zd2VyLCBNZXNzYWdlQXV0aFJlc3BvbnNlLCBNZXNzYWdlQ29uZmlnIH0gZnJvbSBcIi4uL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmVcIjtcclxuaW1wb3J0IHsgVWlDb250cm9sbGVyIH0gZnJvbSBcIi4uL1VpL1VpQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBGcmVlemVGcmFtZUNvbnRyb2xsZXIgfSBmcm9tIFwiLi4vRnJlZXplRnJhbWUvRnJlZXplRnJhbWVDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IEFma0xvZ2ljIH0gZnJvbSBcIi4uL0Fmay9BZmtMb2dpY1wiO1xyXG5pbXBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IFBlZXJDb25uZWN0aW9uQ29udHJvbGxlciB9IGZyb20gXCIuLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyXCJcclxuaW1wb3J0IHsgS2V5Ym9hcmRDb250cm9sbGVyIH0gZnJvbSBcIi4uL0lucHV0cy9LZXlib2FyZENvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgSVRvdWNoQ29udHJvbGxlciB9IGZyb20gXCIuLi9JbnB1dHMvSVRvdWNoQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBVZURlc2NyaXB0b3JVaSB9IGZyb20gXCIuLi9VZUluc3RhbmNlTWVzc2FnZS9VZURlc2NyaXB0b3JVaVwiO1xyXG5pbXBvcnQgeyBVZUNvbnRyb2xNZXNzYWdlIH0gZnJvbSBcIi4uL1VlSW5zdGFuY2VNZXNzYWdlL1VlQ29udHJvbE1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgQWdncmVnYXRlZFN0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHNcIjtcclxuaW1wb3J0IHsgSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXIgfSBmcm9tIFwiLi9JV2ViUnRjUGxheWVyQ29udHJvbGxlclwiO1xyXG5pbXBvcnQgeyBJRGVsZWdhdGUgfSBmcm9tIFwiLi4vRGVsZWdhdGUvSURlbGVnYXRlXCI7XHJcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuLi9Db25maWcvQ29uZmlnXCI7XHJcbmltcG9ydCB7IEVuY29kZXIsIEluaXRpYWxTZXR0aW5ncywgV2ViUlRDIH0gZnJvbSBcIi4uL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBMYXRlbmN5VGVzdFJlc3VsdHMgfSBmcm9tIFwiLi4vRGF0YUNoYW5uZWwvTGF0ZW5jeVRlc3RSZXN1bHRzXCI7XHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gXCIuLi9Mb2dnZXIvTG9nZ2VyXCI7XHJcbmltcG9ydCB7IElucHV0Q29udHJvbGxlciB9IGZyb20gXCIuLi9JbnB1dHMvSW5wdXRDb250cm9sbGVyXCI7XHJcbmltcG9ydCB7IE1pY0NvbnRyb2xsZXIgfSBmcm9tIFwiLi4vTWljUGxheWVyL01pY0NvbnRyb2xsZXJcIjtcclxuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tIFwiLi4vVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXJcIjtcclxuaW1wb3J0ICogYXMgTWVzc2FnZVJlY2VpdmUgZnJvbSBcIi4uL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmVcIjtcclxuLyoqXHJcbiAqIEVudHJ5IHBvaW50IGZvciB0aGUgV2ViIFJUQyBQbGF5ZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyIGltcGxlbWVudHMgSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXIge1xyXG5cdGNvbmZpZzogQ29uZmlnO1xyXG5cdHNkcENvbnN0cmFpbnRzOiBSVENPZmZlck9wdGlvbnM7XHJcblx0d2ViU29ja2V0Q29udHJvbGxlcjogV2ViU29ja2V0Q29udHJvbGxlcjtcclxuXHRkYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcjtcclxuXHRkYXRhY2hhbm5lbE9wdGlvbnM6IFJUQ0RhdGFDaGFubmVsSW5pdDtcclxuXHR2aWRlb1BsYXllcjogVmlkZW9QbGF5ZXI7XHJcblx0c3RyZWFtQ29udHJvbGxlcjogU3RyZWFtQ29udHJvbGxlcjtcclxuXHRrZXlib2FyZENvbnRyb2xsZXI6IEtleWJvYXJkQ29udHJvbGxlcjtcclxuXHR0b3VjaENvbnRyb2xsZXI6IElUb3VjaENvbnRyb2xsZXI7XHJcblx0dWVDb250cm9sTWVzc2FnZTogVWVDb250cm9sTWVzc2FnZTtcclxuXHR1ZURlc2NyaXB0b3JVaTogVWVEZXNjcmlwdG9yVWk7XHJcblx0cGVlckNvbm5lY3Rpb25Db250cm9sbGVyOiBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXI7XHJcblx0dWlDb250cm9sbGVyOiBVaUNvbnRyb2xsZXI7XHJcblx0aW5wdXRDb250cm9sbGVyOiBJbnB1dENvbnRyb2xsZXI7XHJcblx0ZnJlZXplRnJhbWVDb250cm9sbGVyOiBGcmVlemVGcmFtZUNvbnRyb2xsZXI7XHJcblx0c2hvdWxkU2hvd1BsYXlPdmVybGF5OiBib29sZWFuID0gdHJ1ZTtcclxuXHRhZmtMb2dpYzogQWZrTG9naWM7XHJcblx0cGxheWVyRWxlbWVudENsaWVudFJlY3Q6IERPTVJlY3Q7XHJcblx0bGFzdFRpbWVSZXNpemVkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblx0bWF0Y2hWaWV3cG9ydFJlc29sdXRpb246IGJvb2xlYW47XHJcblx0cmVzaXplVGltZW91dDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD47XHJcblx0bGF0ZW5jeVN0YXJ0VGltZTogbnVtYmVyO1xyXG5cdGRlbGVnYXRlOiBJRGVsZWdhdGU7XHJcblxyXG5cdC8vIGlmIHlvdSBvdmVycmlkZSB0aGUgZGlzY29ubmVjdGlvbiBtZXNzYWdlIGJ5IGNhbGxpbmcgdGhlIGludGVyZmFjZSBtZXRob2Qgc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZVxyXG5cdC8vIGl0IHdpbGwgdXNlIHRoaXMgcHJvcGVydHkgdG8gc3RvcmUgdGhlIG92ZXJyaWRlIG1lc3NhZ2Ugc3RyaW5nXHJcblx0ZGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZTogc3RyaW5nO1xyXG5cclxuXHQvLyBmb3IgbWljIHN1cHBvcnQgXHJcblx0dXJsUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXM7XHJcblx0bWljQ29udHJvbGxlcjogTWljQ29udHJvbGxlcjtcclxuXHJcblx0LyoqXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGNvbmZpZyAtIHRoZSBmcm9udGVuZCBjb25maWcgb2JqZWN0IFxyXG5cdCAqIEBwYXJhbSBkZWxlZ2F0ZSAtIHRoZSBkZWxlZ2F0ZSBpbnRlcmZhY2Ugb2JqZWN0IFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBkZWxlZ2F0ZTogSURlbGVnYXRlKSB7XHJcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuXHRcdHRoaXMuZGVsZWdhdGUgPSBkZWxlZ2F0ZTtcclxuXHJcblx0XHR0aGlzLnNkcENvbnN0cmFpbnRzID0ge1xyXG5cdFx0XHRvZmZlclRvUmVjZWl2ZUF1ZGlvOiB0cnVlLFxyXG5cdFx0XHRvZmZlclRvUmVjZWl2ZVZpZGVvOiB0cnVlXHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gc2V0IHVwIHRoZSBhZmsgbG9naWMgY2xhc3MgYW5kIGNvbm5lY3QgdXAgaXRzIG1ldGhvZCBmb3IgY2xvc2luZyB0aGUgc2lnbmFsaW5nIHNlcnZlciBcclxuXHRcdHRoaXMuYWZrTG9naWMgPSBuZXcgQWZrTG9naWModGhpcy5jb25maWcuY29udHJvbFNjaGVtZSwgdGhpcy5jb25maWcuYWZrVGltZW91dCk7XHJcblx0XHR0aGlzLmFma0xvZ2ljLnNldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB0aGlzLnNldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUobWVzc2FnZSk7XHJcblx0XHR0aGlzLmFma0xvZ2ljLmNsb3NlV2ViU29ja2V0ID0gKCkgPT4gdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcigpO1xyXG5cclxuXHRcdHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyID0gbmV3IEZyZWV6ZUZyYW1lQ29udHJvbGxlcih0aGlzLmNvbmZpZy5wbGF5ZXJFbGVtZW50KTtcclxuXHJcblx0XHR0aGlzLnZpZGVvUGxheWVyID0gbmV3IFZpZGVvUGxheWVyKHRoaXMuY29uZmlnLnBsYXllckVsZW1lbnQsIHRoaXMuY29uZmlnLnN0YXJ0VmlkZW9NdXRlZCk7XHJcblx0XHR0aGlzLnN0cmVhbUNvbnRyb2xsZXIgPSBuZXcgU3RyZWFtQ29udHJvbGxlcih0aGlzLnZpZGVvUGxheWVyKTtcclxuXHJcblx0XHR0aGlzLnVpQ29udHJvbGxlciA9IG5ldyBVaUNvbnRyb2xsZXIodGhpcy52aWRlb1BsYXllcik7XHJcblx0XHR0aGlzLnVpQ29udHJvbGxlci5zZXRVcE1vdXNlQW5kRnJlZXplRnJhbWUgPSAoZWxlbWVudDogSFRNTERpdkVsZW1lbnQpID0+IHRoaXMuc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKGVsZW1lbnQpO1xyXG5cclxuXHRcdHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyID0gbmV3IERhdGFDaGFubmVsQ29udHJvbGxlcih0aGlzLnZpZGVvUGxheWVyLCB0aGlzLmNvbmZpZyk7XHJcblx0XHR0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci5oYW5kbGVPbk9wZW4gPSAoKSA9PiB0aGlzLmhhbmRsZURhdGFDaGFubmVsQ29ubmVjdGVkKCk7XHJcblx0XHR0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci5vbkxhdGVuY3lUZXN0UmVzdWx0ID0gKGxhdGVuY3lUZXN0UmVzdWx0czogTGF0ZW5jeVRlc3RSZXN1bHRzKSA9PiB0aGlzLmhhbmRsZUxhdGVuY3lUZXN0UmVzdWx0KGxhdGVuY3lUZXN0UmVzdWx0cyk7XHJcblx0XHR0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci5vblZpZGVvRW5jb2RlckF2Z1FQID0gKEF2Z1FQOiBudW1iZXIpID0+IHRoaXMuaGFuZGxlVmlkZW9FbmNvZGVyQXZnUVAoQXZnUVApO1xyXG5cdFx0dGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIuT25Jbml0aWFsU2V0dGluZ3MgPSAoSW5pdGlhbFNldHRpbmdzOiBJbml0aWFsU2V0dGluZ3MpID0+IHRoaXMuaGFuZGxlSW5pdGlhbFNldHRpbmdzKEluaXRpYWxTZXR0aW5ncyk7XHJcblx0XHR0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci5vblF1YWxpdHlDb250cm9sT3duZXJzaGlwID0gKGhhc1F1YWxpdHlPd25lcnNoaXA6IGJvb2xlYW4pID0+IHRoaXMuaGFuZGxlUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAoaGFzUXVhbGl0eU93bmVyc2hpcCk7XHJcblx0XHR0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci5yZXNldEFma1dhcm5pbmdUaW1lck9uRGF0YVNlbmQgPSAoKSA9PiB0aGlzLmFma0xvZ2ljLnJlc2V0QWZrV2FybmluZ1RpbWVyKCk7XHJcblxyXG5cdFx0Ly8gc2V0IHVwIHdlYnNvY2tldCBtZXRob2RzXHJcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIgPSBuZXcgV2ViU29ja2V0Q29udHJvbGxlcih0aGlzLmNvbmZpZy5zaWduYWxsaW5nU2VydmVyQWRkcmVzcyk7XHJcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25Db25maWcgPSAobWVzc2FnZUNvbmZpZzogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUNvbmZpZykgPT4gdGhpcy5oYW5kbGVPbkNvbmZpZ01lc3NhZ2UobWVzc2FnZUNvbmZpZyk7XHJcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25JbnN0YW5jZVN0YXRlQ2hhbmdlID0gKGluc3RhbmNlU3RhdGU6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VJbnN0YW5jZVN0YXRlKSA9PiB0aGlzLmhhbmRsZUluc3RhbmNlU3RhdGVDaGFuZ2UoaW5zdGFuY2VTdGF0ZSk7XHJcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25BdXRoZW50aWNhdGlvblJlc3BvbnNlID0gKGF1dGhSZXNwb25zZTogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUF1dGhSZXNwb25zZSkgPT4gdGhpcy5oYW5kbGVBdXRoZW50aWNhdGlvblJlc3BvbnNlKGF1dGhSZXNwb25zZSk7XHJcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25XZWJTb2NrZXRPbmNsb3NlT3ZlcmxheU1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuZGVsZWdhdGUub25EaXNjb25uZWN0KGAke2V2ZW50LmNvZGV9IC0gJHtldmVudC5yZWFzb259YCk7XHJcblxyXG5cdFx0Ly8gc2V0IHVwIHRoZSBmaW5hbCB3ZWJSdGMgcGxheWVyIGNvbnRyb2xsZXIgbWV0aG9kcyBmcm9tIHdpdGhpbiBvdXIgZGVsZWdhdGUgc28gYSBjb25uZWN0aW9uIGNhbiBiZSBhY3RpdmF0ZWRcclxuXHRcdHRoaXMuZGVsZWdhdGUuc2V0SVdlYlJ0Y1BsYXllckNvbnRyb2xsZXIodGhpcyk7XHJcblxyXG5cdFx0Ly8gbm93IHRoYXQgdGhlIGRlbGVnYXRlIGhhcyBmaW5pc2hlZCBpbnN0YW50aWF0aW5nIGNvbm5lY3QgdGhlIHJlc3Qgb2YgdGhlIGFmayBtZXRob2RzIHRvIHRoZSBhZmsgbG9naWMgY2xhc3NcclxuXHRcdHRoaXMuYWZrTG9naWMuc2hvd0Fma092ZXJsYXkgPSAoKSA9PiB0aGlzLmRlbGVnYXRlLnNob3dBZmtPdmVybGF5KHRoaXMuYWZrTG9naWMuY291bnREb3duKTtcclxuXHRcdHRoaXMuYWZrTG9naWMudXBkYXRlQWZrQ291bnRkb3duID0gKCkgPT4gdGhpcy5kZWxlZ2F0ZS51cGRhdGVBZmtPdmVybGF5KHRoaXMuYWZrTG9naWMuY291bnREb3duKTtcclxuXHRcdHRoaXMuYWZrTG9naWMuaGlkZUN1cnJlbnRPdmVybGF5ID0gKCkgPT4gdGhpcy5kZWxlZ2F0ZS5oaWRlQ3VycmVudE92ZXJsYXkoKTtcclxuXHRcdHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zdG9wQWZrV2FybmluZ1RpbWVyID0gKCkgPT4gdGhpcy5hZmtMb2dpYy5zdG9wQWZrV2FybmluZ1RpbWVyKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBjb25uZWN0IHVwIHRoZSBvbkFma0NsaWNrIGFjdGlvbiB3aXRoIGEgbWV0aG9kIHNvIGl0IGNhbiBiZSBleHBvc2VkIHRvIHRoZSBkZWxlZ2F0ZVxyXG5cdCAqL1xyXG5cdG9uQWZrQ2xpY2soKTogdm9pZCB7XHJcblx0XHR0aGlzLmFma0xvZ2ljLm9uQWZrQ2xpY2soKTtcclxuXHJcblx0XHQvLyBpZiB0aGUgc3RyZWFtIGlzIHBhdXNlZCBwbGF5IGl0XHJcblx0XHRpZiAodGhpcy52aWRlb1BsYXllci52aWRlb0VsZW1lbnQucGF1c2VkID09PSB0cnVlKSB7XHJcblx0XHRcdHRoaXMucGxheVN0cmVhbSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVzdGFydCB0aGUgc3RyZWFtIGF1dG9tYXRpY2l0eSB3aXRob3V0IHJlZnJlc2hpbmcgdGhlIHBhZ2VcclxuXHQgKi9cclxuXHRyZXN0YXJ0U3RyZWFtQXV0b21hdGljaXR5KCkge1xyXG5cdFx0Ly8gaWYgdGhlcmUgaXMgbm8gd2ViU29ja2V0Q29udHJvbGxlciByZXR1cm4gaW1tZWRpYXRlbHkgb3IgdGhpcyB3aWxsIG5vdCB3b3JrXHJcblx0XHRpZiAoIXRoaXMud2ViU29ja2V0Q29udHJvbGxlcikge1xyXG5cdFx0XHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiVGhlIFdlYiBTb2NrZXQgQ29udHJvbGxlciBkb2VzIG5vdCBleGlzdCBzbyB0aGlzIHdpbGwgbm90IHdvcmsgcmlnaHQgbm93LlwiKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIGlmIGEgd2Vic29ja2V0IG9iamVjdCBoYXMgbm90IGJlZW4gY3JlYXRlZCBjb25uZWN0IG5vcm1hbGx5IHdpdGhvdXQgY2xvc2luZyBcclxuXHRcdGlmICghdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLndlYlNvY2tldCkge1xyXG5cdFx0XHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiQSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBoYXMgbm90IGJlZW4gbWFkZSB5ZXQgc28gd2Ugd2lsbCBzdGFydCB0aGUgc3RyZWFtXCIpO1xyXG5cdFx0XHR0aGlzLmRlbGVnYXRlLm9uV2ViUnRjQXV0b0Nvbm5lY3QoKTtcclxuXHRcdFx0dGhpcy5jb25uZWN0VG9TaWduYWxsaW5nU2V2ZXIoKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBzZXQgdGhlIHJlcGxheSBzdGF0dXMgc28gd2UgZ2V0IGEgdGV4dCBvdmVybGF5IG92ZXIgYW4gYWN0aW9uIG92ZXJsYXlcclxuXHRcdFx0dGhpcy5kZWxlZ2F0ZS5zaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Ly8gc2V0IHRoZSBkaXNjb25uZWN0IG1lc3NhZ2VcclxuXHRcdFx0dGhpcy5zZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKFwiUmVzdGFydGluZyBzdHJlYW0gbWFudWFsbHlcIik7XHJcblxyXG5cdFx0XHQvLyBjbG9zZSB0aGUgY29ubmVjdGlvbiBcclxuXHRcdFx0dGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcigpO1xyXG5cclxuXHRcdFx0Ly8gd2FpdCBmb3IgdGhlIGNvbm5lY3Rpb24gdG8gY2xvc2UgYW5kIHJlc3RhcnQgdGhlIGNvbm5lY3Rpb25cclxuXHRcdFx0bGV0IGF1dG9Db25uZWN0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMuZGVsZWdhdGUub25XZWJSdGNBdXRvQ29ubmVjdCgpO1xyXG5cdFx0XHRcdHRoaXMuY29ubmVjdFRvU2lnbmFsbGluZ1NldmVyKCk7XHJcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KGF1dG9Db25uZWN0VGltZW91dCk7XHJcblx0XHRcdH0sIDMwMDApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2V0cyBpZiB3ZSBhcmUgZW5sYXJnaW5nIHRoZSBkaXNwbGF5IHRvIGZpbGwgdGhlIHdpbmRvdyBmb3IgZnJlZXplIGZyYW1lcyBhbmQgdWkgY29udHJvbGxlclxyXG5cdCAqIEBwYXJhbSBpc0ZpbGxpbmcgaXMgdGhlIGRpc3BsYXkgZmlsbGluZyBvciBub3RcclxuXHQgKi9cclxuXHRzZXRFbmxhcmdlVG9GaWxsRGlzcGxheShpc0ZpbGxpbmc6IGJvb2xlYW4pIHtcclxuXHRcdHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLmZyZWV6ZUZyYW1lLmVubGFyZ2VEaXNwbGF5VG9GaWxsV2luZG93ID0gaXNGaWxsaW5nO1xyXG5cdFx0dGhpcy51aUNvbnRyb2xsZXIuZW5sYXJnZURpc3BsYXlUb0ZpbGxXaW5kb3cgPSBpc0ZpbGxpbmc7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBMb2FkcyBhIGZyZWV6ZSBmcmFtZSBpZiBpdCBpcyByZXF1aXJlZCBvdGhlcndpc2Ugc2hvd3MgdGhlIHBsYXkgb3ZlcmxheVxyXG5cdCAqL1xyXG5cdGxvYWRGcmVlemVGcmFtZU9yU2hvd1BsYXlPdmVybGF5KCkge1xyXG5cdFx0aWYgKHRoaXMuc2hvdWxkU2hvd1BsYXlPdmVybGF5ID09PSB0cnVlKSB7XHJcblx0XHRcdExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJzaG93aW5nIHBsYXkgb3ZlcmxheVwiKTtcclxuXHRcdFx0dGhpcy5kZWxlZ2F0ZS5zaG93UGxheU92ZXJsYXkoKTtcclxuXHRcdFx0dGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcInNob3dpbmcgZnJlZXplIGZyYW1lXCIpO1xyXG5cdFx0XHR0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5zaG93RnJlZXplRnJhbWUoKTtcclxuXHRcdH1cclxuXHRcdHRoaXMudmlkZW9QbGF5ZXIuc2V0VmlkZW9FbmFibGVkKGZhbHNlKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEVuYWJsZSB0aGUgdmlkZW8gYWZ0ZXIgaGlkaW5nIGEgZnJlZXplIGZyYW1lXHJcblx0ICovXHJcblx0SW52YWxpZGF0ZUZyZWV6ZUZyYW1lQW5kRW5hYmxlVmlkZW8oKSB7XHJcblx0XHR0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5oaWRlRnJlZXplRnJhbWUoKTtcclxuXHRcdGlmICh0aGlzLnZpZGVvUGxheWVyLnZpZGVvRWxlbWVudCkge1xyXG5cdFx0XHR0aGlzLnZpZGVvUGxheWVyLnNldFZpZGVvRW5hYmxlZCh0cnVlKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldFdlYlNvY2tldENvbnRyb2xsZXIoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUGxheXMgdGhlIHN0cmVhbSBhdWRpbyBhbmQgdmlkZW8gc291cmNlIGFuZCBzZXRzIHVwIG90aGVyIHBpZWNlcyB3aGlsZSB0aGUgc3RyZWFtIHN0YXJ0c1xyXG5cdCAqL1xyXG5cdHBsYXlTdHJlYW0oKSB7XHJcblx0XHRpZiAoIXRoaXMudmlkZW9QbGF5ZXIudmlkZW9FbGVtZW50KSB7XHJcblx0XHRcdHRoaXMuZGVsZWdhdGUuc2hvd0Vycm9yT3ZlcmxheShcIkNvdWxkIG5vdCBwbGF5ZXIgdmlkZW8gc3RyZWFtIGJlY2F1c2UgdGhlIHZpZGVvIHBsYXllciB3YXMgbm90IGluaXRpYWxpc2VkIGNvcnJlY3RseS5cIik7XHJcblx0XHRcdExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkNvdWxkIG5vdCBwbGF5ZXIgdmlkZW8gc3RyZWFtIGJlY2F1c2UgdGhlIHZpZGVvIHBsYXllciB3YXMgbm90IGluaXRpYWxpc2VkIGNvcnJlY3RseS5cIik7XHJcblxyXG5cdFx0XHQvLyBzZXQgdGhlIGRpc2Nvbm5lY3QgbWVzc2FnZVxyXG5cdFx0XHR0aGlzLnNldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoXCJTdHJlYW0gbm90IGluaXRpYWxpc2VkIGNvcnJlY3RseVwiKTtcclxuXHJcblx0XHRcdC8vIGNsb3NlIHRoZSBjb25uZWN0aW9uIFxyXG5cdFx0XHR0aGlzLmNsb3NlU2lnbmFsaW5nU2VydmVyKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmlucHV0Q29udHJvbGxlci5yZWdpc3RlclRvdWNoKHRoaXMuY29uZmlnLmZha2VNb3VzZVdpdGhUb3VjaGVzLCB0aGlzLnZpZGVvUGxheWVyLnZpZGVvRWxlbWVudCk7XHJcblx0XHRcdGlmICh0aGlzLnN0cmVhbUNvbnRyb2xsZXIuYXVkaW9FbGVtZW50KSB7XHJcblx0XHRcdFx0dGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudC5wbGF5KCkudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsYXlWaWRlbygpO1xyXG5cdFx0XHRcdH0pLmNhdGNoKChvblJlamVjdGVkUmVhc29uKSA9PiB7XHJcblx0XHRcdFx0XHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIG9uUmVqZWN0ZWRSZWFzb24pO1xyXG5cdFx0XHRcdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhdXRvcGxheWluZyB2aWRlbyB3aXRob3V0IGludGVyYWN0aW9uIC0gdG8gcmVzb2x2ZSB0aGlzIHdlIGFyZSBnb2luZyB0byBzaG93IHRoZSBwbGF5IGJ1dHRvbiBvdmVybGF5LlwiKTtcclxuXHRcdFx0XHRcdHRoaXMuZGVsZWdhdGUuc2hvd1BsYXlPdmVybGF5KCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5wbGF5VmlkZW8oKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLnNob3VsZFNob3dQbGF5T3ZlcmxheSA9IGZhbHNlO1xyXG5cdFx0XHR0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5zaG93RnJlZXplRnJhbWUoKTtcclxuXHRcdFx0dGhpcy5kZWxlZ2F0ZS5oaWRlQ3VycmVudE92ZXJsYXkoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFBsYXlzIHRoZSB2aWRlbyBzdHJlYW1cclxuXHQgKi9cclxuXHRwcml2YXRlIHBsYXlWaWRlbygpIHtcclxuXHRcdC8vIC8vIGhhbmRsZSBwbGF5KCkgd2l0aCAudGhlbiBhcyBpdCBpcyBhbiBhc3luY2hyb25vdXMgY2FsbCAgXHJcblx0XHR0aGlzLnZpZGVvUGxheWVyLnZpZGVvRWxlbWVudC5wbGF5KCkuY2F0Y2goKG9uUmVqZWN0ZWRSZWFzb246IHN0cmluZykgPT4ge1xyXG5cdFx0XHRpZiAodGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudC5zcmNPYmplY3QpIHtcclxuXHRcdFx0XHR0aGlzLnN0cmVhbUNvbnRyb2xsZXIuYXVkaW9FbGVtZW50LnBhdXNlKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBvblJlamVjdGVkUmVhc29uKTtcclxuXHRcdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhdXRvcGxheWluZyB2aWRlbyB3aXRob3V0IGludGVyYWN0aW9uIC0gdG8gcmVzb2x2ZSB0aGlzIHdlIGFyZSBnb2luZyB0byBzaG93IHRoZSBwbGF5IGJ1dHRvbiBvdmVybGF5LlwiKTtcclxuXHRcdFx0dGhpcy5kZWxlZ2F0ZS5zaG93UGxheU92ZXJsYXkoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRW5hYmxlIHRoZSB2aWRlbyB0byBwbGF5IGF1dG9tYXRpY2l0eSBpZiBlbmFibGVTcHNBdXRvcGxheSBpcyB0cnVlXHJcblx0ICovXHJcblx0YXV0b1BsYXlWaWRlb09yU2V0VXBQbGF5T3ZlcmxheSgpIHtcclxuXHRcdGlmICh0aGlzLmNvbmZpZy5lbmFibGVTcHNBdXRvcGxheSA9PT0gdHJ1ZSkge1xyXG5cclxuXHRcdFx0Ly8gc2V0IHVwIHRoZSBhdXRvIHBsYXkgb24gdGhlIHZpZGVvIGVsZW1lbnQgIFxyXG5cdFx0XHR0aGlzLnZpZGVvUGxheWVyLnZpZGVvRWxlbWVudC5hdXRvcGxheSA9IHRydWU7XHJcblxyXG5cdFx0XHQvLyBhdHRlbXB0IHRvIHBsYXkgdGhlIHZpZGVvXHJcblx0XHRcdHRoaXMucGxheVN0cmVhbSgpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5kZWxlZ2F0ZS5zaG93UGxheU92ZXJsYXkoKTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBzZW5kIGFuZCByZXF1ZXN0IGluaXRpYWwgc3RhdHNcclxuXHRcdHRoaXMudWVDb250cm9sTWVzc2FnZS5TZW5kUmVxdWVzdEluaXRpYWxTZXR0aW5ncygpO1xyXG5cdFx0dGhpcy51ZUNvbnRyb2xNZXNzYWdlLlNlbmRSZXF1ZXN0UXVhbGl0eUNvbnRyb2woKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbm5lY3QgdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcclxuXHQgKi9cclxuXHRjb25uZWN0VG9TaWduYWxsaW5nU2V2ZXIoKSB7XHJcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuY29ubmVjdCgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGhpcyB3aWxsIHN0YXJ0IHRoZSBoYW5kc2hha2UgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyXHJcblx0ICogQHBhcmFtIHBlZXJDb25maWcgIC0gUlRDIENvbmZpZ3VyYXRpb24gT3B0aW9ucyBmcm9tIHRoZSBTaWduYWxpbmcgc2VydmVyXHJcblx0ICogQHJlbWFyayBSVEMgUGVlciBDb25uZWN0aW9uIG9uIEljZSBDYW5kaWRhdGUgZXZlbnQgaGF2ZSBpdCBoYW5kbGVkIGJ5IGhhbmRsZSBTZW5kIEljZSBDYW5kaWRhdGVcclxuXHQgKi9cclxuXHRzdGFydFNlc3Npb24ocGVlckNvbmZpZzogUlRDQ29uZmlndXJhdGlvbikge1xyXG5cdFx0Ly8gc2V0IHVwIHVybCBwYXJhbXMgZm9yIFNUVU4sIE1pYyBhbmQgU0ZVXHJcblx0XHR0aGlzLnVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcblxyXG5cdFx0Ly8gY2hlY2sgZm9yIGZvcmNpbmcgdHVyblxyXG5cdFx0aWYgKHRoaXMudXJsUGFyYW1zLmhhcygnRm9yY2VUVVJOJykpIHtcclxuXHRcdFx0Ly8gY2hlY2sgZm9yIGEgdHVybiBzZXJ2ZXJcclxuXHRcdFx0Y29uc3QgaGFzVHVyblNlcnZlciA9IHRoaXMuY2hlY2tUdXJuU2VydmVyQXZhaWxhYmlsaXR5KHBlZXJDb25maWcpO1xyXG5cclxuXHRcdFx0Ly8gY2xvc2UgYW5kIGVycm9yIGlmIHR1cm4gaXMgZm9yY2VkIGFuZCB0aGVyZSBpcyBubyB0dXJuIHNlcnZlclxyXG5cdFx0XHRpZiAoIWhhc1R1cm5TZXJ2ZXIpIHtcclxuXHRcdFx0XHRMb2dnZXIuSW5mbyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIk5vIHR1cm4gc2VydmVyIHdhcyBmb3VuZCBpbiB0aGUgUGVlciBDb25uZWN0aW9uIE9wdGlvbnMuIFRVUk4gY2Fubm90IGJlIGZvcmNlZCwgY2xvc2luZyBjb25uZWN0aW9uLiBQbGVhc2UgdXNlIFNUVU4gaW5zdGVhZFwiKTtcclxuXHRcdFx0XHR0aGlzLnNldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoXCJUVVJOIGNhbm5vdCBiZSBmb3JjZWQsIGNsb3NpbmcgY29ubmVjdGlvbi4gUGxlYXNlIHVzZSBTVFVOIGluc3RlYWQuXCIpO1xyXG5cdFx0XHRcdHRoaXMuY2xvc2VTaWduYWxpbmdTZXJ2ZXIoKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHQvLyBzZXQgdXAgdGhlIHBlZXIgY29ubmVjdGlvbiBjb250cm9sbGVyXHJcblx0XHR0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlciA9IG5ldyBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIocGVlckNvbmZpZywgdGhpcy51cmxQYXJhbXMuaGFzKCdGb3JjZVRVUk4nKSk7XHJcblxyXG5cdFx0Ly9zZXQgdXAgbWljIGNvbnRyb2xsZXJcclxuXHRcdHRoaXMubWljQ29udHJvbGxlciA9IG5ldyBNaWNDb250cm9sbGVyKHRoaXMudXJsUGFyYW1zKVxyXG5cclxuXHRcdC8vIHNldCB1cCBwZWVyIGNvbm5lY3Rpb24gY29udHJvbGxlciB2aWRlbyBzdGF0c1xyXG5cdFx0dGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25WaWRlb1N0YXRzID0gKGV2ZW50OiBBZ2dyZWdhdGVkU3RhdHMpID0+IHRoaXMuaGFuZGxlVmlkZW9TdGF0cyhldmVudCk7XHJcblxyXG5cdFx0LyogV2hlbiB0aGUgUGVlciBDb25uZWN0aW9uIFdhbnRzIHRvIHNlbmQgYW4gb2ZmZXIgaGF2ZSBpdCBoYW5kbGVkICovXHJcblx0XHR0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vblNlbmRXZWJSVENPZmZlciA9IChvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkgPT4gdGhpcy5oYW5kbGVTZW5kV2ViUlRDT2ZmZXIob2ZmZXIpO1xyXG5cclxuXHRcdC8qIFdoZW4gdGhlIFBlZXIgY29ubmVjdGlvbiBpY2UgY2FuZGlkYXRlIGlzIGFkZGVkIGhhdmUgaXQgaGFuZGxlZCAqL1xyXG5cdFx0dGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25QZWVySWNlQ2FuZGlkYXRlID0gKHBlZXJDb25uZWN0aW9uSWNlRXZlbnQ6IFJUQ1BlZXJDb25uZWN0aW9uSWNlRXZlbnQpID0+IHRoaXMuaGFuZGxlU2VuZEljZUNhbmRpZGF0ZShwZWVyQ29ubmVjdGlvbkljZUV2ZW50KTtcclxuXHJcblx0XHQvLyBoYW5kZWwgbWljIGNvbm5lY3Rpb25zIHdpdGggcHJvbWlzZVxyXG5cdFx0dGhpcy5kYXRhQ2hhbm5lbENvbnRyb2xsZXIuY3JlYXRlRGF0YUNoYW5uZWwodGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucGVlckNvbm5lY3Rpb24sIFwiY2lycnVzXCIsIHRoaXMuZGF0YWNoYW5uZWxPcHRpb25zKTtcclxuXHJcblx0XHQvLyBzZXQgdXAgd2ViUnRjIHRleHQgb3ZlcmxheXMgXHJcblx0XHR0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5zaG93VGV4dE92ZXJsYXlDb25uZWN0aW5nID0gKCkgPT4gdGhpcy5kZWxlZ2F0ZS5vbldlYlJ0Y0Nvbm5lY3RpbmcoKTtcclxuXHRcdHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnNob3dUZXh0T3ZlcmxheVNldHVwRmFpbHVyZSA9ICgpID0+IHRoaXMuZGVsZWdhdGUub25XZWJSdGNGYWlsZWQoKTtcclxuXHJcblx0XHQvKiBSVEMgUGVlciBDb25uZWN0aW9uIG9uIFRyYWNrIGV2ZW50IC0+IGhhbmRsZSBvbiB0cmFjayAqL1xyXG5cdFx0dGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25UcmFjayA9ICh0cmFja0V2ZW50OiBSVENUcmFja0V2ZW50KSA9PiB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuaGFuZGxlT25UcmFjayh0cmFja0V2ZW50KTtcclxuXHJcblx0XHQvKiBTdGFydCB0aGUgSGFuZCBzaGFrZSBwcm9jZXNzIGJ5IGNyZWF0aW5nIGFuIE9mZmVyICovXHJcblx0XHR0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5jcmVhdGVPZmZlcih0aGlzLnNkcENvbnN0cmFpbnRzLCB0aGlzLm1pY0NvbnRyb2xsZXIudXNlTWljKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrcyB0aGUgcGVlciBjb25uZWN0aW9uIG9wdGlvbnMgZm9yIGEgdHVybiBzZXJ2ZXIgYW5kIHJldHVybnMgdHJ1ZSBvciBmYWxzZVxyXG5cdCAqL1xyXG5cdGNoZWNrVHVyblNlcnZlckF2YWlsYWJpbGl0eShvcHRpb25zOiBSVENDb25maWd1cmF0aW9uKSB7XHJcblxyXG5cdFx0Ly8gaWYgaWNlU2VydmVycyBpcyBlbXB0eSByZXR1cm4gZmFsc2UgdGhpcyBzaG91bGQgbm90IGJlIHRoZSBnZW5lcmFsIHVzZSBjYXNlIGJ1dCBpcyBoZXJlIGluY2FzZVxyXG5cdFx0aWYgKCFvcHRpb25zLmljZVNlcnZlcnMpIHtcclxuXHRcdFx0TG9nZ2VyLkluZm8oTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0EgdHVybiBzZXZlciB3YXMgbm90IGZvdW5kJyk7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBsb29wIHRocm91Z2ggdGhlIGljZSBzZXJ2ZXJzIHRvIGNoZWNrIGZvciBhIHR1cm4gdXJsXHJcblx0XHRmb3IgKGNvbnN0IGljZVNlcnZlciBvZiBvcHRpb25zLmljZVNlcnZlcnMpIHtcclxuXHRcdFx0Zm9yIChjb25zdCB1cmwgb2YgaWNlU2VydmVyLnVybHMpIHtcclxuXHRcdFx0XHRpZiAodXJsLmluY2x1ZGVzKCd0dXJuJykpIHtcclxuXHRcdFx0XHRcdExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEEgdHVybiBzZXZlciB3YXMgZm91bmQgYXQgJHt1cmx9YCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRMb2dnZXIuSW5mbyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQSB0dXJuIHNldmVyIHdhcyBub3QgZm91bmQnKTtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgd2hlbiBhIENvbmZpZyBNZXNzYWdlIGlzIHJlY2VpdmVkIGNvbnRhaW5zIHRoZSBQZWVyIENvbm5lY3Rpb24gT3B0aW9ucyByZXF1aXJlZCAoU1RVTiBhbmQgVFVSTiBTZXJ2ZXIgSW5mbylcclxuXHQgKiBAcGFyYW0gbWVzc2FnZUNvbmZpZyAtIENvbmZpZyBNZXNzYWdlIHJlY2VpdmVkIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuXHQgKi9cclxuXHRoYW5kbGVPbkNvbmZpZ01lc3NhZ2UobWVzc2FnZUNvbmZpZzogTWVzc2FnZUNvbmZpZykge1xyXG5cclxuXHRcdC8vIFRlbGwgdGhlIFdlYlJ0Y0NvbnRyb2xsZXIgdG8gc3RhcnQgYSBzZXNzaW9uIHdpdGggdGhlIHBlZXIgb3B0aW9ucyBzZW50IGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuXHRcdHRoaXMuc3RhcnRTZXNzaW9uKG1lc3NhZ2VDb25maWcucGVlckNvbm5lY3Rpb25PcHRpb25zKTtcclxuXHJcblx0XHQvLyBXaGVuIHRoZSBzaWduYWxpbmcgc2VydmVyIHNlbmRzIGEgV2ViUlRDIEFuc3dlciBvdmVyIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBoYXZlIHRoZSBXZWJSdGNDb250cm9sbGVyIGhhbmRsZSB0aGUgbWVzc2FnZVxyXG5cdFx0dGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uV2ViUnRjQW5zd2VyID0gKG1lc3NhZ2VBbnN3ZXI6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VBbnN3ZXIpID0+IHRoaXMuaGFuZGxlV2ViUnRjQW5zd2VyKG1lc3NhZ2VBbnN3ZXIpO1xyXG5cclxuXHRcdC8vIFdoZW4gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgc2VuZHMgYSBJY2VDYW5kaWRhdGUgb3ZlciB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24gaGF2ZSB0aGUgV2ViUnRjQ29udHJvbGxlciBoYW5kbGUgdGhlIG1lc3NhZ2VcclxuXHRcdHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbkljZUNhbmRpZGF0ZSA9IChpY2VDYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZUluaXQpID0+IHRoaXMuaGFuZGxlSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGUgdGhlIFJUQyBBbnN3ZXIgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG5cdCAqIEBwYXJhbSBBbnN3ZXIgLSBBbnN3ZXIgTWVzc2FnZSBmcm9tIHRoZSBTaWduYWxpbmcgc2VydmVyXHJcblx0ICovXHJcblx0aGFuZGxlV2ViUnRjQW5zd2VyKEFuc3dlcjogTWVzc2FnZUFuc3dlcikge1xyXG5cdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIlRoZXJlIGlzIGFuIGFuc3dlclwiLCA2KTtcclxuXHJcblx0XHRsZXQgc2RwQW5zd2VyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0ID0ge1xyXG5cdFx0XHRzZHA6IEFuc3dlci5zZHAsXHJcblx0XHRcdHR5cGU6IFwiYW5zd2VyXCJcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5oYW5kbGVBbnN3ZXIoc2RwQW5zd2VyKTtcclxuXHJcblx0XHQvLyBzdGFydCB0aGUgYWZrIHdhcm5pbmcgdGltZXIgYXMgdGhlIGNvbnRhaW5lciBpcyBub3cgcnVubmluZ1xyXG5cdFx0dGhpcy5hZmtMb2dpYy5zdGFydEFma1dhcm5pbmdUaW1lcigpO1xyXG5cclxuXHRcdC8vIHNob3cgdGhlIG92ZXJsYXkgdGhhdCB3ZSBoYXZlIGFuIGFuc3dlclxyXG5cdFx0dGhpcy5kZWxlZ2F0ZS5vbldlYlJ0Y0Fuc3dlcigpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogV2hlbiBhbiBpY2UgQ2FuZGlkYXRlIGlzIHJlY2VpdmVkIGZyb20gdGhlIFNpZ25hbGluZyBzZXJ2ZXIgYWRkIGl0IHRvIHRoZSBQZWVyIENvbm5lY3Rpb24gQ2xpZW50XHJcblx0ICogQHBhcmFtIGljZUNhbmRpZGF0ZSAtIEljZSBDYW5kaWRhdGUgZnJvbSBTZXJ2ZXJcclxuXHQgKi9cclxuXHRoYW5kbGVJY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGVJbml0KSB7XHJcblx0XHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiV2ViIFJUQyBDb250cm9sbGVyOiBvbldlYlJ0Y0ljZVwiLCA2KTtcclxuXHJcblx0XHRsZXQgY2FuZGlkYXRlID0gbmV3IFJUQ0ljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUpO1xyXG5cdFx0dGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuaGFuZGxlT25JY2UoY2FuZGlkYXRlKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNlbmQgdGhlIGljZSBDYW5kaWRhdGUgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxyXG5cdCAgICogQHBhcmFtIGljZUV2ZW50IC0gUlRDIFBlZXIgQ29ubmVjdGlvbkljZUV2ZW50KSB7XHJcblx0ICovXHJcblx0aGFuZGxlU2VuZEljZUNhbmRpZGF0ZShpY2VFdmVudDogUlRDUGVlckNvbm5lY3Rpb25JY2VFdmVudCkge1xyXG5cdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIk9uSWNlQ2FuZGlkYXRlXCIsIDYpO1xyXG5cdFx0aWYgKGljZUV2ZW50LmNhbmRpZGF0ZSAmJiBpY2VFdmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlKSB7XHJcblx0XHRcdHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kSWNlQ2FuZGlkYXRlKGljZUV2ZW50LmNhbmRpZGF0ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZW5kIHRoZSBSVEMgT2ZmZXIgU2Vzc2lvbiB0byB0aGUgU2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XHJcblx0ICogQHBhcmFtIG9mZmVyIC0gUlRDIFNlc3Npb24gRGVzY3JpcHRpb25cclxuXHQgKi9cclxuXHRoYW5kbGVTZW5kV2ViUlRDT2ZmZXIob2ZmZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQpIHtcclxuXHRcdExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJTZW5kaW5nIHRoZSBvZmZlciB0byB0aGUgU2VydmVyXCIsIDYpO1xyXG5cdFx0dGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRXZWJSdGNPZmZlcihvZmZlcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiByZWdpc3RlcnMgdGhlIG1vdXNlIGZvciB1c2UgaW4gSVdlYlJ0Y1BsYXllckNvbnRyb2xsZXJcclxuXHQgKi9cclxuXHRhY3RpdmF0ZVJlZ2lzdGVyTW91c2UoKSB7XHJcblx0XHR0aGlzLmlucHV0Q29udHJvbGxlci5yZWdpc3Rlck1vdXNlKHRoaXMuY29uZmlnLmNvbnRyb2xTY2hlbWUpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2V0cyB1cCB0aGUgRGF0YSBjaGFubmVsIEtleWJvYXJkLCBNb3VzZSwgVUUgQ29udHJvbCBNZXNzYWdlLCBVRSBEZXNjcmlwdG9yXHJcblx0ICovXHJcblx0aGFuZGxlRGF0YUNoYW5uZWxDb25uZWN0ZWQoKSB7XHJcblx0XHRMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiRGF0YSBDaGFubmVsIGlzIG9wZW5cIiwgNik7XHJcblxyXG5cdFx0Ly8gc2hvdyB0aGUgY29ubmVjdGVkIG92ZXJsYXkgXHJcblx0XHR0aGlzLmRlbGVnYXRlLm9uV2ViUnRjQ29ubmVjdGVkKCk7XHJcblxyXG5cdFx0dGhpcy5pbnB1dENvbnRyb2xsZXIgPSBuZXcgSW5wdXRDb250cm9sbGVyKHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLCBudWxsLCB0aGlzLnZpZGVvUGxheWVyKTtcclxuXHJcblx0XHR0aGlzLnVlQ29udHJvbE1lc3NhZ2UgPSBuZXcgVWVDb250cm9sTWVzc2FnZSh0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlcik7XHJcblx0XHR0aGlzLnVlRGVzY3JpcHRvclVpID0gbmV3IFVlRGVzY3JpcHRvclVpKHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLCB0aGlzLmNvbmZpZyk7XHJcblx0XHR0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci51ZURlc2NyaXB0b3JVaSA9IHRoaXMudWVEZXNjcmlwdG9yVWk7XHJcblx0XHR0aGlzLmlucHV0Q29udHJvbGxlci51ZURlc2NyaXB0b3JVaSA9IHRoaXMudWVEZXNjcmlwdG9yVWk7XHJcblx0XHRjb25zb2xlLmxvZyhcImNvbm5lY3RlZFwiKTtcclxuXHRcdHRoaXMuYWN0aXZhdGVSZWdpc3Rlck1vdXNlKClcclxuXHRcdHRoaXMuaW5wdXRDb250cm9sbGVyLnJlZ2lzdGVyS2V5Qm9hcmQodGhpcy5jb25maWcuc3VwcHJlc3NCcm93c2VyS2V5cyk7XHJcblx0XHR0aGlzLmlucHV0Q29udHJvbGxlci5yZWdpc3RlckdhbWVQYWQoKTtcclxuXHJcblx0XHR0aGlzLnZpZGVvUGxheWVyLnNldE1vdXNlRW50ZXJBbmRMZWF2ZUV2ZW50cygoKSA9PiB0aGlzLmlucHV0Q29udHJvbGxlci5tb3VzZUNvbnRyb2xsZXIuc2VuZE1vdXNlRW50ZXIoKSwgKCkgPT4gdGhpcy5pbnB1dENvbnRyb2xsZXIubW91c2VDb250cm9sbGVyLnNlbmRNb3VzZUxlYXZlKCkpO1xyXG5cclxuXHRcdHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcclxuXHJcblx0XHR0aGlzLmRhdGFDaGFubmVsQ29udHJvbGxlci5wcm9jZXNzRnJlZXplRnJhbWVNZXNzYWdlID0gKHZpZXcpID0+IHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLnByb2Nlc3NGcmVlemVGcmFtZU1lc3NhZ2UodmlldywgKCkgPT4gdGhpcy5sb2FkRnJlZXplRnJhbWVPclNob3dQbGF5T3ZlcmxheSgpKTtcclxuXHRcdHRoaXMuZGF0YUNoYW5uZWxDb250cm9sbGVyLm9uVW5GcmVlemVGcmFtZSA9ICgpID0+IHRoaXMuSW52YWxpZGF0ZUZyZWV6ZUZyYW1lQW5kRW5hYmxlVmlkZW8oKTtcclxuXHJcblx0XHRzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmdldFN0YXRzKCksIDEwMDApO1xyXG5cclxuXHRcdC8vIGVpdGhlciBhdXRvcGxheSB0aGUgdmlkZW8gb3Igc2V0IHVwIHRoZSBwbGF5IG92ZXJsYXlcclxuXHRcdHRoaXMuYXV0b1BsYXlWaWRlb09yU2V0VXBQbGF5T3ZlcmxheSgpO1xyXG5cclxuXHRcdHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcclxuXHJcblx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRVcGRhdGVWaWRlb1N0cmVhbVNpemUodGhpcy52aWRlb1BsYXllci52aWRlb0VsZW1lbnQuY2xpZW50V2lkdGgsIHRoaXMudmlkZW9QbGF5ZXIudmlkZW9FbGVtZW50LmNsaWVudEhlaWdodCk7XHJcblxyXG5cdFx0dGhpcy5kZWxlZ2F0ZS5vblZpZGVvSW5pdGlhbGlzZWQoKTtcclxuXHJcblx0XHR0aGlzLnVpQ29udHJvbGxlci51cGRhdGVWaWRlb1N0cmVhbVNpemUgPSAoKSA9PiB0aGlzLnVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogSGFuZGxlcyB3aGVuIHRoZSB3ZWIgc29ja2V0IHJlY2VpdmVzIGFuIGF1dGhlbnRpY2F0aW9uIHJlc3BvbnNlXHJcblx0ICogQHBhcmFtIGF1dGhSZXNwb25zZSAtIEF1dGhlbnRpY2F0aW9uIFJlc3BvbnNlXHJcblx0ICovXHJcblx0aGFuZGxlQXV0aGVudGljYXRpb25SZXNwb25zZShhdXRoUmVzcG9uc2U6IE1lc3NhZ2VBdXRoUmVzcG9uc2UpIHtcclxuXHRcdHRoaXMuZGVsZWdhdGUub25BdXRoZW50aWNhdGlvblJlc3BvbnNlKGF1dGhSZXNwb25zZSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGVzIHdoZW4gdGhlIHN0cmVhbSBzaXplIGNoYW5nZXNcclxuXHQgKi9cclxuXHR1cGRhdGVWaWRlb1N0cmVhbVNpemUoKSB7XHJcblx0XHQvLyBDYWxsIHRoZSBzZXR0ZXIgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvblxyXG5cdFx0aWYgKCF0aGlzLm1hdGNoVmlld3BvcnRSZXNvbHV0aW9uKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdC8vP1xyXG5cdFx0bGV0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cdFx0aWYgKG5vdyAtIHRoaXMubGFzdFRpbWVSZXNpemVkID4gMTAwMCkge1xyXG5cdFx0XHQvLyBnZXQgdGhlIHJvb3QgZGl2IGZyb20gY29uZmlnIFxyXG5cdFx0XHRpZiAoIXRoaXMuY29uZmlnLnBsYXllckVsZW1lbnQpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kVXBkYXRlVmlkZW9TdHJlYW1TaXplKHRoaXMudmlkZW9QbGF5ZXIudmlkZW9FbGVtZW50LmNsaWVudFdpZHRoLCB0aGlzLnZpZGVvUGxheWVyLnZpZGVvRWxlbWVudC5jbGllbnRIZWlnaHQpO1xyXG5cdFx0XHR0aGlzLmxhc3RUaW1lUmVzaXplZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1Jlc2l6aW5nIHRvbyBvZnRlbiAtIHNraXBwaW5nJywgNik7XHJcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVvdXQpO1xyXG5cdFx0XHR0aGlzLnJlc2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMudXBkYXRlVmlkZW9TdHJlYW1TaXplLCAxMDAwKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgd2hlbiB0aGUgSW5zdGFuY2UgU3RhdGUgQ2hhbmdlc1xyXG5cdCAqIEBwYXJhbSBpbnN0YW5jZVN0YXRlICAtIEluc3RhbmNlIFN0YXRlIFxyXG5cdCAqL1xyXG5cdGhhbmRsZUluc3RhbmNlU3RhdGVDaGFuZ2UoaW5zdGFuY2VTdGF0ZTogTWVzc2FnZUluc3RhbmNlU3RhdGUpIHtcclxuXHRcdHRoaXMuZGVsZWdhdGUub25JbnN0YW5jZVN0YXRlQ2hhbmdlKGluc3RhbmNlU3RhdGUpXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgdGhlIGZyZWV6ZSBmcmFtZSBvdmVybGF5IHRvIHRoZSBwbGF5ZXIgZGl2XHJcblx0ICogQHBhcmFtIHBsYXllckVsZW1lbnQgLSBUaGUgZGl2IGVsZW1lbnQgb2YgdGhlIFBsYXllclxyXG5cdCAqL1xyXG5cdHNldFVwTW91c2VBbmRGcmVlemVGcmFtZShwbGF5ZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudCkge1xyXG5cdFx0Ly8gQ2FsY3VsYXRpbmcgYW5kIG5vcm1hbGl6aW5nIHBvc2l0aW9ucyBkZXBlbmRzIG9uIHRoZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBwbGF5ZXIuXHJcblx0XHR0aGlzLnBsYXllckVsZW1lbnRDbGllbnRSZWN0ID0gcGxheWVyRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLmZyZWV6ZUZyYW1lLnJlc2l6ZSgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2xvc2UgdGhlIENvbm5lY3Rpb24gdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuXHQgKi9cclxuXHRjbG9zZVNpZ25hbGluZ1NlcnZlcigpIHtcclxuXHRcdHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5jbG9zZSgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRmlyZXMgYSBWaWRlbyBTdGF0cyBFdmVudCBpbiB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvbiBcclxuXHQgKi9cclxuXHRnZXRTdGF0cygpIHtcclxuXHRcdHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLmdlbmVyYXRlU3RhdHMoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNlbmQgYSBMYXRlbmN5IFRlc3QgUmVxdWVzdCB0byB0aGUgVUUgSW5zdGFuY2VcclxuXHQgKi9cclxuXHRzZW5kTGF0ZW5jeVRlc3QoKSB7XHJcblx0XHR0aGlzLmxhdGVuY3lTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG5cdFx0dGhpcy51ZUNvbnRyb2xNZXNzYWdlLnNlbmRMYXRlbmN5VGVzdCh0aGlzLmxhdGVuY3lTdGFydFRpbWUpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2VuZCB0aGUgRW5jb2RlciBTZXR0aW5ncyB0byB0aGUgVUUgSW5zdGFuY2UgYXMgYSBVRSBVSSBEZXNjcmlwdG9yLlxyXG5cdCAqIEBwYXJhbSBlbmNvZGVyIC0gRW5jb2RlciBTZXR0aW5nc1xyXG5cdCAqL1xyXG5cdHNlbmRFbmNvZGVyU2V0dGluZ3MoZW5jb2RlcjogRW5jb2Rlcikge1xyXG5cdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIi0tLS0gICBFbmNvZGVyIFNldHRpbmdzICAgIC0tLS1cXG5cIiArIEpTT04uc3RyaW5naWZ5KGVuY29kZXIsIHVuZGVmaW5lZCwgNCkgKyBcIlxcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cIiwgNik7XHJcblxyXG5cdFx0aWYgKGVuY29kZXIuUmF0ZUNvbnRyb2wgIT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRFbmNvZGVyUmF0ZUNvbnRyb2woZW5jb2Rlci5SYXRlQ29udHJvbCk7XHJcblx0XHR9XHJcblx0XHRpZiAoZW5jb2Rlci5UYXJnZXRCaXRyYXRlICE9IG51bGwpIHtcclxuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kRW5jb2RlclRhcmdldEJpdFJhdGUoZW5jb2Rlci5UYXJnZXRCaXRyYXRlKTtcclxuXHRcdH1cclxuXHRcdGlmIChlbmNvZGVyLk1heEJpdHJhdGUgIT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRFbmNvZGVyTWF4Qml0cmF0ZVZicihlbmNvZGVyLk1heEJpdHJhdGUpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGVuY29kZXIuTWluUVAgIT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRFbmNvZGVyTWluUVAoZW5jb2Rlci5NaW5RUCk7XHJcblx0XHR9XHJcblx0XHRpZiAoZW5jb2Rlci5NYXhRUCAhPSBudWxsKSB7XHJcblx0XHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZEVuY29kZXJNYXhRUChlbmNvZGVyLk1heFFQKTtcclxuXHRcdH1cclxuXHRcdGlmIChlbmNvZGVyLkZpbGxlckRhdGEgIT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRFbmNvZGVyRW5hYmxlRmlsbGVyRGF0YShlbmNvZGVyLkZpbGxlckRhdGEpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGVuY29kZXIuTXVsdGlQYXNzICE9IG51bGwpIHtcclxuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kRW5jb2Rlck11bHRpUGFzcyhlbmNvZGVyLk11bHRpUGFzcyk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZW5kIHRoZSBXZWJSVEMgU2V0dGluZ3MgdG8gdGhlIFVFIEluc3RhbmNlIGFzIGEgVUUgVUkgRGVzY3JpcHRvci5cclxuXHQgKiBAcGFyYW0gd2ViUlRDIC0gV2ViIFJUQyBTZXR0aW5ncyBcclxuXHQgKi9cclxuXHRzZW5kV2ViUnRjU2V0dGluZ3Mod2ViUlRDOiBXZWJSVEMpIHtcclxuXHRcdExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCItLS0tICAgV2ViUlRDIFNldHRpbmdzICAgIC0tLS1cXG5cIiArIEpTT04uc3RyaW5naWZ5KHdlYlJUQywgdW5kZWZpbmVkLCA0KSArIFwiXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVwiLCA2KTtcclxuXHJcblx0XHRpZiAod2ViUlRDLkRlZ3JhZGF0aW9uUHJlZiAhPSBudWxsKSB7XHJcblx0XHRcdHRoaXMudWVEZXNjcmlwdG9yVWkuc2VuZFdlYlJ0Y0RlZ3JhZGF0aW9uUHJlZmVyZW5jZSh3ZWJSVEMuRGVncmFkYXRpb25QcmVmKVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh3ZWJSVEMuRlBTICE9IG51bGwpIHtcclxuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kV2ViUnRjRnBzKHdlYlJUQy5GUFMpO1xyXG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRXZWJSdGNNYXhGcHMod2ViUlRDLkZQUyk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHdlYlJUQy5NaW5CaXRyYXRlICE9IG51bGwpIHtcclxuXHRcdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kV2ViUnRjTWluQml0cmF0ZSh3ZWJSVEMuTWluQml0cmF0ZSk7XHJcblx0XHR9XHJcblx0XHRpZiAod2ViUlRDLk1heEJpdHJhdGUgIT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRXZWJSdGNNYXhCaXRyYXRlKHdlYlJUQy5NYXhCaXRyYXRlKTtcclxuXHRcdH1cclxuXHRcdGlmICh3ZWJSVEMuTG93UVAgIT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRXZWJSdGNMb3dRcFRocmVzaG9sZCh3ZWJSVEMuTG93UVApO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHdlYlJUQy5IaWdoUVAgIT0gbnVsbCkge1xyXG5cdFx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRXZWJSdGNIaWdoUXBUaHJlc2hvbGQod2ViUlRDLkhpZ2hRUCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZW5kIEFnZ3JlZ2F0ZWQgU3RhdHMgdG8gdGhlIFNpZ25hbGluZyBTZXJ2ZXJcclxuXHQgKiBAcGFyYW0gc3RhdHMgLSBBZ2dyZWdhdGVkIFN0YXRzXHJcblx0ICovXHJcblx0c2VuZFN0YXRzVG9TaWduYWxsaW5nU2VydmVyKHN0YXRzOiBBZ2dyZWdhdGVkU3RhdHMpIHtcclxuXHRcdExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCItLS0tICAgU2VuZGluZyBBZ2dyZWdhdGVkIFN0YXRzIHRvIFNpZ25hbGluZyBTZXJ2ZXIgICAtLS0tXFxuXCIgKyBKU09OLnN0cmluZ2lmeShzdGF0cywgdW5kZWZpbmVkLCA0KSArIFwiXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cIiwgNik7XHJcblx0XHR0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFN0YXRzKHN0YXRzKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNlbmRzIGEgVUkgSW50ZXJhY3Rpb24gRGVzY3JpcHRvciB0byB0aGUgVUUgSW5zdGFuY2VcclxuXHQgKiBAcGFyYW0gbWVzc2FnZSAtIFN0cmluZyB0byBzZW5kIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG5cdCAqL1xyXG5cdHNlbmRVZVVpRGVzY3JpcHRvcihtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCItLS0tICAgVUUgVUkgSW50ZXJhY3Rpb24gU3RyaW5nICAgLS0tLVxcblwiICsgSlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgdW5kZWZpbmVkLCA0KSArIFwiXFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIsIDYpO1xyXG5cdFx0dGhpcy51ZURlc2NyaXB0b3JVaS5zZW5kVWlJbnRlcmFjdGlvbihtZXNzYWdlKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNlbmRzIHRoZSBVSSBEZXNjcmlwdG9yIGBzdGF0IGZwc2AgdG8gdGhlIFVFIEluc3RhbmNlIFxyXG5cdCAqL1xyXG5cdHNlbmRTaG93RnBzKCk6IHZvaWQge1xyXG5cdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIi0tLS0gICBTZW5kaW5nIHNob3cgc3RhdCB0byBVRSAgIC0tLS1cIiwgNik7XHJcblx0XHR0aGlzLnVlRGVzY3JpcHRvclVpLnNlbmRTaG93RnBzKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZW5kcyBhIHJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlIHRvIGhhdmUgb3duZXJzaGlwIG9mIFF1YWxpdHlcclxuXHQgKi9cclxuXHRzZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sT3duZXJzaGlwKCk6IHZvaWQge1xyXG5cdFx0TG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIi0tLS0gICBTZW5kaW5nIFJlcXVlc3QgdG8gQ29udHJvbCBRdWFsaXR5ICAtLS0tXCIsIDYpO1xyXG5cdFx0dGhpcy51ZUNvbnRyb2xNZXNzYWdlLlNlbmRSZXF1ZXN0UXVhbGl0eUNvbnRyb2woKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgd2hlbiBhIExhdGVuY3kgVGVzdCBSZXN1bHQgYXJlIHJlY2VpdmVkIGZyb20gdGhlIFVFIEluc3RhbmNlXHJcblx0ICogQHBhcmFtIGxhdGVuY3lUaW1pbmdzIC0gTGF0ZW5jeSBUZXN0IFRpbWluZ3NcclxuXHQgKi9cclxuXHRoYW5kbGVMYXRlbmN5VGVzdFJlc3VsdChsYXRlbmN5VGltaW5nczogTGF0ZW5jeVRlc3RSZXN1bHRzKSB7XHJcblx0XHRsYXRlbmN5VGltaW5ncy50ZXN0U3RhcnRUaW1lTXMgPSB0aGlzLmxhdGVuY3lTdGFydFRpbWU7XHJcblx0XHRsYXRlbmN5VGltaW5ncy5icm93c2VyUmVjZWlwdFRpbWVNcyA9IERhdGUubm93KCk7XHJcblxyXG5cdFx0bGF0ZW5jeVRpbWluZ3MubGF0ZW5jeUV4Y2x1ZGluZ0RlY29kZSA9IH5+KGxhdGVuY3lUaW1pbmdzLmJyb3dzZXJSZWNlaXB0VGltZU1zIC0gbGF0ZW5jeVRpbWluZ3MudGVzdFN0YXJ0VGltZU1zKTtcclxuXHRcdGxhdGVuY3lUaW1pbmdzLnRlc3REdXJhdGlvbiA9IH5+KGxhdGVuY3lUaW1pbmdzLlRyYW5zbWlzc2lvblRpbWVNcyAtIGxhdGVuY3lUaW1pbmdzLlJlY2VpcHRUaW1lTXMpO1xyXG5cdFx0bGF0ZW5jeVRpbWluZ3MubmV0d29ya0xhdGVuY3kgPSB+fihsYXRlbmN5VGltaW5ncy5sYXRlbmN5RXhjbHVkaW5nRGVjb2RlIC0gbGF0ZW5jeVRpbWluZ3MudGVzdER1cmF0aW9uKTtcclxuXHJcblx0XHRpZiAobGF0ZW5jeVRpbWluZ3MuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgJiYgbGF0ZW5jeVRpbWluZ3MuYnJvd3NlclJlY2VpcHRUaW1lTXMpIHtcclxuXHRcdFx0bGF0ZW5jeVRpbWluZ3MuZW5kVG9FbmRMYXRlbmN5ID0gfn4obGF0ZW5jeVRpbWluZ3MuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgKyBsYXRlbmN5VGltaW5ncy5uZXR3b3JrTGF0ZW5jeSwgKyBsYXRlbmN5VGltaW5ncy5DYXB0dXJlVG9TZW5kTXMpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5kZWxlZ2F0ZS5vbkxhdGVuY3lUZXN0UmVzdWx0KGxhdGVuY3lUaW1pbmdzKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgd2hlbiB0aGUgRW5jb2RlciBhbmQgV2ViIFJUQyBTZXR0aW5ncyBhcmUgcmVjZWl2ZWQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcclxuXHQgKiBAcGFyYW0gc2V0dGluZ3MgLSBJbml0aWFsIEVuY29kZXIgYW5kIFdlYiBSVEMgU2V0dGluZ3NcclxuXHQgKi9cclxuXHRoYW5kbGVJbml0aWFsU2V0dGluZ3Moc2V0dGluZ3M6IEluaXRpYWxTZXR0aW5ncykge1xyXG5cdFx0dGhpcy5kZWxlZ2F0ZS5vbkluaXRpYWxTZXR0aW5ncyhzZXR0aW5ncyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGVzIHdoZW4gdGhlIFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgYXJlIHJlY2VpdmVkIGZyb20gdGhlIFVFIEluc3RhbmNlXHJcblx0ICogQHBhcmFtIEF2Z1FQIC0gRW5jb2RlcnMgUXVhbnRpemF0aW9uIFBhcmFtZXRlclxyXG5cdCAqL1xyXG5cdGhhbmRsZVZpZGVvRW5jb2RlckF2Z1FQKEF2Z1FQOiBudW1iZXIpIHtcclxuXHRcdHRoaXMuZGVsZWdhdGUub25WaWRlb0VuY29kZXJBdmdRUChBdmdRUCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGbGFnIHNldCBpZiB0aGUgdXNlciBoYXMgUXVhbGl0eSBPd25lcnNoaXBcclxuXHQgKiBAcGFyYW0gaGFzUXVhbGl0eU93bmVyc2hpcCAtIERvZXMgdGhlIGN1cnJlbnQgY2xpZW50IGhhdmUgUXVhbGl0eSBPd25lcnNoaXBcclxuXHQgKi9cclxuXHRoYW5kbGVRdWFsaXR5Q29udHJvbE93bmVyc2hpcChoYXNRdWFsaXR5T3duZXJzaGlwOiBib29sZWFuKSB7XHJcblx0XHR0aGlzLmRlbGVnYXRlLm9uUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAoaGFzUXVhbGl0eU93bmVyc2hpcCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGVzIHdoZW4gdGhlIEFnZ3JlZ2F0ZWQgc3RhdHMgYXJlIENvbGxlY3RlZFxyXG5cdCAqIEBwYXJhbSBzdGF0cyAtIEFnZ3JlZ2F0ZWQgU3RhdHNcclxuXHQgKi9cclxuXHRoYW5kbGVWaWRlb1N0YXRzKHN0YXRzOiBBZ2dyZWdhdGVkU3RhdHMpIHtcclxuXHRcdHRoaXMuZGVsZWdhdGUub25WaWRlb1N0YXRzKHN0YXRzKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCogVG8gUmVzaXplIHRoZSBWaWRlbyBQbGF5ZXIgZWxlbWVudFxyXG5cdCovXHJcblx0cmVzaXplUGxheWVyU3R5bGUoKTogdm9pZCB7XHJcblx0XHR0aGlzLnVpQ29udHJvbGxlci5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHRoZSBvdmVycmlkZGVuIGRpc2Nvbm5lY3QgbWVzc2FnZVxyXG5cdCAqL1xyXG5cdGdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKTogc3RyaW5nIHtcclxuXHRcdHJldHVybiB0aGlzLmRpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXQgdGhlIG92ZXJyaWRlIGZvciB0aGUgZGlzY29ubmVjdCBtZXNzYWdlXHJcblx0ICovXHJcblx0c2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdHRoaXMuZGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSA9IG1lc3NhZ2U7XHJcblx0fVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgVHlwZXMgb2YgTWVzc2FnZXMgdGhhdCB3aWxsIGJlIHJlY2VpdmVkXHJcbiAqL1xyXG5leHBvcnQgZW51bSBNZXNzYWdlUmVjdlR5cGVzIHtcclxuICAgIEFVVEhFTlRJQ0FUSU9OX1JFUVVJUkVEID0gXCJhdXRoZW50aWNhdGlvblJlcXVpcmVkXCIsXHJcbiAgICBBVVRIRU5USUNBVElPTl9SRVNQT05TRSA9IFwiYXV0aGVudGljYXRpb25SZXNwb25zZVwiLFxyXG4gICAgSU5TVEFOQ0VfU1RBVEUgPSBcImluc3RhbmNlU3RhdGVcIixcclxuICAgIENPTkZJRyA9IFwiY29uZmlnXCIsXHJcbiAgICBQTEFZRVJfQ09VTlQgPSBcInBsYXllckNvdW50XCIsXHJcbiAgICBBTlNXRVIgPSBcImFuc3dlclwiLFxyXG4gICAgSUNFX0NBTkRJREFURSA9IFwiaWNlQ2FuZGlkYXRlXCIsXHJcbiAgICBQSU5HID0gXCJwaW5nXCJcclxufVxyXG5cclxuLyoqXHJcbiAqIFR5cGVzIG9mIEF1dGhlbnRpY2F0aW9uIHJlcG9zZXMgXHJcbiAqL1xyXG5leHBvcnQgZW51bSBNZXNzYWdlQXV0aFJlc3BvbnNlT3V0Y29tZVR5cGUge1xyXG4gICAgUkVESVJFQ1QgPSBcIlJFRElSRUNUXCIsXHJcbiAgICBJTlZBTElEX1RPS0VOID0gXCJJTlZBTElEX1RPS0VOXCIsXHJcbiAgICBBVVRIRU5USUNBVEVEID0gXCJBVVRIRU5USUNBVEVEXCIsXHJcbiAgICBFUlJPUiA9IFwiRVJST1JcIlxyXG59XHJcblxyXG4vKipcclxuICogU3RhdGVzIG9mIHRoZSBVRSBJbnN0YW5jZVxyXG4gKi9cclxuZXhwb3J0IGVudW0gSW5zdGFuY2VTdGF0ZSB7XHJcbiAgICBVTkFMTE9DQVRFRCA9IFwiVU5BTExPQ0FURURcIixcclxuICAgIFBFTkRJTkcgPSBcIlBFTkRJTkdcIixcclxuICAgIEZBSUxFRCA9IFwiRkFJTEVEXCIsXHJcbiAgICBSRUFEWSA9IFwiUkVBRFlcIlxyXG59XHJcblxyXG4vKipcclxuICogQ29uY3JldGUgUmVjZWl2ZWQgTWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzc2FnZVJlY3Yge1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgaWQ6IHN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkIE1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VBdXRoUmVxdWlyZWQgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7IH1cclxuXHJcbi8qKlxyXG4gKiBBdXRoZW50aWNhdGlvbiBSZXNwb25zZSBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlQXV0aFJlc3BvbnNlIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG4gICAgb3V0Y29tZTogTWVzc2FnZUF1dGhSZXNwb25zZU91dGNvbWVUeXBlO1xyXG4gICAgcmVkaXJlY3Q6IHN0cmluZztcclxuICAgIGVycm9yOiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnN0YW5jZSBTdGF0ZSBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlSW5zdGFuY2VTdGF0ZSBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxuICAgIHN0YXRlOiBJbnN0YW5jZVN0YXRlO1xyXG4gICAgZGV0YWlsczogc3RyaW5nO1xyXG4gICAgcHJvZ3Jlc3M6IG51bWJlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvbmZpZyBNZXNzYWdlIFdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlQ29uZmlnIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG4gICAgcGVlckNvbm5lY3Rpb25PcHRpb25zOiBSVENDb25maWd1cmF0aW9uOyBcclxufVxyXG5cclxuLyoqXHJcbiAqIFBsYXllciBDb3VudCBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlUGxheWVyQ291bnQgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XHJcbiAgICBjb3VudDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogV2ViIFJUQyBvZmZlciBBbnN3ZXIgTWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzc2FnZUFuc3dlciBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxuICAgIHNkcDogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogSWNlIENhbmRpZGF0ZSBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlSWNlQ2FuZGlkYXRlIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG4gICAgY2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGVJbml0O1xyXG59IiwiaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuaW1wb3J0IHsgQWdncmVnYXRlZFN0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHNcIjtcclxuaW1wb3J0IHsgQ2FuZGlkYXRlUGFpclN0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVQYWlyU3RhdHNcIjtcclxuaW1wb3J0IHsgQ2FuZGlkYXRlU3RhdCB9IGZyb20gXCIuLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlU3RhdFwiO1xyXG5pbXBvcnQgeyBkYXRhQ2hhbm5lbFN0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9EYXRhQ2hhbm5lbFN0YXRzXCI7XHJcbmltcG9ydCB7IGluYm91bmRBdWRpb1N0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9JbmJvdW5kQXVkaW9TdGF0c1wiO1xyXG5pbXBvcnQgeyBpbmJvdW5kVmlkZW9TdGF0cyB9IGZyb20gXCIuLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvSW5ib3VuZFZpZGVvU3RhdHNcIjtcclxuaW1wb3J0IHsgT3V0Qm91bmRWaWRlb1N0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9PdXRCb3VuZFZpZGVvU3RhdHNcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgU2VuZCBUeXBlcyB0aGF0IGFyZSBwdXNoZWQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gKi9cclxuZXhwb3J0IGVudW0gTWVzc2FnZVNlbmRUeXBlcyB7XHJcbiAgICBJQ0VfQ0FORElEQVRFID0gXCJpY2VDYW5kaWRhdGVcIixcclxuICAgIFNUQVRTID0gXCJzdGF0c1wiLFxyXG4gICAgQVVUSEVOVElDQVRJT05fUkVRVUVTVCA9IFwiYXV0aGVudGljYXRpb25SZXF1ZXN0XCIsXHJcbiAgICBSRVFVRVNUX0lOU1RBTkNFID0gXCJyZXF1ZXN0SW5zdGFuY2VcIixcclxuICAgIE9GRkVSID0gXCJvZmZlclwiLFxyXG4gICAgUE9ORyA9IFwicG9uZ1wiXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIFdyYXBwZXIgZm9yIHRoZSBtZXNzYWdlIHRvIHNlbmQgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlU2VuZCBpbXBsZW1lbnRzIFNlbmQge1xyXG4gICAgdHlwZTogTWVzc2FnZVNlbmRUeXBlcztcclxuICAgIHBlZXJDb25uZWN0aW9uT3B0aW9uczogT2JqZWN0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVHVybnMgdGhlIHdyYXBwZXIgaW50byBhIEpTT04gU3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyAtIEpTT04gU3RyaW5nIG9mIHRoZSBNZXNzYWdlIHRvIHNlbmRcclxuICAgICAqL1xyXG4gICAgcGF5bG9hZCgpIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiU2VuZGluZyA9PiBcXG5cIiArIEpTT04uc3RyaW5naWZ5KHRoaXMsIHVuZGVmaW5lZCwgNCksIDYpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZW5kIHtcclxuICAgIC8qKlxyXG4gICAgICogVHVybnMgdGhlIHdyYXBwZXIgaW50byBhIEpTT04gU3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyAtIEpTT04gU3RyaW5nIG9mIHRoZSBNZXNzYWdlIHRvIHNlbmRcclxuICAgICAqL1xyXG4gICAgcGF5bG9hZDogKCkgPT4gc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICogQXV0aCBSZXF1ZXN0IE1lc3NhZ2UgV3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VBdXRoUmVxdWVzdCBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIHRva2VuOiBzdHJpbmc7XHJcbiAgICBwcm92aWRlcjogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRva2VuIC0gVG9rZW4gUHJvdmlkZWQgYnkgdGhlIEF1dGggUHJvdmlkZXJcclxuICAgICAqIEBwYXJhbSBwcm92aWRlciAtIE5hbWUgb2YgdGhlIHByb3ZpZGVyIHRoYXQgaXMgcmVnaXN0ZXJlZCBpbiB0aGUgYXV0aCBwbHVnaW5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9rZW46IHN0cmluZywgcHJvdmlkZXI6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5BVVRIRU5USUNBVElPTl9SRVFVRVNUO1xyXG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcclxuICAgICAgICB0aGlzLnByb3ZpZGVyID0gcHJvdmlkZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnN0YW5jZSBSZXF1ZXN0IE1lc3NhZ2UgV3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VQb25nIGV4dGVuZHMgTWVzc2FnZVNlbmQge1xyXG5cclxuICAgIHRpbWU6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0aW1lOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuUE9ORztcclxuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnN0YW5jZSBSZXF1ZXN0IE1lc3NhZ2UgV3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VSZXF1ZXN0SW5zdGFuY2UgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuUkVRVUVTVF9JTlNUQU5DRTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFnZ3JlZ2F0ZWQgU3RhdHMgTWVzc2FnZSBXcmFwcGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzc2FnZVN0YXRzIGV4dGVuZHMgTWVzc2FnZVNlbmQge1xyXG4gICAgaW5ib3VuZFZpZGVvU3RhdHM6IGluYm91bmRWaWRlb1N0YXRzO1xyXG4gICAgaW5ib3VuZEF1ZGlvU3RhdHM6IGluYm91bmRBdWRpb1N0YXRzO1xyXG4gICAgY2FuZGlkYXRlUGFpcjogQ2FuZGlkYXRlUGFpclN0YXRzXHJcbiAgICBkYXRhQ2hhbm5lbFN0YXRzOiBkYXRhQ2hhbm5lbFN0YXRzO1xyXG4gICAgbG9jYWxDYW5kaWRhdGVzOiBBcnJheTxDYW5kaWRhdGVTdGF0PjtcclxuICAgIHJlbW90ZUNhbmRpZGF0ZXM6IEFycmF5PENhbmRpZGF0ZVN0YXQ+O1xyXG4gICAgb3V0Ym91bmRWaWRlb1N0YXRzOiBPdXRCb3VuZFZpZGVvU3RhdHM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gYWdncmVnYXRlZFN0YXRzIC0gQWdncmVnYXRlZCBTdGF0cyBcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoYWdncmVnYXRlZFN0YXRzOiBBZ2dyZWdhdGVkU3RhdHMpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuU1RBVFNcclxuICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzID0gYWdncmVnYXRlZFN0YXRzLmluYm91bmRWaWRlb1N0YXRzO1xyXG4gICAgICAgIHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMgPSBhZ2dyZWdhdGVkU3RhdHMuaW5ib3VuZEF1ZGlvU3RhdHM7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyID0gYWdncmVnYXRlZFN0YXRzLmNhbmRpZGF0ZVBhaXI7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFN0YXRzID0gYWdncmVnYXRlZFN0YXRzLmRhdGFDaGFubmVsU3RhdHNcclxuICAgICAgICB0aGlzLmxvY2FsQ2FuZGlkYXRlcyA9IGFnZ3JlZ2F0ZWRTdGF0cy5sb2NhbENhbmRpZGF0ZXM7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVDYW5kaWRhdGVzID0gYWdncmVnYXRlZFN0YXRzLnJlbW90ZUNhbmRpZGF0ZXM7XHJcbiAgICAgICAgdGhpcy5vdXRib3VuZFZpZGVvU3RhdHMgPSBhZ2dyZWdhdGVkU3RhdHMub3V0Qm91bmRWaWRlb1N0YXRzO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogIFdlYiBSVEMgT2ZmZXIgbWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTWVzc2FnZVdlYlJUQ09mZmVyIGV4dGVuZHMgTWVzc2FnZVNlbmQge1xyXG4gICAgc2RwOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gb2ZmZXIgLSBHZW5lcmF0ZWQgV2ViIFJUQyBPZmZlclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvZmZlcj86IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuT0ZGRVI7XHJcblxyXG4gICAgICAgIGlmIChvZmZlcikge1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBvZmZlci50eXBlIGFzIE1lc3NhZ2VTZW5kVHlwZXM7XHJcbiAgICAgICAgICAgIHRoaXMuc2RwID0gb2ZmZXIuc2RwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJUQyBJY2UgQ2FuZGlkYXRlIFdyYXBwZXJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlSWNlQ2FuZGlkYXRlIGltcGxlbWVudHMgU2VuZCB7XHJcbiAgICBjYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZTtcclxuICAgIHR5cGU6IE1lc3NhZ2VTZW5kVHlwZXM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gY2FuZGlkYXRlIC0gUlRDIEljZSBDYW5kaWRhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGUpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLklDRV9DQU5ESURBVEU7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGUgPSBjYW5kaWRhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUdXJucyB0aGUgd3JhcHBlciBpbnRvIGEgSlNPTiBTdHJpbmdcclxuICAgICAqIEByZXR1cm5zIC0gSlNPTiBTdHJpbmcgb2YgdGhlIE1lc3NhZ2UgdG8gc2VuZFxyXG4gICAgICovXHJcbiAgICBwYXlsb2FkKCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJTZW5kaW5nID0+IFxcblwiICsgSlNPTi5zdHJpbmdpZnkodGhpcywgdW5kZWZpbmVkLCA0KSwgNik7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSBcIi4uL0xvZ2dlci9Mb2dnZXJcIjtcclxuaW1wb3J0IHsgQWdncmVnYXRlZFN0YXRzIH0gZnJvbSBcIi4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHNcIjtcclxuaW1wb3J0ICogYXMgTWVzc2FnZVJlY2VpdmUgZnJvbSBcIi4vTWVzc2FnZVJlY2VpdmVcIjtcclxuaW1wb3J0ICogYXMgTWVzc2FnZVNlbmQgZnJvbSBcIi4vTWVzc2FnZVNlbmRcIjtcclxuXHJcbi8vIGRlY2xhcmUgdGhlIG5ldyBtZXRob2QgZm9yIHRoZSB3ZWJzb2NrZXQgaW50ZXJmYWNlXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXZWJTb2NrZXQge1xyXG4gICAgICAgIG9ubWVzc2FnZWJpbmFyeT8oZXZlbnQ/OiBNZXNzYWdlRXZlbnQpOiB2b2lkO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogVGhlIGNvbnRyb2xsZXIgZm9yIHRoZSBXZWJTb2NrZXQgYW5kIGFsbCBhc3NvY2lhdGVkIG1ldGhvZHMgXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgV2ViU29ja2V0Q29udHJvbGxlciB7XHJcbiAgICBXU19PUEVOX1NUQVRFID0gMTtcclxuICAgIGFkZHJlc3M6IHN0cmluZztcclxuICAgIHdlYlNvY2tldDogV2ViU29ja2V0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIEFkZHJlc3MgLSBUaGUgQWRkcmVzcyBvZiB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihBZGRyZXNzOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLmFkZHJlc3MgPSBBZGRyZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29ubmVjdCB0byB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICogQHJldHVybnMgLSBJZiB0aGVyZSBpcyBhIGNvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgY29ubmVjdCgpOiBib29sZWFuIHtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIHRoaXMuYWRkcmVzcywgNik7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQgPSBuZXcgV2ViU29ja2V0KHRoaXMuYWRkcmVzcyk7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9ub3BlbiA9IChldmVudCkgPT4gdGhpcy5oYW5kbGVPbk9wZW4oZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbmVycm9yID0gKGV2ZW50KSA9PiB0aGlzLmhhbmRsZU9uRXJyb3IoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbmNsb3NlID0gKGV2ZW50KSA9PiB0aGlzLmhhbmRsZU9uQ2xvc2UoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2ZW50KTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQub25tZXNzYWdlYmluYXJ5ID0gKGV2ZW50KSA9PiB0aGlzLmhhbmRlbE9uTWVzc2FnZUJpbmFyeShldmVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihlcnJvciwgZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoYXQgaGFwcGVucyB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZCBpbiBiaW5hcnkgZm9ybVxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTWVzc2FnZSBSZWNlaXZlZFxyXG4gICAgICovXHJcbiAgICBoYW5kZWxPbk1lc3NhZ2VCaW5hcnkoZXZlbnQ6IE1lc3NhZ2VFdmVudCkge1xyXG4gICAgICAgIC8vIGlmIHRoZSBldmVudCBpcyBlbXB0eSByZXR1cm5cclxuICAgICAgICBpZiAoIWV2ZW50IHx8ICFldmVudC5kYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGhhbmRlbCB0aGUgYmluYXJ5IGFuZCB0aGVuIGhhbmRlbCB0aGUgbWVzc2FnZVxyXG4gICAgICAgIGV2ZW50LmRhdGEudGV4dCgpLnRoZW4oKG1lc3NhZ2VTdHJpbmc6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy8gYnVpbGQgYSBuZXcgbWVzc2FnZVxyXG4gICAgICAgICAgICBsZXQgY29uc3RydWN0ZWRNZXNzYWdlID0gbmV3IE1lc3NhZ2VFdmVudCgnbWVzc2FnZUZyb21CaW5hcnknLCB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBtZXNzYWdlU3RyaW5nXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gc2VuZCB0aGUgbmV3IHN0cmluZ2lmaWVkIGV2ZW50IGJhY2sgaW50byBgb25tZXNzYWdlYFxyXG4gICAgICAgICAgICB0aGlzLmhhbmRlbE9uTWVzc2FnZUJpbmFyeShjb25zdHJ1Y3RlZE1lc3NhZ2UpO1xyXG5cclxuICAgICAgICB9KS5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRmFpbGVkIHRvIHBhcnNlIGJpbmFyeSBibG9iIGZyb20gd2Vic29ja2V0LCByZWFzb246ICR7ZXJyb3J9YCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoYXQgaGFwcGVucyB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTWVzc2FnZSBSZWNlaXZlZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbk1lc3NhZ2UoZXZlbnQ6IE1lc3NhZ2VFdmVudCkge1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB3ZWJzb2NrZXQgbWVzc2FnZSBpcyBiaW5hcnksIGlmIHNvLCBzdHJpbmdpZnkgaXQuXHJcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kZWxPbk1lc3NhZ2VCaW5hcnkoZXZlbnQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWVzc2FnZTogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVJlY3YgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJyZWNlaXZlZCA9PiBcXG5cIiArIEpTT04uc3RyaW5naWZ5KEpTT04ucGFyc2UoZXZlbnQuZGF0YSksIHVuZGVmaW5lZCwgMSksIDYpO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VSZWN2VHlwZXMuUElORzoge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNlbmQgb3VyIHBvbmcgcGF5bG9hZCBiYWNrIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBNZXNzYWdlU2VuZC5NZXNzYWdlUG9uZyhuZXcgRGF0ZSgpLmdldFRpbWUoKSkucGF5bG9hZCgpXHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VSZWN2VHlwZXMuUElORyArIFwiOiBcIiArIHBheWxvYWQsIDYpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkKVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVJlY3ZUeXBlcy5BVVRIRU5USUNBVElPTl9SRVFVSVJFRDoge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkFVVEhFTlRJQ0FUSU9OX1JFUVVJUkVEXCIsIDYpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGF1dGhlbnRpY2F0aW9uUmVxdWlyZWQ6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VBdXRoUmVxdWlyZWQgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB1cmxfc3RyaW5nID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XHJcbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gbmV3IFVSTCh1cmxfc3RyaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgYXV0aFJlcXVlc3QgPSBuZXcgTWVzc2FnZVNlbmQuTWVzc2FnZUF1dGhSZXF1ZXN0KHVybC5zZWFyY2hQYXJhbXMuZ2V0KFwiY29kZVwiKSwgdXJsLnNlYXJjaFBhcmFtcy5nZXQoXCJwcm92aWRlclwiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChhdXRoUmVxdWVzdC5wYXlsb2FkKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVJlY3ZUeXBlcy5BVVRIRU5USUNBVElPTl9SRVNQT05TRToge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkFVVEhFTlRJQ0FUSU9OX1JFU1BPTlNFXCIsIDYpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGF1dGhlbnRpY2F0aW9uUmVzcG9uc2U6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VBdXRoUmVzcG9uc2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMub25BdXRoZW50aWNhdGlvblJlc3BvbnNlKGF1dGhlbnRpY2F0aW9uUmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYXV0aGVudGljYXRpb25SZXNwb25zZS5vdXRjb21lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQXV0aFJlc3BvbnNlT3V0Y29tZVR5cGUuUkVESVJFQ1Q6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBhdXRoZW50aWNhdGlvblJlc3BvbnNlLnJlZGlyZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQXV0aFJlc3BvbnNlT3V0Y29tZVR5cGUuQVVUSEVOVElDQVRFRDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiVXNlciBpcyBhdXRoZW50aWNhdGVkIGFuZCBub3cgcmVxdWVzdGluZyBhbiBpbnN0YW5jZVwiLCA2KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQobmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VSZXF1ZXN0SW5zdGFuY2UoKS5wYXlsb2FkKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQXV0aFJlc3BvbnNlT3V0Y29tZVR5cGUuSU5WQUxJRF9UT0tFTjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuSW5mbyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkF1dGhlbnRpY2F0aW9uIGVycm9yIDogSW52YWxpZCBUb2tlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZVJlY2VpdmUuTWVzc2FnZUF1dGhSZXNwb25zZU91dGNvbWVUeXBlLkVSUk9SOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5JbmZvKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiQXV0aGVudGljYXRpb24gRXJyb3IgZnJvbSBzZXJ2ZXIgQ2hlY2sgd2hhdCB5b3UgYXJlIHNlbmRpbmdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIlRoZSBPdXRjb21lIE1lc3NhZ2UgaGFzIG5vdCBiZWVuIGhhbmRsZWQgOiB0aGlzIGlzIHJlYWxseSBiYWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVJlY3ZUeXBlcy5JTlNUQU5DRV9TVEFURToge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIklOU1RBTkNFX1NUQVRFXCIsIDYpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGluc3RhbmNlU3RhdGU6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VJbnN0YW5jZVN0YXRlID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25JbnN0YW5jZVN0YXRlQ2hhbmdlKGluc3RhbmNlU3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUmVjdlR5cGVzLkNPTkZJRzoge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkNPTkZJR1wiLCA2KTtcclxuICAgICAgICAgICAgICAgIGxldCBjb25maWc6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VDb25maWcgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbmZpZyhjb25maWcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUmVjdlR5cGVzLlBMQVlFUl9DT1VOVDoge1xyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIlBMQVlFUl9DT1VOVFwiLCA2KTtcclxuICAgICAgICAgICAgICAgIGxldCBwbGF5ZXJDb3VudDogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVBsYXllckNvdW50ID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJQbGF5ZXIgQ291bnQ6IFwiICsgKHBsYXllckNvdW50LmNvdW50IC0gMSksIDYpO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVJlY3ZUeXBlcy5BTlNXRVI6IHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJBTlNXRVJcIiwgNik7XHJcbiAgICAgICAgICAgICAgICBsZXQgYW5zd2VyOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQW5zd2VyID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25XZWJSdGNBbnN3ZXIoYW5zd2VyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVJlY3ZUeXBlcy5JQ0VfQ0FORElEQVRFOiB7XHJcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiSUNFX0NBTkRJREFURVwiLCA2KTtcclxuICAgICAgICAgICAgICAgIGxldCBpY2VDYW5kaWRhdGU6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VJY2VDYW5kaWRhdGUgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUuY2FuZGlkYXRlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgIExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkVycm9yIE1lc3NhZ2UgdHlwZSBub3QgRGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBXZWJzb2NrZXQgaXMgb3BlbmVkIFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTm90IFVzZWRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25PcGVuKGV2ZW50OiBFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJDb25uZWN0ZWQgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyIHZpYSBXZWJTb2NrZXRcIiwgNik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3Igb24gdGhlIHdlYnNvY2tldFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gRXJyb3IgUGF5bG9hZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkVycm9yKGV2ZW50OiBFdmVudCkge1xyXG4gICAgICAgIExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnV2ViU29ja2V0IGVycm9yOiAnKTtcclxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGV2ZW50LnRvU3RyaW5nKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBXZWJzb2NrZXQgaXMgY2xvc2VkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBDbG9zZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkNsb3NlKGV2ZW50OiBDbG9zZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5vbldlYlNvY2tldE9uY2xvc2VPdmVybGF5TWVzc2FnZShldmVudCk7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIkRpc2Nvbm5lY3RlZCB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgdmlhIFdlYlNvY2tldDogXCIgKyBKU09OLnN0cmluZ2lmeShldmVudC5jb2RlKSArIFwiIC0gXCIgKyBldmVudC5yZWFzb24sIDYpO1xyXG4gICAgICAgIHRoaXMuc3RvcEFma1dhcm5pbmdUaW1lcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHN0b3BwaW5nIHRoZSBhZmsgd2FybmluZyB0aW1lclxyXG4gICAgICovXHJcbiAgICBzdG9wQWZrV2FybmluZ1RpbWVyKCkgeyB9XHJcblxyXG4gICAgc2VuZFdlYlJ0Y09mZmVyKG9mZmVyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7XHJcbiAgICAgICAgbGV0IHBheWxvYWQgPSBuZXcgTWVzc2FnZVNlbmQuTWVzc2FnZVdlYlJUQ09mZmVyKG9mZmVyKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKHBheWxvYWQucGF5bG9hZCgpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIGFuIFJUQyBJY2UgQ2FuZGlkYXRlIHRvIHRoZSBTZXJ2ZXJcclxuICAgICAqIEBwYXJhbSBjYW5kaWRhdGUgLSBSVEMgSWNlIENhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICBzZW5kSWNlQ2FuZGlkYXRlKGNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlKSB7XHJcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBcIlNlbmRpbmcgSWNlIENhbmRpZGF0ZVwiLCA2KTtcclxuICAgICAgICBpZiAodGhpcy53ZWJTb2NrZXQgJiYgdGhpcy53ZWJTb2NrZXQucmVhZHlTdGF0ZSA9PT0gdGhpcy5XU19PUEVOX1NUQVRFKSB7XHJcbiAgICAgICAgICAgIC8vd3Muc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6ICdpY2VDYW5kaWRhdGUnLCBjYW5kaWRhdGU6IGNhbmRpZGF0ZSB9KSk7XHJcbiAgICAgICAgICAgIGxldCBJY2VDYW5kaWRhdGUgPSBuZXcgTWVzc2FnZVNlbmQuTWVzc2FnZUljZUNhbmRpZGF0ZShjYW5kaWRhdGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChJY2VDYW5kaWRhdGUucGF5bG9hZCgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZXMgdGhlIFdlYnNvY2tldCBjb25uZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0LmNsb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyB0aGUgQWdncmVnYXRlZCBTdGF0cyB0byB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICogQHBhcmFtIHN0YXRzIC0gU3RhdHMgUGF5bG9hZFxyXG4gICAgICovXHJcbiAgICBzZW5kU3RhdHMoc3RhdHM6IEFnZ3JlZ2F0ZWRTdGF0cykge1xyXG4gICAgICAgIGxldCBkYXRhID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VTdGF0cyhzdGF0cyk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChkYXRhLnBheWxvYWQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEV2ZW50IHVzZWQgZm9yIERpc3BsYXlpbmcgd2Vic29ja2V0IGNsb3NlZCBtZXNzYWdlcyAqL1xyXG4gICAgb25XZWJTb2NrZXRPbmNsb3NlT3ZlcmxheU1lc3NhZ2UoZXZlbnQ6IENsb3NlRXZlbnQpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIE1lc3NhZ2UgQ29udGFpbnMgdGhlIHBheWxvYWQgb2YgdGhlIHBlZXIgY29ubmVjdGlvbiBvcHRpb25zIHVzZWQgZm9yIHRoZSBSVEMgUGVlciBoYW5kIHNoYWtlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUNvbmZpZyAtIENvbmZpZyBNZXNzYWdlIHJlY2VpdmVkIGZyb20gaGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICovXHJcbiAgICBvbkNvbmZpZyhtZXNzYWdlQ29uZmlnOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQ29uZmlnKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpY2VDYW5kaWRhdGUgLSBJY2UgQ2FuZGlkYXRlIHNlbnQgZnJvbSB0aGUgU2lnbmFsaW5nIHNlcnZlciBzZXJ2ZXIncyBSVEMgaGFuZCBzaGFrZVxyXG4gICAgICovXHJcbiAgICBvbkljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZUluaXQpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgd2Vic29ja2V0IHJlY2VpdmVzIHRoZSBhbnN3ZXIgZm9yIHRoZSBSVEMgcGVlciBDb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUFuc3dlciAtIFRoZSBSVEMgQW5zd2VyIHBheWxvYWQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICovXHJcbiAgICBvbldlYlJ0Y0Fuc3dlcihtZXNzYWdlQW5zd2VyOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQW5zd2VyKSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGZpcmVkIHdpdGggdGhlIHdlYnNvY2tldCByZWNlaXZlcyBhIGluc3RhbmNlIHN0YXRlXHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2VTdGF0ZSAtIFVFIEluc3RhbmNlIFN0YXRlXHJcbiAgICAgKi9cclxuICAgIG9uSW5zdGFuY2VTdGF0ZUNoYW5nZShpbnN0YW5jZVN0YXRlOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlSW5zdGFuY2VTdGF0ZSkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCBmaXJlZCB3aXRoIHRoZSB3ZWJzb2NrZXQgcmVjZWl2ZXMgYSBBdXRoZW50aWNhdGlvbiBSZXNwb25zZVxyXG4gICAgICogQHBhcmFtIGF1dGhSZXNwb25zZSAtIEF1dGhlbnRpY2F0aW9uIFJlc3BvbnNlXHJcbiAgICAgKi9cclxuICAgIG9uQXV0aGVudGljYXRpb25SZXNwb25zZShhdXRoUmVzcG9uc2U6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VBdXRoUmVzcG9uc2UpIHsgfVxyXG59XHJcblxyXG5cclxuLyogNTI0ZjRkNGQgKi9cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgeyB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyIH0gZnJvbSBcIi4vV2ViUnRjUGxheWVyL1dlYlJ0Y1BsYXllckNvbnRyb2xsZXJcIlxyXG5leHBvcnQgeyBDb25maWcsIENvbnRyb2xTY2hlbWVUeXBlIH0gZnJvbSBcIi4vQ29uZmlnL0NvbmZpZ1wiXHJcbmV4cG9ydCB7IElEZWxlZ2F0ZSB9IGZyb20gXCIuL0RlbGVnYXRlL0lEZWxlZ2F0ZVwiXHJcbmV4cG9ydCB7IERlbGVnYXRlQmFzZSB9IGZyb20gXCIuL0RlbGVnYXRlL0RlbGVnYXRlQmFzZVwiXHJcbmV4cG9ydCB7IElXZWJSdGNQbGF5ZXJDb250cm9sbGVyIH0gZnJvbSBcIi4vV2ViUnRjUGxheWVyL0lXZWJSdGNQbGF5ZXJDb250cm9sbGVyXCJcclxuXHJcbmV4cG9ydCB7IElPdmVybGF5IH0gZnJvbSAnLi9PdmVybGF5L0lPdmVybGF5JztcclxuZXhwb3J0IHsgSVRleHRPdmVybGF5IH0gZnJvbSAnLi9PdmVybGF5L0lUZXh0T3ZlcmxheSc7XHJcbmV4cG9ydCB7IElBY3Rpb25PdmVybGF5IH0gZnJvbSBcIi4vT3ZlcmxheS9JQWN0aW9uT3ZlcmxheVwiXHJcbmV4cG9ydCB7IElBZmtPdmVybGF5IH0gZnJvbSAnLi9PdmVybGF5L0lBZmtPdmVybGF5JztcclxuZXhwb3J0IHsgQWZrTG9naWMgfSBmcm9tICcuL0Fmay9BZmtMb2dpYyc7XHJcblxyXG5leHBvcnQgeyBMYXRlbmN5VGVzdFJlc3VsdHMgfSBmcm9tIFwiLi9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHNcIjtcclxuZXhwb3J0IHsgRW5jb2RlciwgSW5pdGlhbFNldHRpbmdzLCBXZWJSVEMgfSBmcm9tICcuL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncyc7XHJcbmV4cG9ydCB7IEFnZ3JlZ2F0ZWRTdGF0cyB9IGZyb20gJy4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cyc7XHJcbmV4cG9ydCB7IE1lc3NhZ2VJbnN0YW5jZVN0YXRlLCBJbnN0YW5jZVN0YXRlLCBNZXNzYWdlQXV0aFJlc3BvbnNlLCBNZXNzYWdlQXV0aFJlc3BvbnNlT3V0Y29tZVR5cGUgfSBmcm9tICcuL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmUnO1xyXG5leHBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL0xvZ2dlci9Mb2dnZXInO1xyXG5leHBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tICcuL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlcic7XHJcbmRlY2xhcmUgdmFyIExJQlJBUllfVkVSU0lPTjogc3RyaW5nO1xyXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IExJQlJBUllfVkVSU0lPTjtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9