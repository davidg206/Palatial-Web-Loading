[{"/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/index.js":"1","/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/App.js":"2","/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/reportWebVitals.js":"3","/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/components/ProgressBar.js":"4","/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/hooks/useDeviceDetect.js":"5","/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/utils/handleSubmit.js":"6","/home/david/Palatial-Web-Loading/src/index.js":"7","/home/david/Palatial-Web-Loading/src/App.js":"8","/home/david/Palatial-Web-Loading/src/reportWebVitals.js":"9","/home/david/Palatial-Web-Loading/src/hooks/useDeviceDetect.js":"10","/home/david/Palatial-Web-Loading/src/components/ProgressBar.js":"11","/home/david/Palatial-Web-Loading/src/utils/handleSubmit.js":"12","/home/david/Palatial-Web-Loading/src/NativeDOMDelegate.ts":"13"},{"size":535,"mtime":1685132978194,"results":"14","hashOfConfig":"15"},{"size":6628,"mtime":1685132978194,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1685132978194,"results":"17","hashOfConfig":"15"},{"size":501,"mtime":1685132978194,"results":"18","hashOfConfig":"15"},{"size":736,"mtime":1685132978194,"results":"19","hashOfConfig":"15"},{"size":1244,"mtime":1685132978194,"results":"20","hashOfConfig":"15"},{"size":8516,"mtime":1685208559695,"results":"21","hashOfConfig":"22"},{"size":6650,"mtime":1685208209554,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1685148071383,"results":"24","hashOfConfig":"22"},{"size":736,"mtime":1685148071383,"results":"25","hashOfConfig":"22"},{"size":501,"mtime":1685148071383,"results":"26","hashOfConfig":"22"},{"size":1237,"mtime":1685208175362,"results":"27","hashOfConfig":"22"},{"size":43417,"mtime":1685202599939,"results":"28","hashOfConfig":"22"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16kz52n",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"12oyi66",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":2,"source":"70"},"/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/index.js",[],[],"/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/App.js",["71","72","73","74","75"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport { isDesktop, isIPad13, isTablet, isMobile, osName, browserName } from 'react-device-detect';\nimport './App.css';\nimport logoPng from './assets/Images/png/Palatial-Logo_White 1.png';\nimport ProgressBar from './components/ProgressBar';\nimport useDeviceDetect from './hooks/useDeviceDetect';\nimport handleSubmit from './utils/handleSubmit';\n\nfunction App() {\n\n  // State management\n  const { device } = useDeviceDetect();\n  const [popUpVisible, setPopUpVisible] = useState(true);\n  /*const { serverResponseMessage, popUpVisible, checkPassword } = usePasswordValidation();*/ //password validation resutl from server\n  const [userName, setUserName] = useState('');\n  const [firstTimeUser, setFirstTimeUser] = useState(null);\n  const [activeButton, setActiveButton] = useState(null);\n  const [consentAccepted, setConsentAccepted] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [step, setStep] = useState(0);\n  const [formStep, setFormStep] = useState(1);\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isInputFocused, setInputFocused] = useState(false);\n  // add the names of the actual loading steps to the following and change the progress bar step value to 100/# of actual steps at :89 and :96\n  const loadingSteps = ['Loading assets', 'Setting up', 'Connecting to server', 'Finalizing', 'Done']; // Add your loading steps here\n  const stepTimeoutRef = useRef();\n\n  /* \n  //uncomment this block for passing password validation msg in order to trigger window fadeout\n\n  const checkPassword = async (password) => {\n    // simulate a call to the server to check the password\n    const passwordIsCorrect = await someServerFunction(password);\n  \n    if (!passwordIsCorrect) {\n      setServerResponseMessage('Password incorrect, please try again');\n    } else {\n      setServerResponseMessage('Success!');\n      setPopUpVisible(false); // hides the PopUp div\n    }\n  };\n\n  */\n\n\n  //Device detection logic\n  useEffect(() => {\n    if (isMobile || isTablet || isIPad13) {\n      document.body.style.height = `${window.innerHeight}px`;\n      const preventScroll = event => {\n        event.preventDefault();\n      };\n      // Prevent scrolling when a mobile/tablet device is detected\n      window.addEventListener('touchmove', preventScroll, { passive: false });\n\n      return () => {\n        // Clean up event listener on unmount\n        window.removeEventListener('touchmove', preventScroll);\n      };\n    }\n  }, []);\n\n  // progress bar animation\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setProgress((prevProgress) => {\n        if (prevProgress >= 100) {\n          setStep(0); // reset the step as well\n          return 0; // this line should be removed when connecting to the actual server\n        }\n        return prevProgress + 20;\n      });\n    }, 1000); // increase progress every 1 second\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    stepTimeoutRef.current && clearTimeout(stepTimeoutRef.current);\n    if (progress >= (step + 1) * 20) {\n      stepTimeoutRef.current = setTimeout(() => {\n        setStep(step + 1);\n      }, 100);\n    }\n  }, [progress, step]);\n\n  //maintain page after exiting keyboard\n  useEffect(() => {\n    if (isInputFocused) {\n      document.body.classList.add('prevent-scroll');\n    } else {\n      document.body.classList.remove('prevent-scroll');\n    }\n  }, [isInputFocused]);\n  \n  const handleClick = isFirstTime => {\n    setFirstTimeUser(isFirstTime);\n    setActiveButton(isFirstTime ? 'yes' : 'no');\n  };\n\n  const handleConsent = () => {\n    setConsentAccepted(!consentAccepted);\n  };\n\n  //hook for transitioning form from username input to password input\n  const handleFormTransition = () => {\n    if (formStep === 1) {\n      if (userName && firstTimeUser !== null && consentAccepted) {\n        setFormStep(2);\n        setError('');\n      } else {\n        setError('Please complete all fields before proceeding.');\n      }\n    } else if (formStep === 2) {\n      if (password) {\n        setFormStep(3);\n        setError('');\n      } else {\n        setError('Please enter a password before proceeding.');\n      }\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <div className={popUpVisible ? \"PopUp\" : \"PopUp hidden\"}>        \n      <div className=\"Logo\">\n          <img src={logoPng} alt='logo'/>\n        </div>\n        {formStep === 1 && (\n          <div className='PopUpContent fadeIn'>\n            <div className=\"inputPrompt\">\n              <p>ENTER YOUR NAME</p>\n              <input\n                className=\"userNameInput\"\n                type=\"text\"\n                value={userName}\n                onFocus={() => setInputFocused(true)}\n                onBlur={() => setInputFocused(false)}\n                onChange={(e) => setUserName(e.target.value)} \n                required\n              />\n            </div>\n            <div className=\"firstTimeToggle\">\n              <p>IS THIS YOUR FIRST TIME USING PALATIAL? </p>\n              <div className=\"toggleButtons\">\n                <button className={`yesButton ${activeButton === 'yes' ? 'active' : ''}`} onClick={() => handleClick(true)}>YES</button>\n                <button className={`noButton ${activeButton === 'no' ? 'active' : ''}`} onClick={() => handleClick(false)}>NO</button>\n              </div>\n            </div>\n            <div className=\"consentCTA\">\n              <div className=\"consentCheckBox\" onClick={handleConsent}>\n                <input type=\"checkbox\" checked={consentAccepted} readOnly />\n                <p>By clicking this box, I’m accepting the Terms and Conditions of using this platform.</p>\n              </div>\n            </div>\n            <button className=\"proceedButton\" onClick={handleFormTransition}>PROCEED</button>\n          </div>\n        )}\n        {formStep === 2 && (\n          <div className='PopUpContent fadeIn'>\n            <div className=\"inputPrompt\">\n              <p>ENTER YOUR PASSWORD</p>\n              <input\n                className=\"passwordInput\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)} \n                required\n              />\n            </div>\n            <button className=\"proceedButton\" onClick={handleSubmit}>SUBMIT</button>\n          </div>\n        )}\n        {error && <p className=\"error\">{error}</p>}\n      </div>\n      <ProgressBar progress={progress} />\n      <div className=\"loadingStep\">\n        {loadingSteps[step]}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/reportWebVitals.js",[],[],"/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/components/ProgressBar.js",[],[],"/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/hooks/useDeviceDetect.js",[],[],"/home/david/Frontend/delegates/dom/src/Palatial-Web-Loading/src/utils/handleSubmit.js",[],[],"/home/david/Palatial-Web-Loading/src/index.js",["76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],[],"/home/david/Palatial-Web-Loading/src/App.js",["127","128","129","130","131"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport { isDesktop, isIPad13, isTablet, isMobile, osName, browserName } from 'react-device-detect';\nimport './App.css';\nimport logoPng from './assets/Images/png/Palatial-Logo_White 1.png';\nimport ProgressBar from './components/ProgressBar';\nimport useDeviceDetect from './hooks/useDeviceDetect';\nimport handleSubmit from './utils/handleSubmit';\n\nfunction App() {\n\n  // State management\n  const { device } = useDeviceDetect();\n  const [popUpVisible, setPopUpVisible] = useState(true);\n  /*const { serverResponseMessage, popUpVisible, checkPassword } = usePasswordValidation();*/ //password validation resutl from server\n  const [userName, setUserName] = useState('');\n  const [firstTimeUser, setFirstTimeUser] = useState(null);\n  const [activeButton, setActiveButton] = useState(null);\n  const [consentAccepted, setConsentAccepted] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [step, setStep] = useState(0);\n  const [formStep, setFormStep] = useState(1);\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isInputFocused, setInputFocused] = useState(false);\n  // add the names of the actual loading steps to the following and change the progress bar step value to 100/# of actual steps at :89 and :96\n  const loadingSteps = ['Loading assets', 'Setting up', 'Connecting to server', 'Finalizing', 'Done']; // Add your loading steps here\n  const stepTimeoutRef = useRef();\n\n\n  //uncomment this block for passing password validation msg in order to trigger window fadeout\n\n  /*const checkPassword = async (password) => {\n    // simulate a call to the server to check the password\n    const passwordIsCorrect = await someServerFunction(password);\n     setPopUpVisible(false);\n    if (!passwordIsCorrect) {\n      setServerResponseMessage('Password incorrect, please try again');\n    } else {\n      setServerResponseMessage('Success!');\n      setPopUpVisible(false); // hides the PopUp div\n    }\n  };*/\n\n\n\n  // Device detection logic\n  useEffect(() => {\n    if (isMobile || isTablet || isIPad13) {\n      document.body.style.height = `${window.innerHeight}px`;\n      const preventScroll = event => {\n        event.preventDefault();\n      };\n      // Prevent scrolling when a mobile/tablet device is detected\n      window.addEventListener('touchmove', preventScroll, { passive: false });\n\n      return () => {\n        // Clean up event listener on unmount\n        window.removeEventListener('touchmove', preventScroll);\n      };\n    }\n  }, []);\n\n  // progress bar animation\n  useEffect(() => {\n    let interval = setInterval(() => {\n      setProgress((prevProgress) => {\n        if (prevProgress >= 100) {\n          setStep(0); // reset the step as well\n          return 0; // this line should be removed when connecting to the actual server\n        }\n        return prevProgress + 20;\n      });\n    }, 1000); // increase progress every 1 second\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    stepTimeoutRef.current && clearTimeout(stepTimeoutRef.current);\n    if (progress >= (step + 1) * 20) {\n      stepTimeoutRef.current = setTimeout(() => {\n        setStep(step + 1);\n      }, 100);\n    }\n  }, [progress, step]);\n\n  // maintain page after exiting keyboard\n  useEffect(() => {\n    if (isInputFocused) {\n      document.body.classList.add('prevent-scroll');\n    } else {\n      document.body.classList.remove('prevent-scroll');\n    }\n  }, [isInputFocused]);\n\n  const handleClick = isFirstTime => {\n    setFirstTimeUser(isFirstTime);\n    setActiveButton(isFirstTime ? 'yes' : 'no');\n  };\n\n  const handleConsent = () => {\n    setConsentAccepted(!consentAccepted);\n  };\n\n  // hook for transitioning form from username input to password input\n  const handleFormTransition = () => {\n    if (formStep === 1) {\n      if (userName && firstTimeUser !== null && consentAccepted) {\n        setFormStep(2);\n        setError('');\n      } else {\n        setError('Please complete all fields before proceeding.');\n      }\n    } else if (formStep === 2) {\n      if (password) {\n        setFormStep(3);\n        setError('');\n      } else {\n        setError('Please enter a password before proceeding.');\n      }\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <div className={popUpVisible ? \"PopUp\" : \"PopUp hidden\"}>\n      <div className=\"Logo\">\n          <img src={logoPng} alt='logo'/>\n        </div>\n        {formStep === 1 && (\n          <div className='PopUpContent fadeIn'>\n            <div className=\"inputPrompt\">\n              <p>ENTER YOUR NAME</p>\n              <input\n                className=\"userNameInput\"\n                type=\"text\"\n                value={userName}\n                onFocus={() => setInputFocused(true)}\n                onBlur={() => setInputFocused(false)}\n                onChange={(e) => setUserName(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"firstTimeToggle\">\n              <p>IS THIS YOUR FIRST TIME USING PALATIAL? </p>\n              <div className=\"toggleButtons\">\n                <button className={`yesButton ${activeButton === 'yes' ? 'active' : ''}`} onClick={() => handleClick(true)}>YES</button>\n                <button className={`noButton ${activeButton === 'no' ? 'active' : ''}`} onClick={() => handleClick(false)}>NO</button>\n              </div>\n            </div>\n            <div className=\"consentCTA\">\n              <div className=\"consentCheckBox\" onClick={handleConsent}>\n                <input type=\"checkbox\" checked={consentAccepted} readOnly />\n                <p>By clicking this box, I’m accepting the Terms and Conditions of using this platform.</p>\n              </div>\n            </div>\n            <button className=\"proceedButton\" onClick={handleFormTransition}>PROCEED</button>\n          </div>\n        )}\n        {formStep === 2 && (\n          <div className='PopUpContent fadeIn'>\n            <div className=\"inputPrompt\">\n              <p>ENTER YOUR PASSWORD</p>\n              <input\n                className=\"passwordInput\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <button id=\"join\" className=\"proceedButton\" onClick={handleSubmit}>SUBMIT</button>\n          </div>\n        )}\n        {error && <p className=\"error\">{error}</p>}\n      </div>\n      <ProgressBar progress={progress} />\n      <div className=\"loadingStep\">\n        {loadingSteps[step]}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/david/Palatial-Web-Loading/src/reportWebVitals.js",[],[],"/home/david/Palatial-Web-Loading/src/hooks/useDeviceDetect.js",[],[],"/home/david/Palatial-Web-Loading/src/components/ProgressBar.js",[],[],"/home/david/Palatial-Web-Loading/src/utils/handleSubmit.js",[],[],"/home/david/Palatial-Web-Loading/src/NativeDOMDelegate.ts",["132","133","134","135","136","137","138","139","140","141","142","143"],[],"import './assets/css/player.css';\r\nimport { EventEmitter } from \"events\";\r\nimport * as libspsfrontend from 'backend-dom-components'\r\n\r\ndeclare var WEBSOCKET_URL: string;\r\n\r\n/**\r\n * Class for the base overlay structure \r\n */\r\nexport class OverlayBase implements libspsfrontend.IOverlay {\r\n\tprotected rootElement: HTMLDivElement;\r\n\tprotected rootDiv: HTMLDivElement;\r\n\tpublic textElement: HTMLDivElement;\r\n\r\n\t/**\r\n\t * Construct an overlay \r\n\t * @param rootDiv the root element this overlay will be inserted into \r\n\t * @param rootElement the root element that is the overlay\r\n\t */\r\n\tprotected constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, textElement: HTMLDivElement) {\r\n\t\tthis.rootDiv = rootDiv;\r\n\t\tthis.rootElement = rootElement;\r\n\t\tthis.textElement = textElement;\r\n\t\tthis.rootElement.appendChild(this.textElement);\r\n\t\tthis.hide();\r\n\t\tthis.rootDiv.appendChild(this.rootElement);\r\n\t}\r\n\r\n\t/**\r\n\t * Show the overlay \r\n\t */\r\n\tpublic show(): void {\r\n\t\tthis.rootElement.classList.remove(\"hiddenState\");\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the overlay\r\n\t */\r\n\tpublic hide(): void {\r\n\t\tthis.rootElement.classList.add(\"hiddenState\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Class for the base action overlay structure \r\n */\r\nexport class ActionOverlayBase extends OverlayBase implements libspsfrontend.IActionOverlay {\r\n\teventEmitter: EventEmitter;\r\n\tcontentElementSpanId: string;\r\n\r\n\t/**\r\n\t * Construct an action overlay \r\n\t * @param rootDiv the root element this overlay will be inserted into \r\n\t * @param rootElement the root element that is the overlay\r\n\t * @param contentElement an element that contains text for the action overlay \r\n\t */\r\n\tpublic constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, contentElement: HTMLDivElement, contentElementSpanId?: string) {\r\n\t\tsuper(rootDiv, rootElement, contentElement);\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\tthis.contentElementSpanId = contentElementSpanId;\r\n\t}\r\n\r\n\t/**\r\n\t * Update the text overlays inner text \r\n\t * @param text the update text to be inserted into the overlay \r\n\t */\r\n\tpublic update(text: string): void {\r\n\t\tif ((text != null || text != undefined) && (this.contentElementSpanId != null || this.contentElementSpanId != undefined)) {\r\n\t\t\tdocument.getElementById(this.contentElementSpanId).innerHTML = text;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set a method as an event emitter callback \r\n\t * @param callBack the method that is to be called when the event is emitted \r\n\t */\r\n\tonAction(callBack: (...args: any[]) => void) {\r\n\t\tthis.eventEmitter.on(\"action\", callBack);\r\n\t}\r\n\r\n\t/**\r\n\t * Activate an event that is attached to the event emitter \r\n\t */\r\n\tactivate() {\r\n\t\tthis.eventEmitter.emit(\"action\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Class for the afk overlay base \r\n */\r\nexport class AfkOverlayBase extends ActionOverlayBase implements libspsfrontend.IAfkOverlay {\r\n\tprivate countDownSpanElementId: string;\r\n\r\n\t/**\r\n\t * Construct an Afk overlay \r\n\t * @param rootDiv the root element this overlay will be inserted into \r\n\t * @param rootElement the root element that is the overlay\r\n\t * @param textElement an element that contains text for the action overlay  \r\n\t * @param countDownSpanElementId the id of the span that holds the countdown element \r\n\t */\r\n\tpublic constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, textElement: HTMLDivElement, countDownSpanElementId: string) {\r\n\t\tsuper(rootDiv, rootElement, textElement);\r\n\t\tthis.countDownSpanElementId = countDownSpanElementId;\r\n\t}\r\n\r\n\t/**\r\n\t * Update the count down spans number for the overlay \r\n\t * @param countdown the count down number to be inserted into the span for updating\r\n\t */\r\n\tpublic updateCountdown(countdown: number): void {\r\n\t\tdocument.getElementById(this.countDownSpanElementId).innerHTML = countdown.toString();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Class for the text overlay base \r\n */\r\nexport class TextOverlayBase extends OverlayBase implements libspsfrontend.ITextOverlay {\r\n\r\n\t/**\r\n\t * Construct a text overlay \r\n\t * @param rootDiv the root element this overlay will be inserted into \r\n\t * @param rootElement the root element that is the overlay\r\n\t * @param textElement an element that contains text for the action overlay  \r\n\t */\r\n\tpublic constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, textElement: HTMLDivElement) {\r\n\t\tsuper(rootDiv, rootElement, textElement);\r\n\t}\r\n\r\n\t/**\r\n\t * Update the text overlays inner text \r\n\t * @param text the update text to be inserted into the overlay \r\n\t */\r\n\tpublic update(text: string): void {\r\n\t\tif (text != null || text != undefined) {\r\n\t\t\tthis.textElement.innerHTML = text;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Class for the VideoQp indicator\r\n */\r\nexport class VideoQpIndicator {\r\n\r\n\tvideoEncoderAvgQP: number = -1;\r\n\r\n\t// the icon itself\r\n\tqualityStatus: SVGElement; // = document.getElementById(\"connectionStrength\");\r\n\r\n\t// the text that displays under the icon\r\n\tqualityText: HTMLSpanElement; // = document.getElementById(\"qualityText\");\r\n\r\n\t// svg paths\r\n\touter: any; //= document.getElementById(\"outer\");\r\n\tmiddle: any; //= document.getElementById(\"middle\");\r\n\tinner: any; // = document.getElementById(\"inner\");\r\n\tdot: any; // = document.getElementById(\"dot\");\r\n\r\n\t// non html elements \r\n\tstatsText: string = \"\";\r\n\tcolor: string = \"\";\r\n\r\n\t// qp colours \r\n\treadonly orangeQP = 26;\r\n\treadonly redQP = 35;\r\n\r\n\t/**\r\n\t * construct a VideoQpIndicator object\r\n\t * @param qualityStatusId the html id of the qualityStatus element\r\n\t * @param qualityTextId the html id of the qualityText element\r\n\t * @param outerId the html id of the outer element\r\n\t * @param middleId the html id of the middle element\r\n\t * @param innerId the html id of the inner element\r\n\t * @param dotId the html id of the dot element\r\n\t */\r\n\tconstructor(qualityStatusId: string, qualityTextId: string, outerId: string, middleId: string, innerId: string, dotId: string) {\r\n\t\tthis.qualityStatus = document.getElementById(qualityStatusId) as any;\r\n\t\tthis.qualityText = document.getElementById(qualityTextId) as any;\r\n\t\tthis.outer = document.getElementById(outerId) as any;\r\n\t\tthis.middle = document.getElementById(middleId) as any;\r\n\t\tthis.inner = document.getElementById(innerId) as any;\r\n\t\tthis.dot = document.getElementById(dotId) as any;\r\n\t}\r\n\r\n\t/**\r\n\t * used to set the speed of the status light\r\n\t * @param speed - Set the speed of the blink if the status light higher the speed the faster the blink\r\n\t */\r\n\tblinkVideoQualityStatus(speed: number) {\r\n\t\tlet iteration = speed;\r\n\t\tlet opacity = 1;\r\n\t\tlet tickID = setInterval(() => {\r\n\t\t\topacity -= 0.1;\r\n\t\t\tthis.qualityText.style.opacity = String(Math.abs((opacity - 0.5) * 2));\r\n\t\t\tif (opacity <= 0.1) {\r\n\t\t\t\tif (--iteration == 0) {\r\n\t\t\t\t\tclearInterval(tickID);\r\n\t\t\t\t} else {\r\n\t\t\t\t\topacity = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, 100 / speed);\r\n\t}\r\n\r\n\t/**\r\n\t  * updates the QP tooltip by converting the Video Encoder QP to a colour light\r\n\t  * @param QP - The video encoder QP number needed to find the average\r\n\t  */\r\n\tupdateQpTooltip(QP: number) {\r\n\t\tthis.videoEncoderAvgQP = QP;\r\n\t\tif (QP > this.redQP) {\r\n\t\t\tthis.color = \"red\";\r\n\t\t\tthis.blinkVideoQualityStatus(2);\r\n\t\t\tthis.statsText = `<div style=\"color: ${this.color}\">Poor encoding quality</div>`;\r\n\t\t\tthis.outer.style.fill = \"#3c3b40\";\r\n\t\t\tthis.middle.style.fill = \"#3c3b40\";\r\n\t\t\tthis.inner.style.fill = this.color;\r\n\t\t\tthis.dot.style.fill = this.color;\r\n\t\t} else if (QP > this.orangeQP) {\r\n\t\t\tthis.color = \"orange\";\r\n\t\t\tthis.blinkVideoQualityStatus(1);\r\n\t\t\tthis.statsText = `<div style=\"color: ${this.color}\">Blocky encoding quality</div>`;\r\n\t\t\tthis.outer.style.fill = \"#3c3b40\";\r\n\t\t\tthis.middle.style.fill = this.color;\r\n\t\t\tthis.inner.style.fill = this.color;\r\n\t\t\tthis.dot.style.fill = this.color;\r\n\t\t} else if (QP <= 0) {\r\n\t\t\tthis.color = \"#b0b0b0\";\r\n\t\t\tthis.outer.style.fill = \"#3c3b40\";\r\n\t\t\tthis.middle.style.fill = \"#3c3b40\";\r\n\t\t\tthis.inner.style.fill = \"#3c3b40\";\r\n\t\t\tthis.dot.style.fill = \"#3c3b40\";\r\n\t\t\tthis.statsText = `<div style=\"color: ${this.color}\">Not connected</div>`;\r\n\t\t} else {\r\n\t\t\tthis.color = \"lime\";\r\n\t\t\tthis.qualityStatus.style.opacity = '1';\r\n\t\t\tthis.statsText = `<div style=\"color: ${this.color}\">Clear encoding quality</div>`;\r\n\t\t\tthis.outer.style.fill = this.color;\r\n\t\t\tthis.middle.style.fill = this.color;\r\n\t\t\tthis.inner.style.fill = this.color;\r\n\t\t\tthis.dot.style.fill = this.color;\r\n\t\t}\r\n\t\tthis.qualityText.innerHTML = this.statsText;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Class for handling fullscreen logic\r\n */\r\nexport class FullScreenLogic {\r\n\tisFullscreen: boolean = false;\r\n\r\n\t/**\r\n\t * Construct a FullScreenLogic object\r\n\t */\r\n\tconstructor() {\r\n\t\tdocument.getElementById(\"fullscreen-btn\").onclick = () => this.fullscreen();\r\n\r\n\t\t// set up the full screen events\r\n\t\tdocument.addEventListener('webkitfullscreenchange', () => this.onFullscreenChange(), false);\r\n\t\tdocument.addEventListener('mozfullscreenchange', () => this.onFullscreenChange(), false);\r\n\t\tdocument.addEventListener('fullscreenchange', () => this.onFullscreenChange(), false);\r\n\t\tdocument.addEventListener('MSFullscreenChange', () => this.onFullscreenChange(), false);\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the document fullscreen \r\n\t * @returns \r\n\t */\r\n\tfullscreen() {\r\n\t\t// if already full screen; exit\r\n\t\t// else go fullscreen\r\n\t\tif (\r\n\t\t\tdocument.fullscreenElement ||\r\n\t\t\tdocument.webkitFullscreenElement ||\r\n\t\t\tdocument.mozFullScreenElement ||\r\n\t\t\tdocument.msFullscreenElement\r\n\t\t) {\r\n\t\t\tif (document.exitFullscreen) {\r\n\t\t\t\tdocument.exitFullscreen();\r\n\t\t\t} else if (document.mozCancelFullScreen) {\r\n\t\t\t\tdocument.mozCancelFullScreen();\r\n\t\t\t} else if (document.webkitExitFullscreen) {\r\n\t\t\t\tdocument.webkitExitFullscreen();\r\n\t\t\t} else if (document.msExitFullscreen) {\r\n\t\t\t\tdocument.msExitFullscreen();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet element: any;\r\n\t\t\t//HTML elements controls\r\n\t\t\tif (!(document.fullscreenEnabled || document.webkitFullscreenEnabled)) {\r\n\t\t\t\telement = document.getElementById(\"streamingVideo\") as any;\r\n\t\t\t} else {\r\n\t\t\t\telement = document.getElementById(\"playerUI\") as any;\r\n\t\t\t}\r\n\t\t\tif (!element) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (element.requestFullscreen) {\r\n\t\t\t\telement.requestFullscreen();\r\n\t\t\t} else if (element.mozRequestFullScreen) {\r\n\t\t\t\telement.mozRequestFullScreen();\r\n\t\t\t} else if (element.webkitRequestFullscreen) {\r\n\t\t\t\telement.webkitRequestFullscreen((<any>Element).ALLOW_KEYBOARD_INPUT);\r\n\t\t\t} else if (element.msRequestFullscreen) {\r\n\t\t\t\telement.msRequestFullscreen();\r\n\t\t\t} else if (element.webkitEnterFullscreen) {\r\n\t\t\t\telement.webkitEnterFullscreen(); //for iphone this code worked\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.onFullscreenChange();\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the fullscreen button on change\r\n\t */\r\n\tonFullscreenChange() {\r\n\t\tthis.isFullscreen = (document.webkitIsFullScreen\r\n\t\t\t|| document.mozFullScreen\r\n\t\t\t|| (document.msFullscreenElement && document.msFullscreenElement !== null)\r\n\t\t\t|| (document.fullscreenElement && document.fullscreenElement !== null));\r\n\r\n\t\tlet minimize = document.getElementById('minimizeIcon');\r\n\t\tlet maximize = document.getElementById('maximizeIcon');\r\n\t\tif (minimize && maximize) {\r\n\t\t\tif (this.isFullscreen) {\r\n\t\t\t\tminimize.style.display = 'inline';\r\n\t\t\t\t//ios disappearing svg fix\r\n\t\t\t\tminimize.style.transform = 'translate(0, 0)';\r\n\t\t\t\tmaximize.style.display = 'none';\r\n\t\t\t} else {\r\n\t\t\t\tminimize.style.display = 'none';\r\n\t\t\t\tmaximize.style.display = 'inline';\r\n\t\t\t\t//ios disappearing svg fix\r\n\t\t\t\tmaximize.style.transform = 'translate(0, 0)';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nexport class NativeDOMDelegate extends libspsfrontend.DelegateBase {\r\n\tconfig: libspsfrontend.Config;\r\n\tlatencyStartTime: number;\r\n\tvideoStartTime: number;\r\n\tmobileUser: boolean;\r\n\tstreamReady: boolean;\r\n\r\n\t// instantiate the WebRtcPlayerControllers interface var \r\n\tiWebRtcController: libspsfrontend.IWebRtcPlayerController;\r\n\r\n\tshowStats: boolean;\r\n\r\n\t// HTML Elements that are used multiple times\r\n\r\n\t// Global\r\n\tvideoQpIndicator: VideoQpIndicator;\r\n\tfullScreenLogic: FullScreenLogic;\r\n\r\n\t// settings and stats panels\r\n\tsettingsPanel = document.getElementById('settings-panel') as HTMLDivElement;\r\n\tstatsPanel = document.getElementById('stats-panel') as HTMLDivElement;\r\n\r\n\t// Pre Stream options\r\n\tforceTurnToggle = document.getElementById(\"force-turn-tgl\") as HTMLInputElement;\r\n\r\n\t// Viewing\r\n\tenlargeDisplayToFillWindow = document.getElementById(\"enlarge-display-to-fill-window-tgl\") as HTMLInputElement;\r\n\tqualityControlOwnershipCheckBox = document.getElementById(\"quality-control-ownership-tgl\") as HTMLInputElement;\r\n\ttoggleMatchViewPortRes = document.getElementById(\"match-viewport-res-tgl\") as HTMLInputElement;\r\n\tcontrolSchemeToggle = document.getElementById(\"control-scheme-tgl\") as HTMLInputElement;\r\n\tcontrolSchemeToggleTitle = document.getElementById(\"control-scheme-title\") as HTMLDivElement;\r\n\r\n\t// Commands\r\n\tuiDescriptorText = document.getElementById(\"ui-descriptor-text\") as HTMLInputElement;\r\n\r\n\t// Settings\r\n\tencoderMinQpText = document.getElementById(\"encoder-min-qp-text\") as HTMLInputElement;\r\n\tencoderMaxQpText = document.getElementById(\"encoder-max-qp-text\") as HTMLInputElement;\r\n\twebRtcFpsText = document.getElementById(\"webrtc-fps-text\") as HTMLInputElement;\r\n\twebRtcMinBitrateText = document.getElementById(\"webrtc-min-bitrate-text\") as HTMLInputElement;\r\n\twebRtcMaxBitrateText = document.getElementById(\"webrtc-max-bitrate-text\") as HTMLInputElement;\r\n\r\n\t// Statistics\r\n\tsendStatsToServer = document.getElementById(\"send-stats-tgl\") as HTMLInputElement;\r\n\r\n\t// Containers Headers\r\n\tpreStreamContainer = document.getElementById(\"preStreamOptionsHeader\") as HTMLDivElement;\r\n\tviewSettingsHeader = document.getElementById(\"viewSettingsHeader\") as HTMLDivElement;\r\n\tcommandsHeader = document.getElementById(\"commandsHeader\") as HTMLDivElement;\r\n\tstreamingSettingsHeader = document.getElementById(\"streamingSettingsHeader\") as HTMLDivElement;\r\n\tstatsHeader = document.getElementById(\"statisticsHeader\") as HTMLDivElement;\r\n\tlatencyHeader = document.getElementById(\"latencyTestHeader\") as HTMLDivElement;\r\n\r\n\t// Containers\r\n\tviewSettingsContainer = document.getElementById(\"viewSettingsContainer\") as HTMLDivElement;\r\n\tcommandsContainer = document.getElementById(\"commandsContainer\") as HTMLDivElement;\r\n\tstreamingSettingsContainer = document.getElementById(\"streamingSettingsContainer\") as HTMLDivElement;\r\n\tstatsContainer = document.getElementById(\"statisticsContainer\") as HTMLDivElement;\r\n\tlatencyContainer = document.getElementById(\"latencyTestContainer\") as HTMLDivElement;\r\n\r\n\tappName: string;\r\n\r\n\tconstructor(config: libspsfrontend.Config) {\r\n\t\tsuper(config);\r\n\t\tthis.config = config;\r\n\t\tthis.showStats = true;\r\n\t\tthis.videoQpIndicator = new VideoQpIndicator(\"connectionStrength\", \"qualityText\", \"outer\", \"middle\", \"inner\", \"dot\");\r\n\t\tthis.fullScreenLogic = new FullScreenLogic();\r\n\t\tthis.streamReady = false;\r\n\r\n\t\t// build all of the overlays \r\n\t\tthis.buildDisconnectOverlay();\r\n\t\tthis.buildConnectOverlay();\r\n\t\tthis.buildPlayOverlay();\r\n\t\tthis.buildAfkOverlay();\r\n\t\tthis.buildInfoOverlay();\r\n\t\tthis.buildErrorOverlay();\r\n\r\n\t\t// configure all buttons \r\n\t\tthis.ConfigureButtons();\r\n\t}\r\n\r\n\tupdateVideoStreamSize(x: number, y: number) {\r\n\t\t(<libspsfrontend.webRtcPlayerController>this.iWebRtcController).ueDescriptorUi.sendUpdateVideoStreamSize(x, y);\r\n\t}\r\n\r\n        write(file: string, message: string) {\r\n            const data = {\r\n                filename: file,\r\n                data: message\r\n            };\r\n\r\n            fetch('https://prophet.palatialxr.com:3001/save', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(data)\r\n                })\r\n                .then(response => {\r\n                    console.log(\r\n                        `statusCode: ${response.status}`\r\n                        );\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    console.log(data);\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n\r\n\t/**\r\n\t * Builds the disconnect overlay \r\n\t */\r\n\tbuildDisconnectOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet disconnectOverlayHtml = document.createElement('div');\r\n\t\tdisconnectOverlayHtml.id = \"disconnectOverlay\";\r\n\t\tdisconnectOverlayHtml.className = \"clickableState\";\r\n\r\n\t\t// set the event Listener\r\n\t\tlet disconnectOverlayEvent: EventListener = () => this.onDisconnectionAction();\r\n\t\tconst self = this;\r\n\r\n\t\t// add the new event listener \r\n\t\tdisconnectOverlayHtml.addEventListener('click', function onOverlayClick(event: Event) {\t\t\t\r\n\t\t\tdisconnectOverlayEvent(event);\r\n\t\t\t//whuzz\r\n\t\t});\r\n\r\n\t\t// build the inner html container \r\n\t\tlet disconnectOverlayHtmlInnerContainer = document.createElement('div');\r\n\t\tdisconnectOverlayHtmlInnerContainer.id = 'disconnectButton';\r\n\r\n\t\t// build the span that holds error text\r\n\t\tlet disconnectOverlayInnerSpan = document.createElement('span');\r\n\t\tdisconnectOverlayInnerSpan.id = 'disconnectText';\r\n\t\tdisconnectOverlayInnerSpan.innerHTML = 'Click To Restart';\r\n\r\n\t\t// build the image element that holds the reconnect element\r\n\t\tlet restartSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n\t\trestartSvg.setAttribute('width', \"40\");\r\n\t\trestartSvg.setAttribute('height', \"40\");\r\n\t\trestartSvg.setAttribute('fill', \"currentColor\");\r\n\t\trestartSvg.setAttribute('class', \"bi bi-arrow-counterclockwise m-2\");\r\n\t\trestartSvg.setAttribute('viewBox', \"0 0 16 16\");\r\n\r\n\t\t// build the arrow path \r\n\t\tlet restartSvgPathArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n\t\trestartSvgPathArrow.setAttribute('fill-rule', \"evenodd\");\r\n\t\trestartSvgPathArrow.setAttribute('d', \"M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z\");\r\n\r\n\t\t// build the circle path\r\n\t\tlet restartSvgPathCircle = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n\t\trestartSvgPathCircle.setAttribute('d', \"M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z\");\r\n\r\n\t\t// bring it all together\r\n\t\trestartSvg.appendChild(restartSvgPathArrow);\r\n\t\trestartSvg.appendChild(restartSvgPathCircle);\r\n\r\n\t\t// append the span and images to the content container \r\n\t\tdisconnectOverlayHtmlInnerContainer.appendChild(disconnectOverlayInnerSpan);\r\n\t\tdisconnectOverlayHtmlInnerContainer.appendChild(restartSvg);\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.disconnectOverlay = new ActionOverlayBase(this.config.playerElement, disconnectOverlayHtml, disconnectOverlayHtmlInnerContainer, \"disconnectText\");\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the connect overlay \r\n\t */\r\n\tbuildConnectOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet connectOverlayHtml = document.createElement('div');\r\n\t\tconnectOverlayHtml.id = \"connectOverlay\";\r\n\t\tconnectOverlayHtml.className = \"clickableState\";\r\n\r\n\t\t// set the event Listener\r\n\t\tlet connectOverlayEvent: EventListener = () => this.onConnectAction();\r\n\r\n\t\t// add the new event listener \r\n\t\tconnectOverlayHtml.addEventListener('click', function onOverlayClick(event: Event) {\r\n\t\t\tconnectOverlayEvent(event);\r\n\t\t});\r\n\r\n\t\t// build the inner html \r\n\t\tlet connectOverlayHtmlInner = document.createElement('div');\r\n\t\tconnectOverlayHtmlInner.id = 'connectButton';\r\n\t\tconnectOverlayHtmlInner.innerHTML = 'Click to start';\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.connectOverlay = new ActionOverlayBase(this.config.playerElement, connectOverlayHtml, connectOverlayHtmlInner);\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the play overlay \r\n\t */\r\n\tbuildPlayOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet playOverlayHtml = document.createElement('div');\r\n\t\t//playOverlayHtml.id = \"startText\";\r\n\t\t//playOverlayHtml.classList.add(\"clickableState\", \"loadingText\");\r\n\r\n\t\t// set the event Listener\r\n                let playOverlayEvent: EventListener = () => this.onPlayAction();\t\r\n\r\n                // add the new event listener\r\n                /*playOverlayHtml.addEventListener('click', function onOverlayClick(event: Event) {\r\n                        playOverlayEvent(event);\r\n                        document.getElementById('container').style.display = 'none';\r\n                        document.body.style.cursor = 'none';\r\n                        openFullscreen();\r\n                });*/\r\n\r\n\t\t// build the inner html \r\n\t\tlet playOverlayHtmlInner = document.createElement('div');\r\n\t\t//playOverlayHtmlInner.className = \"disconnectText\";\r\n\t\t//playOverlayHtmlInner.innerHTML = \"Click to start\";\r\n\t\t\r\n\t\t// instantiate the overlay\r\n\t\tthis.playOverlay = new ActionOverlayBase(this.config.playerElement, playOverlayHtml, playOverlayHtmlInner);\r\n\t}\r\n\t/**\r\n\t * Builds the Afk overlay \r\n\t */\r\n\tbuildAfkOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet afkOverlayHtml = document.createElement('div');\r\n\t\tafkOverlayHtml.id = \"afkOverlay\";\r\n\t\tafkOverlayHtml.className = \"clickableState\";\r\n\r\n\t\tlet afkOverlayEvent: EventListener = () => this.onAfkAction();\r\n\r\n\t\tafkOverlayHtml.addEventListener('click', function onOverlayClick(event: Event) {\r\n\t\t\tafkOverlayEvent(event);\r\n\t\t});\r\n\r\n\t\t// build the inner html\r\n\t\tlet afkOverlayHtmlInner = document.createElement('div');\r\n\t\tafkOverlayHtmlInner.id = 'afkOverlayInner';\r\n\t\tafkOverlayHtmlInner.innerHTML = '<center>No activity detected<br>Disconnecting in <span id=\"afkCountDownNumber\"></span> seconds<br>Click to continue<br></center>'\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.afkOverlay = new AfkOverlayBase(this.config.playerElement, afkOverlayHtml, afkOverlayHtmlInner, \"afkCountDownNumber\");\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the info overlay \r\n\t */\r\n\tbuildInfoOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet infoOverlayHtml = document.createElement('div');\r\n\t\tinfoOverlayHtml.id = \"infoOverlay\";\r\n\t\tinfoOverlayHtml.className = \"textDisplayState\";\r\n\r\n\t\t// build the inner html\r\n\t\tlet infoOverlayHtmlInner = document.createElement('div');\r\n\t\tinfoOverlayHtmlInner.id = 'messageOverlayInner';\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.infoOverlay = new TextOverlayBase(this.config.playerElement, infoOverlayHtml, infoOverlayHtmlInner);\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the error overlay \r\n\t */\r\n\tbuildErrorOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet errorOverlayHtml = document.createElement('div');\r\n\t\terrorOverlayHtml.id = \"errorOverlay\";\r\n\t\terrorOverlayHtml.className = \"textDisplayState\";\r\n\r\n\t\t// build the inner html\r\n\t\tlet errorOverlayHtmlInner = document.createElement('div');\r\n\t\terrorOverlayHtmlInner.id = 'errorOverlayInner';\r\n\t\terrorOverlayHtmlInner.classList.add(\".text-danger\");\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.errorOverlay = new TextOverlayBase(this.config.playerElement, errorOverlayHtml, errorOverlayHtmlInner);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a text overlay to alert the user the stream is currently loading\r\n\t */\r\n\tonStreamLoading() {\r\n\t\t// build the spinner span\r\n\t\tvar spinnerSpan: HTMLSpanElement = document.createElement('span');\r\n\t\tspinnerSpan.className = \"visually-hidden\"\r\n\t\tspinnerSpan.innerHTML = \"Loading\"\r\n\r\n\t\t// build the spinner div\r\n\t\tvar spinnerDiv: HTMLDivElement = document.createElement('div');\r\n\t\tspinnerDiv.id = \"loading-spinner\"\r\n\t\tspinnerDiv.className = \"spinner-border ms-2\"\r\n\t\tspinnerDiv.setAttribute(\"role\", \"status\");\r\n\r\n\t\t// append the spinner to the element\r\n\t\tspinnerDiv.appendChild(spinnerSpan);\r\n\t\tthis.showTextOverlay(\"Loading Stream \" + spinnerDiv.outerHTML);\r\n\t}\r\n\r\n        zoomIn() {\r\n            const scaleFactor = 1.2;\r\n            const currentScale = parseFloat(document.body.style.transform.replace('scale(', '').replace(')', ''));\r\n            const newScale = currentScale ? currentScale * scaleFactor : scaleFactor;\r\n            document.body.style.transform = `scale(${newScale})`;\r\n        }\r\n\r\n\t/**\r\n\t* Set up functionality to happen when an instance state change occurs and updates the info overlay with the response\r\n\t* @param instanceState - the message instance state \r\n\t*/\r\n        onInstanceStateChange(instanceState: libspsfrontend.MessageInstanceState) {\r\n\t\tlet instanceStateMessage = \"\";\r\n\t\tlet isInstancePending = false;\r\n\t\tlet isError = false;\r\n\r\n\t\t// get the response type\r\n\t\tswitch (instanceState.state) {\r\n\t\t\tcase libspsfrontend.InstanceState.UNALLOCATED:\r\n\t\t\t\tinstanceStateMessage = \"Instance Unallocated: \" + instanceState.details;\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.InstanceState.FAILED:\r\n\t\t\t\tinstanceStateMessage = \"UE Instance Failed: \" + instanceState.details;\r\n\t\t\t\tisError = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.InstanceState.PENDING:\r\n\t\t\t\tisInstancePending = true;\r\n\t\t\t\tif (instanceState.details == undefined || instanceState.details == null) {\r\n\t\t\t\t\tinstanceStateMessage = \"Your application is pending\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinstanceStateMessage = instanceState.details;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.InstanceState.READY:\r\n\t\t\t\tif (instanceState.details == undefined || instanceState.details == null) {\r\n\t\t\t\t\tinstanceStateMessage = \"Instance is Ready\";\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinstanceStateMessage = \"Instance is Ready: \" + instanceState.details;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tinstanceStateMessage = \"Unhandled Instance State\" + instanceState.state + \" \" + instanceState.details;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (isError) {\r\n\t\t\tthis.showErrorOverlay(instanceStateMessage);\r\n\t\t} else if (isInstancePending) {\r\n\t\t\t//check if there is already and instance pending if so return \r\n\t\t\tlet preExistingPendingMessage = document.getElementById('loading-spinner') as HTMLDivElement;\r\n\t\t\tif (preExistingPendingMessage) {\r\n\r\n\t\t\t\t// only update our text div\r\n\t\t\t\tlet textDiv = document.getElementById(\"text-\"+instanceState.id) as HTMLSpanElement;\r\n\t\t\t\ttextDiv.innerHTML = instanceStateMessage;\r\n\t\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// build a wrapper to hold our text and our spinner\r\n\t\t\tvar wrapperDiv: HTMLDivElement = document.createElement('div');\r\n\r\n\t\t\t// build a text div to hold our text message\r\n\t\t\tvar textSpan: HTMLSpanElement = document.createElement('span');\r\n\t\t\ttextSpan.id = \"text-\" + instanceState.id\r\n\t\t\ttextSpan.innerHTML = instanceStateMessage;\r\n\r\n\t\t\t// build the spinner span\r\n\t\t\tvar spinnerSpan: HTMLSpanElement = document.createElement('span');\r\n\t\t\tspinnerSpan.className = \"visually-hidden\"\r\n\t\t\tspinnerSpan.innerHTML = \"Loading...\"\r\n\r\n\t\t\t// build the spinner div\r\n\t\t\tvar spinnerDiv: HTMLDivElement = document.createElement('div');\r\n\t\t\tspinnerDiv.id = \"loading-spinner\"\r\n\t\t\tspinnerDiv.className = \"spinner-border ms-2\"\r\n\t\t\tspinnerDiv.setAttribute(\"role\", \"status\");\r\n\r\n\t\t\t// append wrapper and the spinner to the element\r\n\t\t\twrapperDiv.appendChild(textSpan);\r\n\t\t\twrapperDiv.appendChild(spinnerDiv).appendChild(spinnerSpan);\r\n\r\n\t\t\t// insert the inner html into the base div\r\n\t\t\tthis.showTextOverlay(wrapperDiv.outerHTML);\r\n\t\t} else {\r\n\r\n\t\t}\r\n\r\n                function openFullscreen() {\r\n                        let body = document.documentElement;\r\n                        if (body.requestFullscreen) {\r\n                                body.requestFullscreen();\r\n                        } else if (body.webkitRequestFullscreen) { /* Safari */\r\n                                body.webkitRequestFullscreen();\r\n                        } else if (body.msRequestFullscreen) { /* IE11 */\r\n                                body.msRequestFullscreen();\r\n                        }\r\n                }\r\n\t}\r\n\r\n\t/**\r\n\t * Set up functionality to happen when receiving an auth response and updates an info overlay with the response\r\n\t * @param authResponse - the auth response message type\r\n\t */\r\n\tonAuthenticationResponse(authResponse: libspsfrontend.MessageAuthResponse) {\r\n\t\tlet instanceStateMessage = \"\";\r\n\t\tlet isError = false;\r\n\r\n\t\t// get the response type\r\n\t\tswitch (authResponse.outcome) {\r\n\t\t\tcase libspsfrontend.MessageAuthResponseOutcomeType.AUTHENTICATED:\r\n\t\t\t\tinstanceStateMessage = \"Authentication has succeeded. Requesting Instance\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.MessageAuthResponseOutcomeType.INVALID_TOKEN:\r\n\t\t\t\tinstanceStateMessage = \"Invalid Token: \" + authResponse.error;\r\n\t\t\t\tisError = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.MessageAuthResponseOutcomeType.REDIRECT:\r\n\t\t\t\tinstanceStateMessage = \"Redirecting to: \" + authResponse.redirect;\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.MessageAuthResponseOutcomeType.ERROR:\r\n\t\t\t\tinstanceStateMessage = \"Error: \" + authResponse.error;\r\n\t\t\t\tisError = true;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tinstanceStateMessage = \"Unhandled Auth Response: \" + authResponse.outcome;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// if the response is an error show the error instead of the info \r\n\t\tif (isError) {\r\n\t\t\tthis.showErrorOverlay(instanceStateMessage);\r\n\t\t} else {\r\n\t\t\tthis.showTextOverlay(instanceStateMessage);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set up button click functions and button functionality  \r\n\t */\r\n\tConfigureButtons() {\r\n\r\n\t\t// set up the settings \r\n\t\tdocument.getElementById('settingsBtn').onclick = () => this.settingsClicked();\r\n\t\tdocument.getElementById('settingsClose').onclick = () => this.settingsClicked();\r\n\r\n\t\t// setup the info button\r\n\t\tdocument.getElementById('statsBtn').onclick = () => this.statsClicked();\r\n\t\tdocument.getElementById('statsClose').onclick = () => this.statsClicked();\r\n\r\n\t\t// setup the Force TURN toggle\r\n\t\tthis.setUpToggleWithUrlParams(this.forceTurnToggle, \"ForceTURN\");\r\n\r\n\t\tthis.setUpControlSchemeTypeToggle(this.controlSchemeToggle);\r\n\r\n\t\t// set up the restart stream button\r\n\t\tdocument.getElementById(\"restart-stream-button\").onclick = () => {\r\n\t\t\tthis.settingsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t\t\tthis.iWebRtcController.restartStreamAutomaticity();\r\n\t\t}\r\n\r\n\t\tdocument.getElementById(\"btn-streaming-settings\").onclick = () => {\r\n\t\t\tlibspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), \"--------  Sending Streaming settings  --------\", 7);\r\n\t\t\tlet encode: libspsfrontend.Encoder = {\r\n\t\t\t\tMinQP: Number(this.encoderMinQpText.value),\r\n\t\t\t\tMaxQP: Number(this.encoderMaxQpText.value),\r\n\t\t\t}\r\n\r\n\t\t\tlet webRtcSettings: libspsfrontend.WebRTC = {\r\n\t\t\t\tFPS: Number(this.webRtcFpsText.value),\r\n\t\t\t\tMinBitrate: Number(this.webRtcMinBitrateText.value) * 1000,\r\n\t\t\t\tMaxBitrate: Number(this.webRtcMaxBitrateText.value) * 1000,\r\n\t\t\t}\r\n\r\n\t\t\tthis.iWebRtcController.sendEncoderSettings(encode);\r\n\t\t\tthis.iWebRtcController.sendWebRtcSettings(webRtcSettings);\r\n\t\t\tlibspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), \"-------------------------------------------\", 7);\r\n\t\t}\r\n\r\n\r\n\t\t// sending UI descriptors \r\n\t\tdocument.getElementById(\"sendUiDescriptor\").onclick = () => {\r\n\t\t\tthis.iWebRtcController.sendUeUiDescriptor(this.uiDescriptorText.value);\r\n\r\n\t\t};\r\n\r\n\t\t// show the current fps on screen \r\n\t\tdocument.getElementById(\"show-fps-button\").onclick = () => {\r\n\t\t\tthis.iWebRtcController.sendShowFps();\r\n\t\t};\r\n\r\n\t\t// make the player fill the window\r\n\t\tthis.enlargeDisplayToFillWindow.onchange = () => {\r\n\t\t\tthis.iWebRtcController.resizePlayerStyle();\r\n\t\t\tthis.iWebRtcController.setEnlargeToFillDisplay(this.enlargeDisplayToFillWindow.checked);\r\n\t\t};\r\n\r\n\t\t// make the player match the view port resolution \r\n\t\tthis.toggleMatchViewPortRes.onchange = () => {\r\n\t\t\tthis.iWebRtcController.matchViewportResolution = this.toggleMatchViewPortRes.checked;\r\n\t\t\tthis.iWebRtcController.updateVideoStreamSize();\r\n\t\t};\r\n\r\n\t\t// quality control ownership checkbox \r\n\t\tthis.qualityControlOwnershipCheckBox.onchange = () => {\r\n\t\t\tif (this.qualityControlOwnershipCheckBox.checked === false) {\r\n\t\t\t\tthis.iWebRtcController.sendRequestQualityControlOwnership();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the settings panel if clicked\r\n\t */\r\n\tsettingsClicked() {\r\n\t\t/**\r\n\t\t * Toggle settings panel. If stats panel is already open, close it and then open settings\r\n\t\t */\r\n\t\tif (this.statsPanel.classList.contains(\"panel-wrap-visible\")) {\r\n\t\t\tthis.statsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t\t}\r\n\r\n\t\tthis.settingsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the stats panel if clicked\r\n\t */\r\n\tstatsClicked() {\r\n\t\t/**\r\n\t\t * Toggle stats panel. If settings panel is already open, close it and then open stats\r\n\t\t */\r\n\t\tif (this.settingsPanel.classList.contains(\"panel-wrap-visible\")) {\r\n\t\t\tthis.settingsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t\t}\r\n\r\n\t\tthis.statsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t}\r\n\r\n\t/**\r\n\t * Set up toggle element for controlling hovering mouse or locked mouse  \r\n\t * @param toggleElement the toggle html element to be set up\r\n\t */\r\n\tsetUpControlSchemeTypeToggle(toggleElement: HTMLInputElement) {\r\n\t\tif (toggleElement) {\r\n\r\n\t\t\t// set the state for the toggle based on the config\r\n\t\t\tif (this.config.controlScheme === libspsfrontend.ControlSchemeType.LockedMouse) {\r\n\t\t\t\tthis.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Locked Mouse\"\r\n\t\t\t\tthis.controlSchemeToggle.checked = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Hovering Mouse\"\r\n\t\t\t\tthis.controlSchemeToggle.checked = true;\r\n\t\t\t}\r\n\r\n\t\t\t// set the onChange event \r\n\t\t\ttoggleElement.onchange = () => {\r\n\t\t\t\tif (toggleElement.checked === true) {\r\n\t\t\t\t\tthis.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Hovering Mouse\"\r\n\t\t\t\t\tthis.config.controlScheme = libspsfrontend.ControlSchemeType.HoveringMouse;\r\n\t\t\t\t\tthis.iWebRtcController.activateRegisterMouse();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Locked Mouse\"\r\n\t\t\t\t\tthis.config.controlScheme = libspsfrontend.ControlSchemeType.LockedMouse;\r\n\t\t\t\t\tthis.iWebRtcController.activateRegisterMouse();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set up url toggle buttons\r\n\t * @param toggleElement the toggle element being activated  \r\n\t * @param urlParameterKey the url key that is being made use of\r\n\t */\r\n\tsetUpToggleWithUrlParams(toggleElement: HTMLInputElement, urlParameterKey: string) {\r\n\t\tif (toggleElement) {\r\n\t\t\t//Check if the element has been set from the URL Params \r\n\t\t\ttoggleElement.checked = new URLSearchParams(window.location.search).has(urlParameterKey);\r\n\r\n\t\t\ttoggleElement.onchange = () => {\r\n\t\t\t\tconst urlParams = new URLSearchParams(window.location.search);\r\n\t\t\t\tif (toggleElement.checked === true) {\r\n\t\t\t\t\turlParams.set(urlParameterKey, \"true\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\turlParams.delete(urlParameterKey);\r\n\t\t\t\t}\r\n\t\t\t\twindow.history.replaceState({}, '', urlParams.toString() !== \"\" ? `${window.location.pathname}?${urlParams}` : `${window.location.pathname}`);\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disable shared session links for all players\r\n\t * @returns false\r\n\t */\r\n\tasync IsLinkSharingEnabled() {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Handle when the Video has been Initialised\r\n\t */\r\n\tonVideoInitialised() {\r\n\t\tconsole.log('ready!');\r\n\t\tthis.streamReady = true;\r\n\t\t// starting a latency check\r\n\t\tdocument.getElementById(\"btn-start-latency-test\").onclick = () => {\r\n\t\t\tthis.iWebRtcController.sendLatencyTest();\r\n\t\t}\r\n\r\n\t\t// Set up stream tools header functionality\r\n\t\tthis.viewSettingsHeader.onclick = () => {\r\n\t\t\tthis.viewSettingsContainer.classList.contains(\"d-none\") ? this.viewSettingsContainer.classList.remove(\"d-none\") : this.viewSettingsContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\r\n\t\tthis.commandsHeader.onclick = () => {\r\n\t\t\tthis.commandsContainer.classList.contains(\"d-none\") ? this.commandsContainer.classList.remove(\"d-none\") : this.commandsContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\r\n\t\tthis.streamingSettingsHeader.onclick = () => {\r\n\t\t\tthis.streamingSettingsContainer.classList.contains(\"d-none\") ? this.streamingSettingsContainer.classList.remove(\"d-none\") : this.streamingSettingsContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\t\tthis.statsHeader.onclick = () => {\r\n\t\t\tthis.statsContainer.classList.contains(\"d-none\") ? this.statsContainer.classList.remove(\"d-none\") : this.statsContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\t\tthis.latencyHeader.onclick = () => {\r\n\t\t\tthis.latencyContainer.classList.contains(\"d-none\") ? this.latencyContainer.classList.remove(\"d-none\") : this.latencyContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\r\n\t\t// Reveal all the container\r\n\t\tthis.viewSettingsContainer.classList.remove(\"d-none\");\r\n\t\tthis.commandsContainer.classList.remove(\"d-none\");\r\n\t\tthis.streamingSettingsContainer.classList.remove(\"d-none\");\r\n\t\tthis.statsContainer.classList.remove(\"d-none\");\r\n\r\n\t\tthis.videoStartTime = Date.now();\r\n\t}\r\n\r\n\t/**\r\n\t * Extended from the base functionality; displays the error overlay and resets the buttons stream tools upon disconnect \r\n\t * @param eventText \r\n\t */\r\n\tonDisconnect(eventText: string) {\r\n\t\t// display the text overlay by calling its super method so it will use its default behavior first \r\n\t\tsuper.onDisconnect(`${eventText}`);\r\n\r\n\t\t// update all of the tools upon disconnect \r\n\t\tthis.onVideoEncoderAvgQP(0);\r\n\r\n\t\t// starting a latency check\r\n\t\tdocument.getElementById(\"btn-start-latency-test\").onclick = () => { }\r\n\r\n\t\t// Set up stream tools header functionality\r\n\t\tthis.viewSettingsHeader.onclick = () => { }\r\n\t\tthis.commandsHeader.onclick = () => { }\r\n\t\tthis.streamingSettingsHeader.onclick = () => { }\r\n\t\tthis.statsHeader.onclick = () => { }\r\n\t\tthis.latencyHeader.onclick = () => { }\r\n\r\n\t\t// Hide all the containers\r\n\t\tthis.viewSettingsContainer.classList.add(\"d-none\");\r\n\t\tthis.commandsContainer.classList.add(\"d-none\");\r\n\t\tthis.streamingSettingsContainer.classList.add(\"d-none\");\r\n\t\tthis.statsContainer.classList.add(\"d-none\");\t\r\n\t}\r\n\t/**\r\n\t * `Takes the InitialSettings and wired to frontend\r\n\t * @param settings - Settings sent from the UE Instance`\r\n\t */\r\n\tonInitialSettings(settings: libspsfrontend.InitialSettings): void {\r\n\t\tif (settings.Encoder) {\r\n\t\t\tthis.encoderMinQpText.value = settings.Encoder.MinQP.toString();\r\n\t\t\tthis.encoderMaxQpText.value = settings.Encoder.MaxQP.toString();\r\n\t\t}\r\n\t\tif (settings.WebRTC) {\r\n\t\t\tthis.webRtcMinBitrateText.value = settings.WebRTC.MinBitrate.toString();\r\n\t\t\tthis.webRtcMaxBitrateText.value = settings.WebRTC.MaxBitrate.toString();\r\n\t\t\tthis.webRtcFpsText.value = settings.WebRTC.FPS.toString();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Used to handle the Video Stats from the Peer Connection Client\r\n\t* @param stats - Stats generate from the Peer Connection Client\r\n\t*/\r\n\tonVideoStats(stats: libspsfrontend.AggregatedStats): void {\r\n\t\tlet runTime = new Date(Date.now() - this.videoStartTime).toISOString().substr(11, 8);\r\n\t\tlet statsText = \"\";\r\n\t\tlet inboundData = this.formatBytes(stats.inboundVideoStats.bytesReceived, 2);\r\n\r\n\t\t// format numbering based on the browser language\r\n\t\tlet numberFormat = new Intl.NumberFormat(window.navigator.language, {\r\n            maximumFractionDigits: 0\r\n        });\r\n\r\n\t\t// ensure that we have a currentRoundTripTime coming in from stats and format it if it's a number\r\n\t\tlet netRTT = stats.candidatePair.hasOwnProperty('currentRoundTripTime') && stats.isNumber(stats.candidatePair.currentRoundTripTime) ? numberFormat.format(stats.candidatePair.currentRoundTripTime * 1000) : 'Can\\'t calculate';\r\n\r\n\t\tstatsText += `<div>Duration: ${runTime}</div>`;\r\n\t\tstatsText += `<div>Received: ${inboundData}</div>`;\r\n\t\tstatsText += `<div>Packets Lost: ${stats.inboundVideoStats.packetsLost}</div>`;\r\n\t\tstatsText += `<div>Bitrate (kbps): ${stats.inboundVideoStats.bitrate}</div>`;\r\n\t\tstatsText += `<div>Video Resolution: ${\r\n            stats.inboundVideoStats.hasOwnProperty('frameWidth') && stats.inboundVideoStats.frameWidth && stats.inboundVideoStats.hasOwnProperty('frameHeight') && stats.inboundVideoStats.frameHeight ?\r\n                stats.inboundVideoStats.frameWidth + 'x' + stats.inboundVideoStats.frameHeight : 'Chrome only'\r\n            }</div>`;\r\n\t\tstatsText += `<div>Frames Decoded: ${stats.inboundVideoStats.hasOwnProperty('framesDecoded') ? numberFormat.format(stats.inboundVideoStats.framesDecoded) : 'Chrome only'}</div>`;\r\n\t\tstatsText += `<div>Packets Lost: ${stats.inboundVideoStats.hasOwnProperty('packetsLost') ? numberFormat.format(stats.inboundVideoStats.packetsLost) : 'Chrome only'}</div>`;\r\n\t\tstatsText += `<div>Framerate: ${stats.inboundVideoStats.framerate}</div>`;\r\n\t\tstatsText += `<div>Frames dropped: ${stats.inboundVideoStats.framesDropped}</div>`;\r\n\t\tstatsText += `<div>Net RTT (ms): ${netRTT}</div>`;\r\n\t\t//statsText += `<div>Browser receive to composite (ms): ${stats.inboundVideoStats.receiveToCompositeMs}</div>`;\r\n\t\tstatsText += `<div>Video Quantization Parameter: ${this.videoQpIndicator.videoEncoderAvgQP}</div>`;\r\n\r\n\t\tlet statsDiv = document.getElementById(\"statisticsResult\");\r\n\t\tstatsDiv.innerHTML = statsText;\r\n\r\n\t\tlibspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), `--------- Stats ---------\\n ${stats}\\n------------------------`, 6);\r\n\r\n\t\tif (this.sendStatsToServer.checked === true) {\r\n\t\t\tthis.iWebRtcController.sendStatsToSignallingServer(stats);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* formats Bytes coming in for video stats\r\n\t* @param bytes number to convert\r\n\t* @param decimals number of decimal places\r\n\t*/\r\n\tformatBytes(bytes: number, decimals: number): string {\r\n\t\tif (bytes === 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\r\n\t\tconst factor: number = 1024;\r\n\t\tconst dm = decimals < 0 ? 0 : decimals;\r\n\t\tconst sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\r\n\r\n\t\tconst i = Math.floor(Math.log(bytes) / Math.log(factor));\r\n\r\n\t\treturn parseFloat((bytes / Math.pow(factor, i)).toFixed(dm)) + ' ' + sizes[i];\r\n\t}\r\n\r\n\t/**\r\n\t* Handles the result of the UE Latency Test\r\n\t* @param latencyTimings - Latency Test Timings sent from the UE Instance \r\n\t*/\r\n\tonLatencyTestResult(latencyTimings: libspsfrontend.LatencyTestResults): void {\r\n\t\tlibspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), latencyTimings.toString(), 6);\r\n\t\tlet latencyStatsInnerHTML = '';\r\n\t\tlatencyStatsInnerHTML += \"<div>Net latency RTT (ms): \" + latencyTimings.networkLatency + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += \"<div>UE Encode (ms): \" + latencyTimings.EncodeMs + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += \"<div>UE Capture (ms): \" + latencyTimings.CaptureToSendMs + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += \"<div>Browser send latency (ms): \" + latencyTimings.browserSendLatency + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += latencyTimings.frameDisplayDeltaTimeMs && latencyTimings.browserReceiptTimeMs ? \"<div>Browser receive latency (ms): \" + latencyTimings.frameDisplayDeltaTimeMs + \"</div>\" : \"\";\r\n\t\tlatencyStatsInnerHTML += \"<div>Total latency (excluding browser) (ms): \" + latencyTimings.latencyExcludingDecode + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += latencyTimings.endToEndLatency ? \"<div>Total latency (ms): \" + latencyTimings.endToEndLatency + \"</div>\" : \"\";\r\n\r\n\t\tthis.latencyContainer.classList.remove(\"d-none\")\r\n\r\n\t\tdocument.getElementById(\"latencyStatsResults\").innerHTML = latencyStatsInnerHTML;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles when the ownership flag is sent from the signaling server\r\n\t * @param hasQualityOwnership - flag if the user has quality ownership\r\n\t */\r\n\tonQualityControlOwnership(hasQualityOwnership: boolean): void {\r\n\t\tthis.qualityControlOwnershipCheckBox.checked = hasQualityOwnership;\r\n\t}\r\n\r\n\t/**\r\n\t  * Calls updateQpTooltip to update the QP colour light\r\n\t  * @param QP - The video encoder QP number needed to find the average\r\n\t  */\r\n\tonVideoEncoderAvgQP(QP: number): void {\r\n\t\tthis.videoQpIndicator.updateQpTooltip(QP);\r\n\t}\r\n}\r\n\r\n/**\r\n * Declare additions to global html objects that do not exist on the bases\r\n */\r\ndeclare global {\r\n\tinterface Document {\r\n\t\twebkitIsFullScreen?: boolean;\r\n\t\tmozFullScreen?: boolean;\r\n\t\twebkitFullscreenEnabled?: boolean;\r\n\t\tmozCancelFullScreen?: () => Promise<void>;\r\n\t\tmsExitFullscreen?: () => Promise<void>;\r\n\t\twebkitExitFullscreen?: () => Promise<void>;\r\n\t\tmozFullScreenElement?: Element;\r\n\t\tmsFullscreenElement?: Element;\r\n\t\twebkitFullscreenElement?: Element;\r\n\t}\r\n\r\n\tinterface HTMLElement {\r\n\t\tmsRequestFullscreen?: () => Promise<void>;\r\n\t\tmozRequestFullscreen?: () => Promise<void>;\r\n\t\twebkitRequestFullscreen?: () => Promise<void>;\r\n\t}\r\n}\r\n",{"ruleId":"144","severity":1,"message":"145","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":19},{"ruleId":"144","severity":1,"message":"148","line":2,"column":51,"nodeType":"146","messageId":"147","endLine":2,"endColumn":57},{"ruleId":"144","severity":1,"message":"149","line":2,"column":59,"nodeType":"146","messageId":"147","endLine":2,"endColumn":70},{"ruleId":"144","severity":1,"message":"150","line":12,"column":11,"nodeType":"146","messageId":"147","endLine":12,"endColumn":17},{"ruleId":"144","severity":1,"message":"151","line":13,"column":24,"nodeType":"146","messageId":"147","endLine":13,"endColumn":39},{"ruleId":"152","severity":1,"message":"153","line":30,"column":29,"nodeType":"154","messageId":"155","endLine":30,"endColumn":31},{"ruleId":"156","severity":1,"message":"157","line":42,"column":63,"nodeType":"154","messageId":"158","endLine":42,"endColumn":64},{"ruleId":"144","severity":1,"message":"159","line":75,"column":5,"nodeType":"146","messageId":"147","endLine":75,"endColumn":14},{"ruleId":"152","severity":1,"message":"160","line":114,"column":46,"nodeType":"154","messageId":"155","endLine":114,"endColumn":48},{"ruleId":"161","severity":1,"message":"162","line":141,"column":416,"nodeType":"163","messageId":"164","endLine":141,"endColumn":417,"suggestions":"165"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":497,"nodeType":"163","messageId":"164","endLine":141,"endColumn":498,"suggestions":"166"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":562,"nodeType":"163","messageId":"164","endLine":141,"endColumn":563,"suggestions":"167"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":589,"nodeType":"163","messageId":"164","endLine":141,"endColumn":590,"suggestions":"168"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":610,"nodeType":"163","messageId":"164","endLine":141,"endColumn":611,"suggestions":"169"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":648,"nodeType":"163","messageId":"164","endLine":141,"endColumn":649,"suggestions":"170"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":682,"nodeType":"163","messageId":"164","endLine":141,"endColumn":683,"suggestions":"171"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":751,"nodeType":"163","messageId":"164","endLine":141,"endColumn":752,"suggestions":"172"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":774,"nodeType":"163","messageId":"164","endLine":141,"endColumn":775,"suggestions":"173"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":779,"nodeType":"163","messageId":"164","endLine":141,"endColumn":780,"suggestions":"174"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":817,"nodeType":"163","messageId":"164","endLine":141,"endColumn":818,"suggestions":"175"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":830,"nodeType":"163","messageId":"164","endLine":141,"endColumn":831,"suggestions":"176"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":855,"nodeType":"163","messageId":"164","endLine":141,"endColumn":856,"suggestions":"177"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":864,"nodeType":"163","messageId":"164","endLine":141,"endColumn":865,"suggestions":"178"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":897,"nodeType":"163","messageId":"164","endLine":141,"endColumn":898,"suggestions":"179"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":921,"nodeType":"163","messageId":"164","endLine":141,"endColumn":922,"suggestions":"180"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1025,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1026,"suggestions":"181"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1069,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1070,"suggestions":"182"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1090,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1091,"suggestions":"183"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1132,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1133,"suggestions":"184"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1185,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1186,"suggestions":"185"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1282,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1283,"suggestions":"186"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1367,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1368,"suggestions":"187"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1402,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1403,"suggestions":"188"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1431,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1432,"suggestions":"189"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1437,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1438,"suggestions":"190"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1459,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1460,"suggestions":"191"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1468,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1469,"suggestions":"192"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1542,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1543,"suggestions":"193"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1549,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1550,"suggestions":"194"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1564,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1565,"suggestions":"195"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1588,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1589,"suggestions":"196"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1600,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1601,"suggestions":"197"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1608,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1609,"suggestions":"198"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1658,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1659,"suggestions":"199"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1662,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1663,"suggestions":"200"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1715,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1716,"suggestions":"201"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1721,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1722,"suggestions":"202"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1736,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1737,"suggestions":"203"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1740,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1741,"suggestions":"204"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1762,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1763,"suggestions":"205"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1774,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1775,"suggestions":"206"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1835,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1836,"suggestions":"207"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1893,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1894,"suggestions":"208"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1940,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1941,"suggestions":"209"},{"ruleId":"161","severity":1,"message":"162","line":141,"column":1956,"nodeType":"163","messageId":"164","endLine":141,"endColumn":1957,"suggestions":"210"},{"ruleId":"144","severity":1,"message":"211","line":145,"column":10,"nodeType":"146","messageId":"147","endLine":145,"endColumn":16},{"ruleId":"144","severity":1,"message":"145","line":2,"column":10,"nodeType":"146","messageId":"147","endLine":2,"endColumn":19},{"ruleId":"144","severity":1,"message":"148","line":2,"column":51,"nodeType":"146","messageId":"147","endLine":2,"endColumn":57},{"ruleId":"144","severity":1,"message":"149","line":2,"column":59,"nodeType":"146","messageId":"147","endLine":2,"endColumn":70},{"ruleId":"144","severity":1,"message":"150","line":12,"column":11,"nodeType":"146","messageId":"147","endLine":12,"endColumn":17},{"ruleId":"144","severity":1,"message":"151","line":13,"column":24,"nodeType":"146","messageId":"147","endLine":13,"endColumn":39},{"ruleId":"212","severity":1,"message":"213","line":5,"column":13,"nodeType":"146","messageId":"147","endLine":5,"endColumn":34},{"ruleId":"152","severity":1,"message":"160","line":68,"column":29,"nodeType":"154","messageId":"155","endLine":68,"endColumn":31},{"ruleId":"152","severity":1,"message":"160","line":68,"column":110,"nodeType":"154","messageId":"155","endLine":68,"endColumn":112},{"ruleId":"152","severity":1,"message":"160","line":138,"column":28,"nodeType":"154","messageId":"155","endLine":138,"endColumn":30},{"ruleId":"152","severity":1,"message":"153","line":200,"column":21,"nodeType":"154","messageId":"155","endLine":200,"endColumn":23},{"ruleId":"214","severity":1,"message":"215","line":309,"column":38,"nodeType":"216","messageId":"217","endLine":309,"endColumn":50,"fix":"218"},{"ruleId":"214","severity":1,"message":"219","line":430,"column":4,"nodeType":"216","messageId":"217","endLine":430,"endColumn":65,"fix":"220"},{"ruleId":"212","severity":1,"message":"221","line":471,"column":9,"nodeType":"146","messageId":"147","endLine":471,"endColumn":13},{"ruleId":"212","severity":1,"message":"222","line":553,"column":21,"nodeType":"146","messageId":"147","endLine":553,"endColumn":52},{"ruleId":"152","severity":1,"message":"153","line":677,"column":31,"nodeType":"154","messageId":"155","endLine":677,"endColumn":33},{"ruleId":"152","severity":1,"message":"153","line":684,"column":31,"nodeType":"154","messageId":"155","endLine":684,"endColumn":33},{"ruleId":"212","severity":1,"message":"223","line":739,"column":26,"nodeType":"146","messageId":"147","endLine":739,"endColumn":40},"no-unused-vars","'isDesktop' is defined but never used.","Identifier","unusedVar","'osName' is defined but never used.","'browserName' is defined but never used.","'device' is assigned a value but never used.","'setPopUpVisible' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'RTCPlayer' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["224","225"],["226","227"],["228","229"],["230","231"],["232","233"],["234","235"],["236","237"],["238","239"],["240","241"],["242","243"],["244","245"],["246","247"],["248","249"],["250","251"],["252","253"],["254","255"],["256","257"],["258","259"],["260","261"],["262","263"],["264","265"],["266","267"],["268","269"],["270","271"],["272","273"],["274","275"],["276","277"],["278","279"],["280","281"],["282","283"],["284","285"],["286","287"],["288","289"],["290","291"],["292","293"],["294","295"],["296","297"],["298","299"],["300","301"],["302","303"],["304","305"],["306","307"],["308","309"],["310","311"],["312","313"],["314","315"],"'zoomIn' is defined but never used.","@typescript-eslint/no-unused-vars","'WEBSOCKET_URL' is defined but never used.","@typescript-eslint/consistent-type-assertions","Use 'as any' instead of '<any>'.","TSTypeAssertion","as",{"range":"316","text":"317"},"Use 'as libspsfrontend.webRtcPlayerController' instead of '<libspsfrontend.webRtcPlayerController>'.",{"range":"318","text":"319"},"'self' is assigned a value but never used.","'playOverlayEvent' is assigned a value but never used.","'openFullscreen' is defined but never used.",{"messageId":"320","fix":"321","desc":"322"},{"messageId":"323","fix":"324","desc":"325"},{"messageId":"320","fix":"326","desc":"322"},{"messageId":"323","fix":"327","desc":"325"},{"messageId":"320","fix":"328","desc":"322"},{"messageId":"323","fix":"329","desc":"325"},{"messageId":"320","fix":"330","desc":"322"},{"messageId":"323","fix":"331","desc":"325"},{"messageId":"320","fix":"332","desc":"322"},{"messageId":"323","fix":"333","desc":"325"},{"messageId":"320","fix":"334","desc":"322"},{"messageId":"323","fix":"335","desc":"325"},{"messageId":"320","fix":"336","desc":"322"},{"messageId":"323","fix":"337","desc":"325"},{"messageId":"320","fix":"338","desc":"322"},{"messageId":"323","fix":"339","desc":"325"},{"messageId":"320","fix":"340","desc":"322"},{"messageId":"323","fix":"341","desc":"325"},{"messageId":"320","fix":"342","desc":"322"},{"messageId":"323","fix":"343","desc":"325"},{"messageId":"320","fix":"344","desc":"322"},{"messageId":"323","fix":"345","desc":"325"},{"messageId":"320","fix":"346","desc":"322"},{"messageId":"323","fix":"347","desc":"325"},{"messageId":"320","fix":"348","desc":"322"},{"messageId":"323","fix":"349","desc":"325"},{"messageId":"320","fix":"350","desc":"322"},{"messageId":"323","fix":"351","desc":"325"},{"messageId":"320","fix":"352","desc":"322"},{"messageId":"323","fix":"353","desc":"325"},{"messageId":"320","fix":"354","desc":"322"},{"messageId":"323","fix":"355","desc":"325"},{"messageId":"320","fix":"356","desc":"322"},{"messageId":"323","fix":"357","desc":"325"},{"messageId":"320","fix":"358","desc":"322"},{"messageId":"323","fix":"359","desc":"325"},{"messageId":"320","fix":"360","desc":"322"},{"messageId":"323","fix":"361","desc":"325"},{"messageId":"320","fix":"362","desc":"322"},{"messageId":"323","fix":"363","desc":"325"},{"messageId":"320","fix":"364","desc":"322"},{"messageId":"323","fix":"365","desc":"325"},{"messageId":"320","fix":"366","desc":"322"},{"messageId":"323","fix":"367","desc":"325"},{"messageId":"320","fix":"368","desc":"322"},{"messageId":"323","fix":"369","desc":"325"},{"messageId":"320","fix":"370","desc":"322"},{"messageId":"323","fix":"371","desc":"325"},{"messageId":"320","fix":"372","desc":"322"},{"messageId":"323","fix":"373","desc":"325"},{"messageId":"320","fix":"374","desc":"322"},{"messageId":"323","fix":"375","desc":"325"},{"messageId":"320","fix":"376","desc":"322"},{"messageId":"323","fix":"377","desc":"325"},{"messageId":"320","fix":"378","desc":"322"},{"messageId":"323","fix":"379","desc":"325"},{"messageId":"320","fix":"380","desc":"322"},{"messageId":"323","fix":"381","desc":"325"},{"messageId":"320","fix":"382","desc":"322"},{"messageId":"323","fix":"383","desc":"325"},{"messageId":"320","fix":"384","desc":"322"},{"messageId":"323","fix":"385","desc":"325"},{"messageId":"320","fix":"386","desc":"322"},{"messageId":"323","fix":"387","desc":"325"},{"messageId":"320","fix":"388","desc":"322"},{"messageId":"323","fix":"389","desc":"325"},{"messageId":"320","fix":"390","desc":"322"},{"messageId":"323","fix":"391","desc":"325"},{"messageId":"320","fix":"392","desc":"322"},{"messageId":"323","fix":"393","desc":"325"},{"messageId":"320","fix":"394","desc":"322"},{"messageId":"323","fix":"395","desc":"325"},{"messageId":"320","fix":"396","desc":"322"},{"messageId":"323","fix":"397","desc":"325"},{"messageId":"320","fix":"398","desc":"322"},{"messageId":"323","fix":"399","desc":"325"},{"messageId":"320","fix":"400","desc":"322"},{"messageId":"323","fix":"401","desc":"325"},{"messageId":"320","fix":"402","desc":"322"},{"messageId":"323","fix":"403","desc":"325"},{"messageId":"320","fix":"404","desc":"322"},{"messageId":"323","fix":"405","desc":"325"},{"messageId":"320","fix":"406","desc":"322"},{"messageId":"323","fix":"407","desc":"325"},{"messageId":"320","fix":"408","desc":"322"},{"messageId":"323","fix":"409","desc":"325"},{"messageId":"320","fix":"410","desc":"322"},{"messageId":"323","fix":"411","desc":"325"},{"messageId":"320","fix":"412","desc":"322"},{"messageId":"323","fix":"413","desc":"325"},{"messageId":"320","fix":"414","desc":"322"},{"messageId":"323","fix":"415","desc":"325"},[10150,10162],"Element as any",[14964,15025],"this.iWebRtcController as libspsfrontend.webRtcPlayerController","removeEscape",{"range":"416","text":"417"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"418","text":"419"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"420","text":"417"},{"range":"421","text":"419"},{"range":"422","text":"417"},{"range":"423","text":"419"},{"range":"424","text":"417"},{"range":"425","text":"419"},{"range":"426","text":"417"},{"range":"427","text":"419"},{"range":"428","text":"417"},{"range":"429","text":"419"},{"range":"430","text":"417"},{"range":"431","text":"419"},{"range":"432","text":"417"},{"range":"433","text":"419"},{"range":"434","text":"417"},{"range":"435","text":"419"},{"range":"436","text":"417"},{"range":"437","text":"419"},{"range":"438","text":"417"},{"range":"439","text":"419"},{"range":"440","text":"417"},{"range":"441","text":"419"},{"range":"442","text":"417"},{"range":"443","text":"419"},{"range":"444","text":"417"},{"range":"445","text":"419"},{"range":"446","text":"417"},{"range":"447","text":"419"},{"range":"448","text":"417"},{"range":"449","text":"419"},{"range":"450","text":"417"},{"range":"451","text":"419"},{"range":"452","text":"417"},{"range":"453","text":"419"},{"range":"454","text":"417"},{"range":"455","text":"419"},{"range":"456","text":"417"},{"range":"457","text":"419"},{"range":"458","text":"417"},{"range":"459","text":"419"},{"range":"460","text":"417"},{"range":"461","text":"419"},{"range":"462","text":"417"},{"range":"463","text":"419"},{"range":"464","text":"417"},{"range":"465","text":"419"},{"range":"466","text":"417"},{"range":"467","text":"419"},{"range":"468","text":"417"},{"range":"469","text":"419"},{"range":"470","text":"417"},{"range":"471","text":"419"},{"range":"472","text":"417"},{"range":"473","text":"419"},{"range":"474","text":"417"},{"range":"475","text":"419"},{"range":"476","text":"417"},{"range":"477","text":"419"},{"range":"478","text":"417"},{"range":"479","text":"419"},{"range":"480","text":"417"},{"range":"481","text":"419"},{"range":"482","text":"417"},{"range":"483","text":"419"},{"range":"484","text":"417"},{"range":"485","text":"419"},{"range":"486","text":"417"},{"range":"487","text":"419"},{"range":"488","text":"417"},{"range":"489","text":"419"},{"range":"490","text":"417"},{"range":"491","text":"419"},{"range":"492","text":"417"},{"range":"493","text":"419"},{"range":"494","text":"417"},{"range":"495","text":"419"},{"range":"496","text":"417"},{"range":"497","text":"419"},{"range":"498","text":"417"},{"range":"499","text":"419"},{"range":"500","text":"417"},{"range":"501","text":"419"},{"range":"502","text":"417"},{"range":"503","text":"419"},{"range":"504","text":"417"},{"range":"505","text":"419"},{"range":"506","text":"417"},{"range":"507","text":"419"},{"range":"508","text":"417"},{"range":"509","text":"419"},[6292,6293],"",[6292,6292],"\\",[6373,6374],[6373,6373],[6438,6439],[6438,6438],[6465,6466],[6465,6465],[6486,6487],[6486,6486],[6524,6525],[6524,6524],[6558,6559],[6558,6558],[6627,6628],[6627,6627],[6650,6651],[6650,6650],[6655,6656],[6655,6655],[6693,6694],[6693,6693],[6706,6707],[6706,6706],[6731,6732],[6731,6731],[6740,6741],[6740,6740],[6773,6774],[6773,6773],[6797,6798],[6797,6797],[6901,6902],[6901,6901],[6945,6946],[6945,6945],[6966,6967],[6966,6966],[7008,7009],[7008,7008],[7061,7062],[7061,7061],[7158,7159],[7158,7158],[7243,7244],[7243,7243],[7278,7279],[7278,7278],[7307,7308],[7307,7307],[7313,7314],[7313,7313],[7335,7336],[7335,7335],[7344,7345],[7344,7344],[7418,7419],[7418,7418],[7425,7426],[7425,7425],[7440,7441],[7440,7440],[7464,7465],[7464,7464],[7476,7477],[7476,7476],[7484,7485],[7484,7484],[7534,7535],[7534,7534],[7538,7539],[7538,7538],[7591,7592],[7591,7591],[7597,7598],[7597,7597],[7612,7613],[7612,7612],[7616,7617],[7616,7616],[7638,7639],[7638,7638],[7650,7651],[7650,7650],[7711,7712],[7711,7711],[7769,7770],[7769,7769],[7816,7817],[7816,7816],[7832,7833],[7832,7832]]