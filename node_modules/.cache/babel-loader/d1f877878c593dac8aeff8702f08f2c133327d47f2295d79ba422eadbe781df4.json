{"ast":null,"code":"import '../assets/css/player.css';\nimport { EventEmitter } from \"events\";\nlet libspsfrontend = require(\"backend-dom-components\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\r\n * Class for the base overlay structure \r\n */\nexport class OverlayBase {\n  /**\r\n   * Construct an overlay \r\n   * @param rootDiv the root element this overlay will be inserted into \r\n   * @param rootElement the root element that is the overlay\r\n   */\n  constructor(rootDiv, rootElement, textElement) {\n    this.rootElement = void 0;\n    this.rootDiv = void 0;\n    this.textElement = void 0;\n    this.rootDiv = rootDiv;\n    this.rootElement = rootElement;\n    this.textElement = textElement;\n    this.rootElement.appendChild(this.textElement);\n    this.hide();\n    this.rootDiv.appendChild(this.rootElement);\n  }\n\n  /**\r\n   * Show the overlay \r\n   */\n  show() {\n    this.rootElement.classList.remove(\"hiddenState\");\n  }\n\n  /**\r\n   * Hide the overlay\r\n   */\n  hide() {\n    this.rootElement.classList.add(\"hiddenState\");\n  }\n}\n\n/**\r\n * Class for the base action overlay structure \r\n */\nexport class ActionOverlayBase extends OverlayBase {\n  /**\r\n   * Construct an action overlay \r\n   * @param rootDiv the root element this overlay will be inserted into \r\n   * @param rootElement the root element that is the overlay\r\n   * @param contentElement an element that contains text for the action overlay \r\n   */\n  constructor(rootDiv, rootElement, contentElement, contentElementSpanId) {\n    super(rootDiv, rootElement, contentElement);\n    this.eventEmitter = void 0;\n    this.contentElementSpanId = void 0;\n    this.eventEmitter = new EventEmitter();\n    this.contentElementSpanId = contentElementSpanId;\n  }\n\n  /**\r\n   * Update the text overlays inner text \r\n   * @param text the update text to be inserted into the overlay \r\n   */\n  update(text) {\n    if ((text != null || text != undefined) && (this.contentElementSpanId != null || this.contentElementSpanId != undefined)) {\n      document.getElementById(this.contentElementSpanId).innerHTML = text;\n    }\n  }\n\n  /**\r\n   * Set a method as an event emitter callback \r\n   * @param callBack the method that is to be called when the event is emitted \r\n   */\n  onAction(callBack) {\n    this.eventEmitter.on(\"action\", callBack);\n  }\n\n  /**\r\n   * Activate an event that is attached to the event emitter \r\n   */\n  activate() {\n    this.eventEmitter.emit(\"action\");\n  }\n}\n\n/**\r\n * Class for the afk overlay base \r\n */\nexport class AfkOverlayBase extends ActionOverlayBase {\n  /**\r\n   * Construct an Afk overlay \r\n   * @param rootDiv the root element this overlay will be inserted into \r\n   * @param rootElement the root element that is the overlay\r\n   * @param textElement an element that contains text for the action overlay  \r\n   * @param countDownSpanElementId the id of the span that holds the countdown element \r\n   */\n  constructor(rootDiv, rootElement, textElement, countDownSpanElementId) {\n    super(rootDiv, rootElement, textElement);\n    this.countDownSpanElementId = void 0;\n    this.countDownSpanElementId = countDownSpanElementId;\n  }\n\n  /**\r\n   * Update the count down spans number for the overlay \r\n   * @param countdown the count down number to be inserted into the span for updating\r\n   */\n  updateCountdown(countdown) {\n    document.getElementById(this.countDownSpanElementId).innerHTML = countdown.toString();\n  }\n}\n\n/**\r\n * Class for the text overlay base \r\n */\nexport class TextOverlayBase extends OverlayBase {\n  /**\r\n   * Construct a text overlay \r\n   * @param rootDiv the root element this overlay will be inserted into \r\n   * @param rootElement the root element that is the overlay\r\n   * @param textElement an element that contains text for the action overlay  \r\n   */\n  constructor(rootDiv, rootElement, textElement) {\n    super(rootDiv, rootElement, textElement);\n  }\n\n  /**\r\n   * Update the text overlays inner text \r\n   * @param text the update text to be inserted into the overlay \r\n   */\n  update(text) {\n    if (text != null || text != undefined) {\n      this.textElement.innerHTML = text;\n    }\n  }\n}\n\n/**\r\n * Class for the VideoQp indicator\r\n */\nexport class VideoQpIndicator {\n  /**\r\n   * construct a VideoQpIndicator object\r\n   * @param qualityStatusId the html id of the qualityStatus element\r\n   * @param qualityTextId the html id of the qualityText element\r\n   * @param outerId the html id of the outer element\r\n   * @param middleId the html id of the middle element\r\n   * @param innerId the html id of the inner element\r\n   * @param dotId the html id of the dot element\r\n   */\n  constructor(qualityStatusId, qualityTextId, outerId, middleId, innerId, dotId) {\n    this.videoEncoderAvgQP = -1;\n    // the icon itself\n    this.qualityStatus = void 0;\n    // = document.getElementById(\"connectionStrength\");\n    // the text that displays under the icon\n    this.qualityText = void 0;\n    // = document.getElementById(\"qualityText\");\n    // svg paths\n    this.outer = void 0;\n    //= document.getElementById(\"outer\");\n    this.middle = void 0;\n    //= document.getElementById(\"middle\");\n    this.inner = void 0;\n    // = document.getElementById(\"inner\");\n    this.dot = void 0;\n    // = document.getElementById(\"dot\");\n    // non html elements \n    this.statsText = \"\";\n    this.color = \"\";\n    // qp colours \n    this.orangeQP = 26;\n    this.redQP = 35;\n    this.qualityStatus = document.getElementById(qualityStatusId);\n    this.qualityText = document.getElementById(qualityTextId);\n    this.outer = document.getElementById(outerId);\n    this.middle = document.getElementById(middleId);\n    this.inner = document.getElementById(innerId);\n    this.dot = document.getElementById(dotId);\n  }\n\n  /**\r\n   * used to set the speed of the status light\r\n   * @param speed - Set the speed of the blink if the status light higher the speed the faster the blink\r\n   */\n  blinkVideoQualityStatus(speed) {\n    let iteration = speed;\n    let opacity = 1;\n    let tickID = setInterval(() => {\n      opacity -= 0.1;\n      this.qualityText.style.opacity = String(Math.abs((opacity - 0.5) * 2));\n      if (opacity <= 0.1) {\n        if (--iteration == 0) {\n          clearInterval(tickID);\n        } else {\n          opacity = 1;\n        }\n      }\n    }, 100 / speed);\n  }\n\n  /**\r\n    * updates the QP tooltip by converting the Video Encoder QP to a colour light\r\n    * @param QP - The video encoder QP number needed to find the average\r\n    */\n  updateQpTooltip(QP) {\n    this.videoEncoderAvgQP = QP;\n    if (QP > this.redQP) {\n      this.color = \"red\";\n      this.blinkVideoQualityStatus(2);\n      this.statsText = `<div style=\"color: ${this.color}\">Poor encoding quality</div>`;\n      this.outer.style.fill = \"#3c3b40\";\n      this.middle.style.fill = \"#3c3b40\";\n      this.inner.style.fill = this.color;\n      this.dot.style.fill = this.color;\n    } else if (QP > this.orangeQP) {\n      this.color = \"orange\";\n      this.blinkVideoQualityStatus(1);\n      this.statsText = `<div style=\"color: ${this.color}\">Blocky encoding quality</div>`;\n      this.outer.style.fill = \"#3c3b40\";\n      this.middle.style.fill = this.color;\n      this.inner.style.fill = this.color;\n      this.dot.style.fill = this.color;\n    } else if (QP <= 0) {\n      this.color = \"#b0b0b0\";\n      this.outer.style.fill = \"#3c3b40\";\n      this.middle.style.fill = \"#3c3b40\";\n      this.inner.style.fill = \"#3c3b40\";\n      this.dot.style.fill = \"#3c3b40\";\n      this.statsText = `<div style=\"color: ${this.color}\">Not connected</div>`;\n    } else {\n      this.color = \"lime\";\n      this.qualityStatus.style.opacity = '1';\n      this.statsText = `<div style=\"color: ${this.color}\">Clear encoding quality</div>`;\n      this.outer.style.fill = this.color;\n      this.middle.style.fill = this.color;\n      this.inner.style.fill = this.color;\n      this.dot.style.fill = this.color;\n    }\n    this.qualityText.innerHTML = this.statsText;\n  }\n}\n\n/**\r\n * Class for handling fullscreen logic\r\n */\nexport class FullScreenLogic {\n  /**\r\n   * Construct a FullScreenLogic object\r\n   */\n  constructor() {\n    this.isFullscreen = false;\n    document.getElementById(\"fullscreen-btn\").onclick = () => this.fullscreen();\n\n    // set up the full screen events\n    document.addEventListener('webkitfullscreenchange', () => this.onFullscreenChange(), false);\n    document.addEventListener('mozfullscreenchange', () => this.onFullscreenChange(), false);\n    document.addEventListener('fullscreenchange', () => this.onFullscreenChange(), false);\n    document.addEventListener('MSFullscreenChange', () => this.onFullscreenChange(), false);\n  }\n\n  /**\r\n   * Makes the document fullscreen \r\n   * @returns \r\n   */\n  fullscreen() {\n    // if already full screen; exit\n    // else go fullscreen\n    if (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement) {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n      }\n    } else {\n      let element;\n      //HTML elements controls\n      if (!(document.fullscreenEnabled || document.webkitFullscreenEnabled)) {\n        element = document.getElementById(\"streamingVideo\");\n      } else {\n        element = document.getElementById(\"playerUI\");\n      }\n      if (!element) {\n        return;\n      }\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      } else if (element.webkitEnterFullscreen) {\n        element.webkitEnterFullscreen(); //for iphone this code worked\n      }\n    }\n\n    this.onFullscreenChange();\n  }\n\n  /**\r\n   * Handles the fullscreen button on change\r\n   */\n  onFullscreenChange() {\n    this.isFullscreen = document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement && document.msFullscreenElement !== null || document.fullscreenElement && document.fullscreenElement !== null;\n    let minimize = document.getElementById('minimizeIcon');\n    let maximize = document.getElementById('maximizeIcon');\n    if (minimize && maximize) {\n      if (this.isFullscreen) {\n        minimize.style.display = 'inline';\n        //ios disappearing svg fix\n        minimize.style.transform = 'translate(0, 0)';\n        maximize.style.display = 'none';\n      } else {\n        minimize.style.display = 'none';\n        maximize.style.display = 'inline';\n        //ios disappearing svg fix\n        maximize.style.transform = 'translate(0, 0)';\n      }\n    }\n  }\n}\nexport class NativeDOMDelegate extends libspsfrontend.DelegateBase {\n  constructor(config) {\n    super(config);\n    this.config = void 0;\n    this.latencyStartTime = void 0;\n    this.videoStartTime = void 0;\n    this.mobileUser = void 0;\n    this.streamReady = void 0;\n    this.readyHook = void 0;\n    // instantiate the WebRtcPlayerControllers interface var \n    this.iWebRtcController = void 0;\n    this.showStats = void 0;\n    // HTML Elements that are used multiple times\n    // Global\n    this.videoQpIndicator = void 0;\n    this.fullScreenLogic = void 0;\n    // settings and stats panels\n    this.settingsPanel = document.getElementById('settings-panel');\n    this.statsPanel = document.getElementById('stats-panel');\n    // Pre Stream options\n    this.forceTurnToggle = document.getElementById(\"force-turn-tgl\");\n    // Viewing\n    this.enlargeDisplayToFillWindow = document.getElementById(\"enlarge-display-to-fill-window-tgl\");\n    this.qualityControlOwnershipCheckBox = document.getElementById(\"quality-control-ownership-tgl\");\n    this.toggleMatchViewPortRes = document.getElementById(\"match-viewport-res-tgl\");\n    this.controlSchemeToggle = document.getElementById(\"control-scheme-tgl\");\n    this.controlSchemeToggleTitle = document.getElementById(\"control-scheme-title\");\n    // Commands\n    this.uiDescriptorText = document.getElementById(\"ui-descriptor-text\");\n    // Settings\n    this.encoderMinQpText = document.getElementById(\"encoder-min-qp-text\");\n    this.encoderMaxQpText = document.getElementById(\"encoder-max-qp-text\");\n    this.webRtcFpsText = document.getElementById(\"webrtc-fps-text\");\n    this.webRtcMinBitrateText = document.getElementById(\"webrtc-min-bitrate-text\");\n    this.webRtcMaxBitrateText = document.getElementById(\"webrtc-max-bitrate-text\");\n    // Statistics\n    this.sendStatsToServer = document.getElementById(\"send-stats-tgl\");\n    // Containers Headers\n    this.preStreamContainer = document.getElementById(\"preStreamOptionsHeader\");\n    this.viewSettingsHeader = document.getElementById(\"viewSettingsHeader\");\n    this.commandsHeader = document.getElementById(\"commandsHeader\");\n    this.streamingSettingsHeader = document.getElementById(\"streamingSettingsHeader\");\n    this.statsHeader = document.getElementById(\"statisticsHeader\");\n    this.latencyHeader = document.getElementById(\"latencyTestHeader\");\n    // Containers\n    this.viewSettingsContainer = document.getElementById(\"viewSettingsContainer\");\n    this.commandsContainer = document.getElementById(\"commandsContainer\");\n    this.streamingSettingsContainer = document.getElementById(\"streamingSettingsContainer\");\n    this.statsContainer = document.getElementById(\"statisticsContainer\");\n    this.latencyContainer = document.getElementById(\"latencyTestContainer\");\n    this.appName = void 0;\n    this.config = config;\n    this.showStats = true;\n    this.videoQpIndicator = new VideoQpIndicator(\"connectionStrength\", \"qualityText\", \"outer\", \"middle\", \"inner\", \"dot\");\n    this.fullScreenLogic = new FullScreenLogic();\n    this.streamReady = false;\n\n    // build all of the overlays \n    this.buildDisconnectOverlay();\n    this.buildConnectOverlay();\n    this.buildPlayOverlay();\n    this.buildAfkOverlay();\n    this.buildInfoOverlay();\n    this.buildErrorOverlay();\n\n    // configure all buttons \n    this.ConfigureButtons();\n  }\n  getPlayerController() {\n    return this.iWebRtcController;\n  }\n  updateVideoStreamSize(x, y) {\n    this.iWebRtcController.ueDescriptorUi.sendUpdateVideoStreamSize(x, y);\n  }\n  write(file, message) {\n    const data = {\n      filename: file,\n      data: message\n    };\n    fetch('https://prophet.palatialxr.com:3001/save', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(response => {\n      console.log(`statusCode: ${response.status}`);\n      return response.json();\n    }).then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n  checkStreamReady(readyHook) {\n    if (this.streamReady) {\n      readyHook();\n    } else {\n      this.readyHook = readyHook;\n    }\n  }\n\n  /**\r\n   * Builds the disconnect overlay \r\n   */\n  buildDisconnectOverlay() {\n    // build the overlay base div \n    let disconnectOverlayHtml = document.createElement('div');\n    disconnectOverlayHtml.id = \"disconnectOverlay\";\n    disconnectOverlayHtml.className = \"clickableState\";\n\n    // set the event Listener\n    let disconnectOverlayEvent = () => this.onDisconnectionAction();\n    const self = this;\n\n    // add the new event listener \n    disconnectOverlayHtml.addEventListener('click', function onOverlayClick(event) {\n      disconnectOverlayEvent(event);\n      //whuzz\n    });\n\n    // build the inner html container \n    let disconnectOverlayHtmlInnerContainer = document.createElement('div');\n    disconnectOverlayHtmlInnerContainer.id = 'disconnectButton';\n\n    // build the span that holds error text\n    let disconnectOverlayInnerSpan = document.createElement('span');\n    disconnectOverlayInnerSpan.id = 'disconnectText';\n    disconnectOverlayInnerSpan.innerHTML = 'Click To Restart';\n\n    // build the image element that holds the reconnect element\n    let restartSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    restartSvg.setAttribute('width', \"40\");\n    restartSvg.setAttribute('height', \"40\");\n    restartSvg.setAttribute('fill', \"currentColor\");\n    restartSvg.setAttribute('class', \"bi bi-arrow-counterclockwise m-2\");\n    restartSvg.setAttribute('viewBox', \"0 0 16 16\");\n\n    // build the arrow path \n    let restartSvgPathArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    restartSvgPathArrow.setAttribute('fill-rule', \"evenodd\");\n    restartSvgPathArrow.setAttribute('d', \"M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z\");\n\n    // build the circle path\n    let restartSvgPathCircle = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    restartSvgPathCircle.setAttribute('d', \"M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z\");\n\n    // bring it all together\n    restartSvg.appendChild(restartSvgPathArrow);\n    restartSvg.appendChild(restartSvgPathCircle);\n\n    // append the span and images to the content container \n    disconnectOverlayHtmlInnerContainer.appendChild(disconnectOverlayInnerSpan);\n    disconnectOverlayHtmlInnerContainer.appendChild(restartSvg);\n\n    // instantiate the overlay\n    this.disconnectOverlay = new ActionOverlayBase(this.config.playerElement, disconnectOverlayHtml, disconnectOverlayHtmlInnerContainer, \"disconnectText\");\n  }\n\n  /**\r\n   * Builds the connect overlay \r\n   */\n  buildConnectOverlay() {\n    // build the overlay base div \n    let connectOverlayHtml = document.createElement('div');\n    connectOverlayHtml.id = \"connectOverlay\";\n    connectOverlayHtml.className = \"clickableState\";\n\n    // set the event Listener\n    let connectOverlayEvent = () => this.onConnectAction();\n\n    // add the new event listener \n    connectOverlayHtml.addEventListener('click', function onOverlayClick(event) {\n      connectOverlayEvent(event);\n    });\n\n    // build the inner html \n    let connectOverlayHtmlInner = document.createElement('div');\n    connectOverlayHtmlInner.id = 'connectButton';\n    connectOverlayHtmlInner.innerHTML = 'Click to start';\n\n    // instantiate the overlay\n    this.connectOverlay = new ActionOverlayBase(this.config.playerElement, connectOverlayHtml, connectOverlayHtmlInner);\n  }\n\n  /**\r\n   * Builds the play overlay \r\n   */\n  buildPlayOverlay() {\n    // build the overlay base div \n    let playOverlayHtml = document.createElement('div');\n    //playOverlayHtml.id = \"startText\";\n    //playOverlayHtml.classList.add(\"clickableState\", \"loadingText\");\n\n    // set the event Listener\n    let playOverlayEvent = () => this.onPlayAction();\n\n    // add the new event listener\n    /*playOverlayHtml.addEventListener('click', function onOverlayClick(event: Event) {\r\n            playOverlayEvent(event);\r\n            document.getElementById('container').style.display = 'none';\r\n            document.body.style.cursor = 'none';\r\n            openFullscreen();\r\n    });*/\n\n    // build the inner html \n    let playOverlayHtmlInner = document.createElement('div');\n    //playOverlayHtmlInner.className = \"disconnectText\";\n    //playOverlayHtmlInner.innerHTML = \"Click to start\";\n\n    // instantiate the overlay\n    this.playOverlay = new ActionOverlayBase(this.config.playerElement, playOverlayHtml, playOverlayHtmlInner);\n  }\n  /**\r\n   * Builds the Afk overlay \r\n   */\n  buildAfkOverlay() {\n    // build the overlay base div \n    let afkOverlayHtml = document.createElement('div');\n    afkOverlayHtml.id = \"afkOverlay\";\n    afkOverlayHtml.className = \"clickableState\";\n    let afkOverlayEvent = () => this.onAfkAction();\n    afkOverlayHtml.addEventListener('click', function onOverlayClick(event) {\n      afkOverlayEvent(event);\n    });\n\n    // build the inner html\n    let afkOverlayHtmlInner = document.createElement('div');\n    afkOverlayHtmlInner.id = 'afkOverlayInner';\n    afkOverlayHtmlInner.innerHTML = '<center>No activity detected<br>Disconnecting in <span id=\"afkCountDownNumber\"></span> seconds<br>Click to continue<br></center>';\n\n    // instantiate the overlay\n    this.afkOverlay = new AfkOverlayBase(this.config.playerElement, afkOverlayHtml, afkOverlayHtmlInner, \"afkCountDownNumber\");\n  }\n\n  /**\r\n   * Builds the info overlay \r\n   */\n  buildInfoOverlay() {\n    // build the overlay base div \n    let infoOverlayHtml = document.createElement('div');\n    infoOverlayHtml.id = \"infoOverlay\";\n    infoOverlayHtml.className = \"textDisplayState\";\n\n    // build the inner html\n    let infoOverlayHtmlInner = document.createElement('div');\n    infoOverlayHtmlInner.id = 'messageOverlayInner';\n\n    // instantiate the overlay\n    this.infoOverlay = new TextOverlayBase(this.config.playerElement, infoOverlayHtml, infoOverlayHtmlInner);\n  }\n\n  /**\r\n   * Builds the error overlay \r\n   */\n  buildErrorOverlay() {\n    // build the overlay base div \n    let errorOverlayHtml = document.createElement('div');\n    errorOverlayHtml.id = \"errorOverlay\";\n    errorOverlayHtml.className = \"textDisplayState\";\n\n    // build the inner html\n    let errorOverlayHtmlInner = document.createElement('div');\n    errorOverlayHtmlInner.id = 'errorOverlayInner';\n    errorOverlayHtmlInner.classList.add(\".text-danger\");\n\n    // instantiate the overlay\n    this.errorOverlay = new TextOverlayBase(this.config.playerElement, errorOverlayHtml, errorOverlayHtmlInner);\n  }\n\n  /**\r\n   * Shows a text overlay to alert the user the stream is currently loading\r\n   */\n  onStreamLoading() {\n    // build the spinner span\n    var spinnerSpan = document.createElement('span');\n    spinnerSpan.className = \"visually-hidden\";\n    spinnerSpan.innerHTML = \"Loading\";\n\n    // build the spinner div\n    var spinnerDiv = document.createElement('div');\n    spinnerDiv.id = \"loading-spinner\";\n    spinnerDiv.className = \"spinner-border ms-2\";\n    spinnerDiv.setAttribute(\"role\", \"status\");\n\n    // append the spinner to the element\n    spinnerDiv.appendChild(spinnerSpan);\n    this.showTextOverlay(\"Loading Stream \" + spinnerDiv.outerHTML);\n  }\n  zoomIn() {\n    const scaleFactor = 1.2;\n    const currentScale = parseFloat(document.body.style.transform.replace('scale(', '').replace(')', ''));\n    const newScale = currentScale ? currentScale * scaleFactor : scaleFactor;\n    document.body.style.transform = `scale(${newScale})`;\n  }\n\n  /**\r\n  * Set up functionality to happen when an instance state change occurs and updates the info overlay with the response\r\n  * @param instanceState - the message instance state \r\n  */\n  onInstanceStateChange(instanceState) {\n    let instanceStateMessage = \"\";\n    let isInstancePending = false;\n    let isError = false;\n\n    // get the response type\n    switch (instanceState.state) {\n      case libspsfrontend.InstanceState.UNALLOCATED:\n        instanceStateMessage = \"Instance Unallocated: \" + instanceState.details;\n        break;\n      case libspsfrontend.InstanceState.FAILED:\n        instanceStateMessage = \"UE Instance Failed: \" + instanceState.details;\n        isError = true;\n        break;\n      case libspsfrontend.InstanceState.PENDING:\n        isInstancePending = true;\n        if (instanceState.details == undefined || instanceState.details == null) {\n          instanceStateMessage = \"Your application is pending\";\n        } else {\n          instanceStateMessage = instanceState.details;\n        }\n        break;\n      case libspsfrontend.InstanceState.READY:\n        if (instanceState.details == undefined || instanceState.details == null) {\n          instanceStateMessage = \"Instance is Ready\";\n        } else {\n          instanceStateMessage = \"Instance is Ready: \" + instanceState.details;\n        }\n        break;\n      default:\n        instanceStateMessage = \"Unhandled Instance State\" + instanceState.state + \" \" + instanceState.details;\n        break;\n    }\n    if (isError) {\n      this.showErrorOverlay(instanceStateMessage);\n    } else if (isInstancePending) {\n      //check if there is already and instance pending if so return \n      let preExistingPendingMessage = document.getElementById('loading-spinner');\n      if (preExistingPendingMessage) {\n        // only update our text div\n        let textDiv = document.getElementById(\"text-\" + instanceState.id);\n        textDiv.innerHTML = instanceStateMessage;\n        return;\n      }\n\n      // build a wrapper to hold our text and our spinner\n      var wrapperDiv = document.createElement('div');\n\n      // build a text div to hold our text message\n      var textSpan = document.createElement('span');\n      textSpan.id = \"text-\" + instanceState.id;\n      textSpan.innerHTML = instanceStateMessage;\n\n      // build the spinner span\n      var spinnerSpan = document.createElement('span');\n      spinnerSpan.className = \"visually-hidden\";\n      spinnerSpan.innerHTML = \"Loading...\";\n\n      // build the spinner div\n      var spinnerDiv = document.createElement('div');\n      spinnerDiv.id = \"loading-spinner\";\n      spinnerDiv.className = \"spinner-border ms-2\";\n      spinnerDiv.setAttribute(\"role\", \"status\");\n\n      // append wrapper and the spinner to the element\n      wrapperDiv.appendChild(textSpan);\n      wrapperDiv.appendChild(spinnerDiv).appendChild(spinnerSpan);\n\n      // insert the inner html into the base div\n      this.showTextOverlay(wrapperDiv.outerHTML);\n    } else {}\n    function openFullscreen() {\n      let body = document.documentElement;\n      if (body.requestFullscreen) {\n        body.requestFullscreen();\n      } else if (body.webkitRequestFullscreen) {\n        /* Safari */\n        body.webkitRequestFullscreen();\n      } else if (body.msRequestFullscreen) {\n        /* IE11 */\n        body.msRequestFullscreen();\n      }\n    }\n  }\n\n  /**\r\n   * Set up functionality to happen when receiving an auth response and updates an info overlay with the response\r\n   * @param authResponse - the auth response message type\r\n   */\n  onAuthenticationResponse(authResponse) {\n    let instanceStateMessage = \"\";\n    let isError = false;\n\n    // get the response type\n    switch (authResponse.outcome) {\n      case libspsfrontend.MessageAuthResponseOutcomeType.AUTHENTICATED:\n        instanceStateMessage = \"Authentication has succeeded. Requesting Instance\";\n        break;\n      case libspsfrontend.MessageAuthResponseOutcomeType.INVALID_TOKEN:\n        instanceStateMessage = \"Invalid Token: \" + authResponse.error;\n        isError = true;\n        break;\n      case libspsfrontend.MessageAuthResponseOutcomeType.REDIRECT:\n        instanceStateMessage = \"Redirecting to: \" + authResponse.redirect;\n        break;\n      case libspsfrontend.MessageAuthResponseOutcomeType.ERROR:\n        instanceStateMessage = \"Error: \" + authResponse.error;\n        isError = true;\n        break;\n      default:\n        instanceStateMessage = \"Unhandled Auth Response: \" + authResponse.outcome;\n        break;\n    }\n\n    // if the response is an error show the error instead of the info \n    if (isError) {\n      this.showErrorOverlay(instanceStateMessage);\n    } else {\n      this.showTextOverlay(instanceStateMessage);\n    }\n  }\n\n  /**\r\n   * Set up button click functions and button functionality  \r\n   */\n  ConfigureButtons() {\n    // set up the settings \n    document.getElementById('settingsBtn').onclick = () => this.settingsClicked();\n    document.getElementById('settingsClose').onclick = () => this.settingsClicked();\n\n    // setup the info button\n    document.getElementById('statsBtn').onclick = () => this.statsClicked();\n    document.getElementById('statsClose').onclick = () => this.statsClicked();\n\n    // setup the Force TURN toggle\n    this.setUpToggleWithUrlParams(this.forceTurnToggle, \"ForceTURN\");\n    this.setUpControlSchemeTypeToggle(this.controlSchemeToggle);\n\n    // set up the restart stream button\n    document.getElementById(\"restart-stream-button\").onclick = () => {\n      this.settingsPanel.classList.toggle(\"panel-wrap-visible\");\n      this.iWebRtcController.restartStreamAutomaticity();\n    };\n    document.getElementById(\"btn-streaming-settings\").onclick = () => {\n      libspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), \"--------  Sending Streaming settings  --------\", 7);\n      let encode = {\n        MinQP: Number(this.encoderMinQpText.value),\n        MaxQP: Number(this.encoderMaxQpText.value)\n      };\n      let webRtcSettings = {\n        FPS: Number(this.webRtcFpsText.value),\n        MinBitrate: Number(this.webRtcMinBitrateText.value) * 1000,\n        MaxBitrate: Number(this.webRtcMaxBitrateText.value) * 1000\n      };\n      this.iWebRtcController.sendEncoderSettings(encode);\n      this.iWebRtcController.sendWebRtcSettings(webRtcSettings);\n      libspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), \"-------------------------------------------\", 7);\n    };\n\n    // sending UI descriptors \n    document.getElementById(\"sendUiDescriptor\").onclick = () => {\n      this.iWebRtcController.sendUeUiDescriptor(this.uiDescriptorText.value);\n    };\n\n    // show the current fps on screen \n    document.getElementById(\"show-fps-button\").onclick = () => {\n      this.iWebRtcController.sendShowFps();\n    };\n\n    // make the player fill the window\n    this.enlargeDisplayToFillWindow.onchange = () => {\n      this.iWebRtcController.resizePlayerStyle();\n      this.iWebRtcController.setEnlargeToFillDisplay(this.enlargeDisplayToFillWindow.checked);\n    };\n\n    // make the player match the view port resolution \n    this.toggleMatchViewPortRes.onchange = () => {\n      this.iWebRtcController.matchViewportResolution = this.toggleMatchViewPortRes.checked;\n      this.iWebRtcController.updateVideoStreamSize();\n    };\n\n    // quality control ownership checkbox \n    this.qualityControlOwnershipCheckBox.onchange = () => {\n      if (this.qualityControlOwnershipCheckBox.checked === false) {\n        this.iWebRtcController.sendRequestQualityControlOwnership();\n      }\n    };\n  }\n\n  /**\r\n   * Shows or hides the settings panel if clicked\r\n   */\n  settingsClicked() {\n    /**\r\n     * Toggle settings panel. If stats panel is already open, close it and then open settings\r\n     */\n    if (this.statsPanel.classList.contains(\"panel-wrap-visible\")) {\n      this.statsPanel.classList.toggle(\"panel-wrap-visible\");\n    }\n    this.settingsPanel.classList.toggle(\"panel-wrap-visible\");\n  }\n\n  /**\r\n   * Shows or hides the stats panel if clicked\r\n   */\n  statsClicked() {\n    /**\r\n     * Toggle stats panel. If settings panel is already open, close it and then open stats\r\n     */\n    if (this.settingsPanel.classList.contains(\"panel-wrap-visible\")) {\n      this.settingsPanel.classList.toggle(\"panel-wrap-visible\");\n    }\n    this.statsPanel.classList.toggle(\"panel-wrap-visible\");\n  }\n\n  /**\r\n   * Set up toggle element for controlling hovering mouse or locked mouse  \r\n   * @param toggleElement the toggle html element to be set up\r\n   */\n  setUpControlSchemeTypeToggle(toggleElement) {\n    if (toggleElement) {\n      // set the state for the toggle based on the config\n      if (this.config.controlScheme === libspsfrontend.ControlSchemeType.LockedMouse) {\n        this.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Locked Mouse\";\n        this.controlSchemeToggle.checked = false;\n      } else {\n        this.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Hovering Mouse\";\n        this.controlSchemeToggle.checked = true;\n      }\n\n      // set the onChange event \n      toggleElement.onchange = () => {\n        if (toggleElement.checked === true) {\n          this.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Hovering Mouse\";\n          this.config.controlScheme = libspsfrontend.ControlSchemeType.HoveringMouse;\n          this.iWebRtcController.activateRegisterMouse();\n        } else {\n          this.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Locked Mouse\";\n          this.config.controlScheme = libspsfrontend.ControlSchemeType.LockedMouse;\n          this.iWebRtcController.activateRegisterMouse();\n        }\n      };\n    }\n  }\n\n  /**\r\n   * Set up url toggle buttons\r\n   * @param toggleElement the toggle element being activated  \r\n   * @param urlParameterKey the url key that is being made use of\r\n   */\n  setUpToggleWithUrlParams(toggleElement, urlParameterKey) {\n    if (toggleElement) {\n      //Check if the element has been set from the URL Params \n      toggleElement.checked = new URLSearchParams(window.location.search).has(urlParameterKey);\n      toggleElement.onchange = () => {\n        const urlParams = new URLSearchParams(window.location.search);\n        if (toggleElement.checked === true) {\n          urlParams.set(urlParameterKey, \"true\");\n        } else {\n          urlParams.delete(urlParameterKey);\n        }\n        window.history.replaceState({}, '', urlParams.toString() !== \"\" ? `${window.location.pathname}?${urlParams}` : `${window.location.pathname}`);\n      };\n    }\n  }\n\n  /**\r\n   * Disable shared session links for all players\r\n   * @returns false\r\n   */\n  async IsLinkSharingEnabled() {\n    return false;\n  }\n\n  /**\r\n   * Handle when the Video has been Initialised\r\n   */\n  onVideoInitialised() {\n    console.log('ready!');\n    this.streamReady = true;\n    // starting a latency check\n    document.getElementById(\"btn-start-latency-test\").onclick = () => {\n      this.iWebRtcController.sendLatencyTest();\n    };\n\n    // Set up stream tools header functionality\n    this.viewSettingsHeader.onclick = () => {\n      this.viewSettingsContainer.classList.contains(\"d-none\") ? this.viewSettingsContainer.classList.remove(\"d-none\") : this.viewSettingsContainer.classList.add(\"d-none\");\n    };\n    this.commandsHeader.onclick = () => {\n      this.commandsContainer.classList.contains(\"d-none\") ? this.commandsContainer.classList.remove(\"d-none\") : this.commandsContainer.classList.add(\"d-none\");\n    };\n    this.streamingSettingsHeader.onclick = () => {\n      this.streamingSettingsContainer.classList.contains(\"d-none\") ? this.streamingSettingsContainer.classList.remove(\"d-none\") : this.streamingSettingsContainer.classList.add(\"d-none\");\n    };\n    this.statsHeader.onclick = () => {\n      this.statsContainer.classList.contains(\"d-none\") ? this.statsContainer.classList.remove(\"d-none\") : this.statsContainer.classList.add(\"d-none\");\n    };\n    this.latencyHeader.onclick = () => {\n      this.latencyContainer.classList.contains(\"d-none\") ? this.latencyContainer.classList.remove(\"d-none\") : this.latencyContainer.classList.add(\"d-none\");\n    };\n\n    // Reveal all the container\n    this.viewSettingsContainer.classList.remove(\"d-none\");\n    this.commandsContainer.classList.remove(\"d-none\");\n    this.streamingSettingsContainer.classList.remove(\"d-none\");\n    this.statsContainer.classList.remove(\"d-none\");\n    this.videoStartTime = Date.now();\n  }\n\n  /**\r\n   * Extended from the base functionality; displays the error overlay and resets the buttons stream tools upon disconnect \r\n   * @param eventText \r\n   */\n  onDisconnect(eventText) {\n    // display the text overlay by calling its super method so it will use its default behavior first \n    super.onDisconnect(`${eventText}`);\n\n    // update all of the tools upon disconnect \n    this.onVideoEncoderAvgQP(0);\n\n    // starting a latency check\n    document.getElementById(\"btn-start-latency-test\").onclick = () => {};\n\n    // Set up stream tools header functionality\n    this.viewSettingsHeader.onclick = () => {};\n    this.commandsHeader.onclick = () => {};\n    this.streamingSettingsHeader.onclick = () => {};\n    this.statsHeader.onclick = () => {};\n    this.latencyHeader.onclick = () => {};\n\n    // Hide all the containers\n    this.viewSettingsContainer.classList.add(\"d-none\");\n    this.commandsContainer.classList.add(\"d-none\");\n    this.streamingSettingsContainer.classList.add(\"d-none\");\n    this.statsContainer.classList.add(\"d-none\");\n  }\n  /**\r\n   * `Takes the InitialSettings and wired to frontend\r\n   * @param settings - Settings sent from the UE Instance`\r\n   */\n  onInitialSettings(settings) {\n    if (settings.Encoder) {\n      this.encoderMinQpText.value = settings.Encoder.MinQP.toString();\n      this.encoderMaxQpText.value = settings.Encoder.MaxQP.toString();\n    }\n    if (settings.WebRTC) {\n      this.webRtcMinBitrateText.value = settings.WebRTC.MinBitrate.toString();\n      this.webRtcMaxBitrateText.value = settings.WebRTC.MaxBitrate.toString();\n      this.webRtcFpsText.value = settings.WebRTC.FPS.toString();\n    }\n  }\n\n  /**\r\n  * Used to handle the Video Stats from the Peer Connection Client\r\n  * @param stats - Stats generate from the Peer Connection Client\r\n  */\n  onVideoStats(stats) {\n    let runTime = new Date(Date.now() - this.videoStartTime).toISOString().substr(11, 8);\n    let statsText = \"\";\n    let inboundData = this.formatBytes(stats.inboundVideoStats.bytesReceived, 2);\n\n    // format numbering based on the browser language\n    let numberFormat = new Intl.NumberFormat(window.navigator.language, {\n      maximumFractionDigits: 0\n    });\n\n    // ensure that we have a currentRoundTripTime coming in from stats and format it if it's a number\n    let netRTT = stats.candidatePair.hasOwnProperty('currentRoundTripTime') && stats.isNumber(stats.candidatePair.currentRoundTripTime) ? numberFormat.format(stats.candidatePair.currentRoundTripTime * 1000) : 'Can\\'t calculate';\n    statsText += `<div>Duration: ${runTime}</div>`;\n    statsText += `<div>Received: ${inboundData}</div>`;\n    statsText += `<div>Packets Lost: ${stats.inboundVideoStats.packetsLost}</div>`;\n    statsText += `<div>Bitrate (kbps): ${stats.inboundVideoStats.bitrate}</div>`;\n    statsText += `<div>Video Resolution: ${stats.inboundVideoStats.hasOwnProperty('frameWidth') && stats.inboundVideoStats.frameWidth && stats.inboundVideoStats.hasOwnProperty('frameHeight') && stats.inboundVideoStats.frameHeight ? stats.inboundVideoStats.frameWidth + 'x' + stats.inboundVideoStats.frameHeight : 'Chrome only'}</div>`;\n    statsText += `<div>Frames Decoded: ${stats.inboundVideoStats.hasOwnProperty('framesDecoded') ? numberFormat.format(stats.inboundVideoStats.framesDecoded) : 'Chrome only'}</div>`;\n    statsText += `<div>Packets Lost: ${stats.inboundVideoStats.hasOwnProperty('packetsLost') ? numberFormat.format(stats.inboundVideoStats.packetsLost) : 'Chrome only'}</div>`;\n    statsText += `<div>Framerate: ${stats.inboundVideoStats.framerate}</div>`;\n    statsText += `<div>Frames dropped: ${stats.inboundVideoStats.framesDropped}</div>`;\n    statsText += `<div>Net RTT (ms): ${netRTT}</div>`;\n    //statsText += `<div>Browser receive to composite (ms): ${stats.inboundVideoStats.receiveToCompositeMs}</div>`;\n    statsText += `<div>Video Quantization Parameter: ${this.videoQpIndicator.videoEncoderAvgQP}</div>`;\n    let statsDiv = document.getElementById(\"statisticsResult\");\n    statsDiv.innerHTML = statsText;\n    libspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), `--------- Stats ---------\\n ${stats}\\n------------------------`, 6);\n    if (this.sendStatsToServer.checked === true) {\n      this.iWebRtcController.sendStatsToSignallingServer(stats);\n    }\n  }\n\n  /**\r\n  * formats Bytes coming in for video stats\r\n  * @param bytes number to convert\r\n  * @param decimals number of decimal places\r\n  */\n  formatBytes(bytes, decimals) {\n    if (bytes === 0) {\n      return \"0\";\n    }\n    const factor = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(factor));\n    return parseFloat((bytes / Math.pow(factor, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n\n  /**\r\n  * Handles the result of the UE Latency Test\r\n  * @param latencyTimings - Latency Test Timings sent from the UE Instance \r\n  */\n  onLatencyTestResult(latencyTimings) {\n    libspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), latencyTimings.toString(), 6);\n    let latencyStatsInnerHTML = '';\n    latencyStatsInnerHTML += \"<div>Net latency RTT (ms): \" + latencyTimings.networkLatency + \"</div>\";\n    latencyStatsInnerHTML += \"<div>UE Encode (ms): \" + latencyTimings.EncodeMs + \"</div>\";\n    latencyStatsInnerHTML += \"<div>UE Capture (ms): \" + latencyTimings.CaptureToSendMs + \"</div>\";\n    latencyStatsInnerHTML += \"<div>Browser send latency (ms): \" + latencyTimings.browserSendLatency + \"</div>\";\n    latencyStatsInnerHTML += latencyTimings.frameDisplayDeltaTimeMs && latencyTimings.browserReceiptTimeMs ? \"<div>Browser receive latency (ms): \" + latencyTimings.frameDisplayDeltaTimeMs + \"</div>\" : \"\";\n    latencyStatsInnerHTML += \"<div>Total latency (excluding browser) (ms): \" + latencyTimings.latencyExcludingDecode + \"</div>\";\n    latencyStatsInnerHTML += latencyTimings.endToEndLatency ? \"<div>Total latency (ms): \" + latencyTimings.endToEndLatency + \"</div>\" : \"\";\n    this.latencyContainer.classList.remove(\"d-none\");\n    document.getElementById(\"latencyStatsResults\").innerHTML = latencyStatsInnerHTML;\n  }\n\n  /**\r\n   * Handles when the ownership flag is sent from the signaling server\r\n   * @param hasQualityOwnership - flag if the user has quality ownership\r\n   */\n  onQualityControlOwnership(hasQualityOwnership) {\n    this.qualityControlOwnershipCheckBox.checked = hasQualityOwnership;\n  }\n\n  /**\r\n    * Calls updateQpTooltip to update the QP colour light\r\n    * @param QP - The video encoder QP number needed to find the average\r\n    */\n  onVideoEncoderAvgQP(QP) {\n    this.videoQpIndicator.updateQpTooltip(QP);\n  }\n}\n\n/**\r\n * Declare additions to global html objects that do not exist on the bases\r\n */","map":{"version":3,"names":["EventEmitter","libspsfrontend","require","Object","defineProperty","exports","value","OverlayBase","constructor","rootDiv","rootElement","textElement","appendChild","hide","show","classList","remove","add","ActionOverlayBase","contentElement","contentElementSpanId","eventEmitter","update","text","undefined","document","getElementById","innerHTML","onAction","callBack","on","activate","emit","AfkOverlayBase","countDownSpanElementId","updateCountdown","countdown","toString","TextOverlayBase","VideoQpIndicator","qualityStatusId","qualityTextId","outerId","middleId","innerId","dotId","videoEncoderAvgQP","qualityStatus","qualityText","outer","middle","inner","dot","statsText","color","orangeQP","redQP","blinkVideoQualityStatus","speed","iteration","opacity","tickID","setInterval","style","String","Math","abs","clearInterval","updateQpTooltip","QP","fill","FullScreenLogic","isFullscreen","onclick","fullscreen","addEventListener","onFullscreenChange","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","element","fullscreenEnabled","webkitFullscreenEnabled","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","Element","ALLOW_KEYBOARD_INPUT","msRequestFullscreen","webkitEnterFullscreen","webkitIsFullScreen","mozFullScreen","minimize","maximize","display","transform","NativeDOMDelegate","DelegateBase","config","latencyStartTime","videoStartTime","mobileUser","streamReady","readyHook","iWebRtcController","showStats","videoQpIndicator","fullScreenLogic","settingsPanel","statsPanel","forceTurnToggle","enlargeDisplayToFillWindow","qualityControlOwnershipCheckBox","toggleMatchViewPortRes","controlSchemeToggle","controlSchemeToggleTitle","uiDescriptorText","encoderMinQpText","encoderMaxQpText","webRtcFpsText","webRtcMinBitrateText","webRtcMaxBitrateText","sendStatsToServer","preStreamContainer","viewSettingsHeader","commandsHeader","streamingSettingsHeader","statsHeader","latencyHeader","viewSettingsContainer","commandsContainer","streamingSettingsContainer","statsContainer","latencyContainer","appName","buildDisconnectOverlay","buildConnectOverlay","buildPlayOverlay","buildAfkOverlay","buildInfoOverlay","buildErrorOverlay","ConfigureButtons","getPlayerController","updateVideoStreamSize","x","y","ueDescriptorUi","sendUpdateVideoStreamSize","write","file","message","data","filename","fetch","method","headers","body","JSON","stringify","then","response","console","log","status","json","catch","error","checkStreamReady","disconnectOverlayHtml","createElement","id","className","disconnectOverlayEvent","onDisconnectionAction","self","onOverlayClick","event","disconnectOverlayHtmlInnerContainer","disconnectOverlayInnerSpan","restartSvg","createElementNS","setAttribute","restartSvgPathArrow","restartSvgPathCircle","disconnectOverlay","playerElement","connectOverlayHtml","connectOverlayEvent","onConnectAction","connectOverlayHtmlInner","connectOverlay","playOverlayHtml","playOverlayEvent","onPlayAction","playOverlayHtmlInner","playOverlay","afkOverlayHtml","afkOverlayEvent","onAfkAction","afkOverlayHtmlInner","afkOverlay","infoOverlayHtml","infoOverlayHtmlInner","infoOverlay","errorOverlayHtml","errorOverlayHtmlInner","errorOverlay","onStreamLoading","spinnerSpan","spinnerDiv","showTextOverlay","outerHTML","zoomIn","scaleFactor","currentScale","parseFloat","replace","newScale","onInstanceStateChange","instanceState","instanceStateMessage","isInstancePending","isError","state","InstanceState","UNALLOCATED","details","FAILED","PENDING","READY","showErrorOverlay","preExistingPendingMessage","textDiv","wrapperDiv","textSpan","openFullscreen","documentElement","onAuthenticationResponse","authResponse","outcome","MessageAuthResponseOutcomeType","AUTHENTICATED","INVALID_TOKEN","REDIRECT","redirect","ERROR","settingsClicked","statsClicked","setUpToggleWithUrlParams","setUpControlSchemeTypeToggle","toggle","restartStreamAutomaticity","Logger","Log","GetStackTrace","encode","MinQP","Number","MaxQP","webRtcSettings","FPS","MinBitrate","MaxBitrate","sendEncoderSettings","sendWebRtcSettings","sendUeUiDescriptor","sendShowFps","onchange","resizePlayerStyle","setEnlargeToFillDisplay","checked","matchViewportResolution","sendRequestQualityControlOwnership","contains","toggleElement","controlScheme","ControlSchemeType","LockedMouse","HoveringMouse","activateRegisterMouse","urlParameterKey","URLSearchParams","window","location","search","has","urlParams","set","delete","history","replaceState","pathname","IsLinkSharingEnabled","onVideoInitialised","sendLatencyTest","Date","now","onDisconnect","eventText","onVideoEncoderAvgQP","onInitialSettings","settings","Encoder","WebRTC","onVideoStats","stats","runTime","toISOString","substr","inboundData","formatBytes","inboundVideoStats","bytesReceived","numberFormat","Intl","NumberFormat","navigator","language","maximumFractionDigits","netRTT","candidatePair","hasOwnProperty","isNumber","currentRoundTripTime","format","packetsLost","bitrate","frameWidth","frameHeight","framesDecoded","framerate","framesDropped","statsDiv","sendStatsToSignallingServer","bytes","decimals","factor","dm","sizes","i","floor","pow","toFixed","onLatencyTestResult","latencyTimings","latencyStatsInnerHTML","networkLatency","EncodeMs","CaptureToSendMs","browserSendLatency","frameDisplayDeltaTimeMs","browserReceiptTimeMs","latencyExcludingDecode","endToEndLatency","onQualityControlOwnership","hasQualityOwnership"],"sources":["C:/Users/employee/Palatial-Web-Loading/src/components/NativeDOMDelegate.ts"],"sourcesContent":["import '../assets/css/player.css';\r\nimport { EventEmitter } from \"events\";\r\n\r\nlet libspsfrontend = require(\"backend-dom-components\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\r\ndeclare var WEBSOCKET_URL: string;\r\n\r\n/**\r\n * Class for the base overlay structure \r\n */\r\nexport class OverlayBase implements libspsfrontend.IOverlay {\r\n\tprotected rootElement: HTMLDivElement;\r\n\tprotected rootDiv: HTMLDivElement;\r\n\tpublic textElement: HTMLDivElement;\r\n\r\n\t/**\r\n\t * Construct an overlay \r\n\t * @param rootDiv the root element this overlay will be inserted into \r\n\t * @param rootElement the root element that is the overlay\r\n\t */\r\n\tprotected constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, textElement: HTMLDivElement) {\r\n\t\tthis.rootDiv = rootDiv;\r\n\t\tthis.rootElement = rootElement;\r\n\t\tthis.textElement = textElement;\r\n\t\tthis.rootElement.appendChild(this.textElement);\r\n\t\tthis.hide();\r\n\t\tthis.rootDiv.appendChild(this.rootElement);\r\n\t}\r\n\r\n\t/**\r\n\t * Show the overlay \r\n\t */\r\n\tpublic show(): void {\r\n\t\tthis.rootElement.classList.remove(\"hiddenState\");\r\n\t}\r\n\r\n\t/**\r\n\t * Hide the overlay\r\n\t */\r\n\tpublic hide(): void {\r\n\t\tthis.rootElement.classList.add(\"hiddenState\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Class for the base action overlay structure \r\n */\r\nexport class ActionOverlayBase extends OverlayBase implements libspsfrontend.IActionOverlay {\r\n\teventEmitter: EventEmitter;\r\n\tcontentElementSpanId: string;\r\n\r\n\t/**\r\n\t * Construct an action overlay \r\n\t * @param rootDiv the root element this overlay will be inserted into \r\n\t * @param rootElement the root element that is the overlay\r\n\t * @param contentElement an element that contains text for the action overlay \r\n\t */\r\n\tpublic constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, contentElement: HTMLDivElement, contentElementSpanId?: string) {\r\n\t\tsuper(rootDiv, rootElement, contentElement);\r\n\t\tthis.eventEmitter = new EventEmitter();\r\n\t\tthis.contentElementSpanId = contentElementSpanId;\r\n\t}\r\n\r\n\t/**\r\n\t * Update the text overlays inner text \r\n\t * @param text the update text to be inserted into the overlay \r\n\t */\r\n\tpublic update(text: string): void {\r\n\t\tif ((text != null || text != undefined) && (this.contentElementSpanId != null || this.contentElementSpanId != undefined)) {\r\n\t\t\tdocument.getElementById(this.contentElementSpanId).innerHTML = text;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set a method as an event emitter callback \r\n\t * @param callBack the method that is to be called when the event is emitted \r\n\t */\r\n\tonAction(callBack: (...args: any[]) => void) {\r\n\t\tthis.eventEmitter.on(\"action\", callBack);\r\n\t}\r\n\r\n\t/**\r\n\t * Activate an event that is attached to the event emitter \r\n\t */\r\n\tactivate() {\r\n\t\tthis.eventEmitter.emit(\"action\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Class for the afk overlay base \r\n */\r\nexport class AfkOverlayBase extends ActionOverlayBase implements libspsfrontend.IAfkOverlay {\r\n\tprivate countDownSpanElementId: string;\r\n\r\n\t/**\r\n\t * Construct an Afk overlay \r\n\t * @param rootDiv the root element this overlay will be inserted into \r\n\t * @param rootElement the root element that is the overlay\r\n\t * @param textElement an element that contains text for the action overlay  \r\n\t * @param countDownSpanElementId the id of the span that holds the countdown element \r\n\t */\r\n\tpublic constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, textElement: HTMLDivElement, countDownSpanElementId: string) {\r\n\t\tsuper(rootDiv, rootElement, textElement);\r\n\t\tthis.countDownSpanElementId = countDownSpanElementId;\r\n\t}\r\n\r\n\t/**\r\n\t * Update the count down spans number for the overlay \r\n\t * @param countdown the count down number to be inserted into the span for updating\r\n\t */\r\n\tpublic updateCountdown(countdown: number): void {\r\n\t\tdocument.getElementById(this.countDownSpanElementId).innerHTML = countdown.toString();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Class for the text overlay base \r\n */\r\nexport class TextOverlayBase extends OverlayBase implements libspsfrontend.ITextOverlay {\r\n\r\n\t/**\r\n\t * Construct a text overlay \r\n\t * @param rootDiv the root element this overlay will be inserted into \r\n\t * @param rootElement the root element that is the overlay\r\n\t * @param textElement an element that contains text for the action overlay  \r\n\t */\r\n\tpublic constructor(rootDiv: HTMLDivElement, rootElement: HTMLDivElement, textElement: HTMLDivElement) {\r\n\t\tsuper(rootDiv, rootElement, textElement);\r\n\t}\r\n\r\n\t/**\r\n\t * Update the text overlays inner text \r\n\t * @param text the update text to be inserted into the overlay \r\n\t */\r\n\tpublic update(text: string): void {\r\n\t\tif (text != null || text != undefined) {\r\n\t\t\tthis.textElement.innerHTML = text;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Class for the VideoQp indicator\r\n */\r\nexport class VideoQpIndicator {\r\n\r\n\tvideoEncoderAvgQP: number = -1;\r\n\r\n\t// the icon itself\r\n\tqualityStatus: SVGElement; // = document.getElementById(\"connectionStrength\");\r\n\r\n\t// the text that displays under the icon\r\n\tqualityText: HTMLSpanElement; // = document.getElementById(\"qualityText\");\r\n\r\n\t// svg paths\r\n\touter: any; //= document.getElementById(\"outer\");\r\n\tmiddle: any; //= document.getElementById(\"middle\");\r\n\tinner: any; // = document.getElementById(\"inner\");\r\n\tdot: any; // = document.getElementById(\"dot\");\r\n\r\n\t// non html elements \r\n\tstatsText: string = \"\";\r\n\tcolor: string = \"\";\r\n\r\n\t// qp colours \r\n\treadonly orangeQP = 26;\r\n\treadonly redQP = 35;\r\n\r\n\t/**\r\n\t * construct a VideoQpIndicator object\r\n\t * @param qualityStatusId the html id of the qualityStatus element\r\n\t * @param qualityTextId the html id of the qualityText element\r\n\t * @param outerId the html id of the outer element\r\n\t * @param middleId the html id of the middle element\r\n\t * @param innerId the html id of the inner element\r\n\t * @param dotId the html id of the dot element\r\n\t */\r\n\tconstructor(qualityStatusId: string, qualityTextId: string, outerId: string, middleId: string, innerId: string, dotId: string) {\r\n\t\tthis.qualityStatus = document.getElementById(qualityStatusId) as any;\r\n\t\tthis.qualityText = document.getElementById(qualityTextId) as any;\r\n\t\tthis.outer = document.getElementById(outerId) as any;\r\n\t\tthis.middle = document.getElementById(middleId) as any;\r\n\t\tthis.inner = document.getElementById(innerId) as any;\r\n\t\tthis.dot = document.getElementById(dotId) as any;\r\n\t}\r\n\r\n\t/**\r\n\t * used to set the speed of the status light\r\n\t * @param speed - Set the speed of the blink if the status light higher the speed the faster the blink\r\n\t */\r\n\tblinkVideoQualityStatus(speed: number) {\r\n\t\tlet iteration = speed;\r\n\t\tlet opacity = 1;\r\n\t\tlet tickID = setInterval(() => {\r\n\t\t\topacity -= 0.1;\r\n\t\t\tthis.qualityText.style.opacity = String(Math.abs((opacity - 0.5) * 2));\r\n\t\t\tif (opacity <= 0.1) {\r\n\t\t\t\tif (--iteration == 0) {\r\n\t\t\t\t\tclearInterval(tickID);\r\n\t\t\t\t} else {\r\n\t\t\t\t\topacity = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, 100 / speed);\r\n\t}\r\n\r\n\t/**\r\n\t  * updates the QP tooltip by converting the Video Encoder QP to a colour light\r\n\t  * @param QP - The video encoder QP number needed to find the average\r\n\t  */\r\n\tupdateQpTooltip(QP: number) {\r\n\t\tthis.videoEncoderAvgQP = QP;\r\n\t\tif (QP > this.redQP) {\r\n\t\t\tthis.color = \"red\";\r\n\t\t\tthis.blinkVideoQualityStatus(2);\r\n\t\t\tthis.statsText = `<div style=\"color: ${this.color}\">Poor encoding quality</div>`;\r\n\t\t\tthis.outer.style.fill = \"#3c3b40\";\r\n\t\t\tthis.middle.style.fill = \"#3c3b40\";\r\n\t\t\tthis.inner.style.fill = this.color;\r\n\t\t\tthis.dot.style.fill = this.color;\r\n\t\t} else if (QP > this.orangeQP) {\r\n\t\t\tthis.color = \"orange\";\r\n\t\t\tthis.blinkVideoQualityStatus(1);\r\n\t\t\tthis.statsText = `<div style=\"color: ${this.color}\">Blocky encoding quality</div>`;\r\n\t\t\tthis.outer.style.fill = \"#3c3b40\";\r\n\t\t\tthis.middle.style.fill = this.color;\r\n\t\t\tthis.inner.style.fill = this.color;\r\n\t\t\tthis.dot.style.fill = this.color;\r\n\t\t} else if (QP <= 0) {\r\n\t\t\tthis.color = \"#b0b0b0\";\r\n\t\t\tthis.outer.style.fill = \"#3c3b40\";\r\n\t\t\tthis.middle.style.fill = \"#3c3b40\";\r\n\t\t\tthis.inner.style.fill = \"#3c3b40\";\r\n\t\t\tthis.dot.style.fill = \"#3c3b40\";\r\n\t\t\tthis.statsText = `<div style=\"color: ${this.color}\">Not connected</div>`;\r\n\t\t} else {\r\n\t\t\tthis.color = \"lime\";\r\n\t\t\tthis.qualityStatus.style.opacity = '1';\r\n\t\t\tthis.statsText = `<div style=\"color: ${this.color}\">Clear encoding quality</div>`;\r\n\t\t\tthis.outer.style.fill = this.color;\r\n\t\t\tthis.middle.style.fill = this.color;\r\n\t\t\tthis.inner.style.fill = this.color;\r\n\t\t\tthis.dot.style.fill = this.color;\r\n\t\t}\r\n\t\tthis.qualityText.innerHTML = this.statsText;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Class for handling fullscreen logic\r\n */\r\nexport class FullScreenLogic {\r\n\tisFullscreen: boolean = false;\r\n\r\n\t/**\r\n\t * Construct a FullScreenLogic object\r\n\t */\r\n\tconstructor() {\r\n\t\tdocument.getElementById(\"fullscreen-btn\").onclick = () => this.fullscreen();\r\n\r\n\t\t// set up the full screen events\r\n\t\tdocument.addEventListener('webkitfullscreenchange', () => this.onFullscreenChange(), false);\r\n\t\tdocument.addEventListener('mozfullscreenchange', () => this.onFullscreenChange(), false);\r\n\t\tdocument.addEventListener('fullscreenchange', () => this.onFullscreenChange(), false);\r\n\t\tdocument.addEventListener('MSFullscreenChange', () => this.onFullscreenChange(), false);\r\n\t}\r\n\r\n\t/**\r\n\t * Makes the document fullscreen \r\n\t * @returns \r\n\t */\r\n\tfullscreen() {\r\n\t\t// if already full screen; exit\r\n\t\t// else go fullscreen\r\n\t\tif (\r\n\t\t\tdocument.fullscreenElement ||\r\n\t\t\tdocument.webkitFullscreenElement ||\r\n\t\t\tdocument.mozFullScreenElement ||\r\n\t\t\tdocument.msFullscreenElement\r\n\t\t) {\r\n\t\t\tif (document.exitFullscreen) {\r\n\t\t\t\tdocument.exitFullscreen();\r\n\t\t\t} else if (document.mozCancelFullScreen) {\r\n\t\t\t\tdocument.mozCancelFullScreen();\r\n\t\t\t} else if (document.webkitExitFullscreen) {\r\n\t\t\t\tdocument.webkitExitFullscreen();\r\n\t\t\t} else if (document.msExitFullscreen) {\r\n\t\t\t\tdocument.msExitFullscreen();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tlet element: any;\r\n\t\t\t//HTML elements controls\r\n\t\t\tif (!(document.fullscreenEnabled || document.webkitFullscreenEnabled)) {\r\n\t\t\t\telement = document.getElementById(\"streamingVideo\") as any;\r\n\t\t\t} else {\r\n\t\t\t\telement = document.getElementById(\"playerUI\") as any;\r\n\t\t\t}\r\n\t\t\tif (!element) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (element.requestFullscreen) {\r\n\t\t\t\telement.requestFullscreen();\r\n\t\t\t} else if (element.mozRequestFullScreen) {\r\n\t\t\t\telement.mozRequestFullScreen();\r\n\t\t\t} else if (element.webkitRequestFullscreen) {\r\n\t\t\t\telement.webkitRequestFullscreen((<any>Element).ALLOW_KEYBOARD_INPUT);\r\n\t\t\t} else if (element.msRequestFullscreen) {\r\n\t\t\t\telement.msRequestFullscreen();\r\n\t\t\t} else if (element.webkitEnterFullscreen) {\r\n\t\t\t\telement.webkitEnterFullscreen(); //for iphone this code worked\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.onFullscreenChange();\r\n\t}\r\n\r\n\t/**\r\n\t * Handles the fullscreen button on change\r\n\t */\r\n\tonFullscreenChange() {\r\n\t\tthis.isFullscreen = (document.webkitIsFullScreen\r\n\t\t\t|| document.mozFullScreen\r\n\t\t\t|| (document.msFullscreenElement && document.msFullscreenElement !== null)\r\n\t\t\t|| (document.fullscreenElement && document.fullscreenElement !== null));\r\n\r\n\t\tlet minimize = document.getElementById('minimizeIcon');\r\n\t\tlet maximize = document.getElementById('maximizeIcon');\r\n\t\tif (minimize && maximize) {\r\n\t\t\tif (this.isFullscreen) {\r\n\t\t\t\tminimize.style.display = 'inline';\r\n\t\t\t\t//ios disappearing svg fix\r\n\t\t\t\tminimize.style.transform = 'translate(0, 0)';\r\n\t\t\t\tmaximize.style.display = 'none';\r\n\t\t\t} else {\r\n\t\t\t\tminimize.style.display = 'none';\r\n\t\t\t\tmaximize.style.display = 'inline';\r\n\t\t\t\t//ios disappearing svg fix\r\n\t\t\t\tmaximize.style.transform = 'translate(0, 0)';\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nexport class NativeDOMDelegate extends libspsfrontend.DelegateBase {\r\n\tconfig: libspsfrontend.Config;\r\n\tlatencyStartTime: number;\r\n\tvideoStartTime: number;\r\n\tmobileUser: boolean;\r\n\tstreamReady: boolean;\r\n\treadyHook: Function;\r\n\r\n\t// instantiate the WebRtcPlayerControllers interface var \r\n\tiWebRtcController: libspsfrontend.IWebRtcPlayerController;\r\n\r\n\tshowStats: boolean;\r\n\r\n\t// HTML Elements that are used multiple times\r\n\r\n\t// Global\r\n\tvideoQpIndicator: VideoQpIndicator;\r\n\tfullScreenLogic: FullScreenLogic;\r\n\r\n\t// settings and stats panels\r\n\tsettingsPanel = document.getElementById('settings-panel') as HTMLDivElement;\r\n\tstatsPanel = document.getElementById('stats-panel') as HTMLDivElement;\r\n\r\n\t// Pre Stream options\r\n\tforceTurnToggle = document.getElementById(\"force-turn-tgl\") as HTMLInputElement;\r\n\r\n\t// Viewing\r\n\tenlargeDisplayToFillWindow = document.getElementById(\"enlarge-display-to-fill-window-tgl\") as HTMLInputElement;\r\n\tqualityControlOwnershipCheckBox = document.getElementById(\"quality-control-ownership-tgl\") as HTMLInputElement;\r\n\ttoggleMatchViewPortRes = document.getElementById(\"match-viewport-res-tgl\") as HTMLInputElement;\r\n\tcontrolSchemeToggle = document.getElementById(\"control-scheme-tgl\") as HTMLInputElement;\r\n\tcontrolSchemeToggleTitle = document.getElementById(\"control-scheme-title\") as HTMLDivElement;\r\n\r\n\t// Commands\r\n\tuiDescriptorText = document.getElementById(\"ui-descriptor-text\") as HTMLInputElement;\r\n\r\n\t// Settings\r\n\tencoderMinQpText = document.getElementById(\"encoder-min-qp-text\") as HTMLInputElement;\r\n\tencoderMaxQpText = document.getElementById(\"encoder-max-qp-text\") as HTMLInputElement;\r\n\twebRtcFpsText = document.getElementById(\"webrtc-fps-text\") as HTMLInputElement;\r\n\twebRtcMinBitrateText = document.getElementById(\"webrtc-min-bitrate-text\") as HTMLInputElement;\r\n\twebRtcMaxBitrateText = document.getElementById(\"webrtc-max-bitrate-text\") as HTMLInputElement;\r\n\r\n\t// Statistics\r\n\tsendStatsToServer = document.getElementById(\"send-stats-tgl\") as HTMLInputElement;\r\n\r\n\t// Containers Headers\r\n\tpreStreamContainer = document.getElementById(\"preStreamOptionsHeader\") as HTMLDivElement;\r\n\tviewSettingsHeader = document.getElementById(\"viewSettingsHeader\") as HTMLDivElement;\r\n\tcommandsHeader = document.getElementById(\"commandsHeader\") as HTMLDivElement;\r\n\tstreamingSettingsHeader = document.getElementById(\"streamingSettingsHeader\") as HTMLDivElement;\r\n\tstatsHeader = document.getElementById(\"statisticsHeader\") as HTMLDivElement;\r\n\tlatencyHeader = document.getElementById(\"latencyTestHeader\") as HTMLDivElement;\r\n\r\n\t// Containers\r\n\tviewSettingsContainer = document.getElementById(\"viewSettingsContainer\") as HTMLDivElement;\r\n\tcommandsContainer = document.getElementById(\"commandsContainer\") as HTMLDivElement;\r\n\tstreamingSettingsContainer = document.getElementById(\"streamingSettingsContainer\") as HTMLDivElement;\r\n\tstatsContainer = document.getElementById(\"statisticsContainer\") as HTMLDivElement;\r\n\tlatencyContainer = document.getElementById(\"latencyTestContainer\") as HTMLDivElement;\r\n\r\n\tappName: string;\r\n\r\n\tconstructor(config: libspsfrontend.Config) {\r\n\t\tsuper(config);\r\n\t\tthis.config = config;\r\n\t\tthis.showStats = true;\r\n\t\tthis.videoQpIndicator = new VideoQpIndicator(\"connectionStrength\", \"qualityText\", \"outer\", \"middle\", \"inner\", \"dot\");\r\n\t\tthis.fullScreenLogic = new FullScreenLogic();\r\n\t\tthis.streamReady = false;\r\n\r\n\t\t// build all of the overlays \r\n\t\tthis.buildDisconnectOverlay();\r\n\t\tthis.buildConnectOverlay();\r\n\t\tthis.buildPlayOverlay();\r\n\t\tthis.buildAfkOverlay();\r\n\t\tthis.buildInfoOverlay();\r\n\t\tthis.buildErrorOverlay();\r\n\r\n\t\t// configure all buttons \r\n\t\tthis.ConfigureButtons();\r\n\t}\r\n\r\n\tgetPlayerController() {\r\n\t\treturn (<libspsfrontend.webRtcPlayerController>this.iWebRtcController);\r\n\t}\r\n\r\n\tupdateVideoStreamSize(x: number, y: number) {\r\n\t\t(<libspsfrontend.webRtcPlayerController>this.iWebRtcController).ueDescriptorUi.sendUpdateVideoStreamSize(x, y);\r\n\t}\r\n\r\n    write(file: string, message: string) {\r\n        const data = {\r\n            filename: file,\r\n            data: message\r\n        };\r\n\r\n        fetch('https://prophet.palatialxr.com:3001/save', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(data)\r\n            })\r\n            .then(response => {\r\n                console.log(\r\n                    `statusCode: ${response.status}`\r\n                    );\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                console.log(data);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n\t}\r\n\r\n\tcheckStreamReady( readyHook: () => void ) {\r\n\t\tif (this.streamReady) {\r\n\t\t\treadyHook();\r\n\t\t} else {\r\n\t\t\tthis.readyHook = readyHook;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the disconnect overlay \r\n\t */\r\n\tbuildDisconnectOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet disconnectOverlayHtml = document.createElement('div');\r\n\t\tdisconnectOverlayHtml.id = \"disconnectOverlay\";\r\n\t\tdisconnectOverlayHtml.className = \"clickableState\";\r\n\r\n\t\t// set the event Listener\r\n\t\tlet disconnectOverlayEvent: EventListener = () => this.onDisconnectionAction();\r\n\t\tconst self = this;\r\n\r\n\t\t// add the new event listener \r\n\t\tdisconnectOverlayHtml.addEventListener('click', function onOverlayClick(event: Event) {\t\t\t\r\n\t\t\tdisconnectOverlayEvent(event);\r\n\t\t\t//whuzz\r\n\t\t});\r\n\r\n\t\t// build the inner html container \r\n\t\tlet disconnectOverlayHtmlInnerContainer = document.createElement('div');\r\n\t\tdisconnectOverlayHtmlInnerContainer.id = 'disconnectButton';\r\n\r\n\t\t// build the span that holds error text\r\n\t\tlet disconnectOverlayInnerSpan = document.createElement('span');\r\n\t\tdisconnectOverlayInnerSpan.id = 'disconnectText';\r\n\t\tdisconnectOverlayInnerSpan.innerHTML = 'Click To Restart';\r\n\r\n\t\t// build the image element that holds the reconnect element\r\n\t\tlet restartSvg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n\t\trestartSvg.setAttribute('width', \"40\");\r\n\t\trestartSvg.setAttribute('height', \"40\");\r\n\t\trestartSvg.setAttribute('fill', \"currentColor\");\r\n\t\trestartSvg.setAttribute('class', \"bi bi-arrow-counterclockwise m-2\");\r\n\t\trestartSvg.setAttribute('viewBox', \"0 0 16 16\");\r\n\r\n\t\t// build the arrow path \r\n\t\tlet restartSvgPathArrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n\t\trestartSvgPathArrow.setAttribute('fill-rule', \"evenodd\");\r\n\t\trestartSvgPathArrow.setAttribute('d', \"M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z\");\r\n\r\n\t\t// build the circle path\r\n\t\tlet restartSvgPathCircle = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n\t\trestartSvgPathCircle.setAttribute('d', \"M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z\");\r\n\r\n\t\t// bring it all together\r\n\t\trestartSvg.appendChild(restartSvgPathArrow);\r\n\t\trestartSvg.appendChild(restartSvgPathCircle);\r\n\r\n\t\t// append the span and images to the content container \r\n\t\tdisconnectOverlayHtmlInnerContainer.appendChild(disconnectOverlayInnerSpan);\r\n\t\tdisconnectOverlayHtmlInnerContainer.appendChild(restartSvg);\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.disconnectOverlay = new ActionOverlayBase(this.config.playerElement, disconnectOverlayHtml, disconnectOverlayHtmlInnerContainer, \"disconnectText\");\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the connect overlay \r\n\t */\r\n\tbuildConnectOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet connectOverlayHtml = document.createElement('div');\r\n\t\tconnectOverlayHtml.id = \"connectOverlay\";\r\n\t\tconnectOverlayHtml.className = \"clickableState\";\r\n\r\n\t\t// set the event Listener\r\n\t\tlet connectOverlayEvent: EventListener = () => this.onConnectAction();\r\n\r\n\t\t// add the new event listener \r\n\t\tconnectOverlayHtml.addEventListener('click', function onOverlayClick(event: Event) {\r\n\t\t\tconnectOverlayEvent(event);\r\n\t\t});\r\n\r\n\t\t// build the inner html \r\n\t\tlet connectOverlayHtmlInner = document.createElement('div');\r\n\t\tconnectOverlayHtmlInner.id = 'connectButton';\r\n\t\tconnectOverlayHtmlInner.innerHTML = 'Click to start';\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.connectOverlay = new ActionOverlayBase(this.config.playerElement, connectOverlayHtml, connectOverlayHtmlInner);\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the play overlay \r\n\t */\r\n\tbuildPlayOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet playOverlayHtml = document.createElement('div');\r\n\t\t//playOverlayHtml.id = \"startText\";\r\n\t\t//playOverlayHtml.classList.add(\"clickableState\", \"loadingText\");\r\n\r\n\t\t// set the event Listener\r\n                let playOverlayEvent: EventListener = () => this.onPlayAction();\t\r\n\r\n                // add the new event listener\r\n                /*playOverlayHtml.addEventListener('click', function onOverlayClick(event: Event) {\r\n                        playOverlayEvent(event);\r\n                        document.getElementById('container').style.display = 'none';\r\n                        document.body.style.cursor = 'none';\r\n                        openFullscreen();\r\n                });*/\r\n\r\n\t\t// build the inner html \r\n\t\tlet playOverlayHtmlInner = document.createElement('div');\r\n\t\t//playOverlayHtmlInner.className = \"disconnectText\";\r\n\t\t//playOverlayHtmlInner.innerHTML = \"Click to start\";\r\n\t\t\r\n\t\t// instantiate the overlay\r\n\t\tthis.playOverlay = new ActionOverlayBase(this.config.playerElement, playOverlayHtml, playOverlayHtmlInner);\r\n\t}\r\n\t/**\r\n\t * Builds the Afk overlay \r\n\t */\r\n\tbuildAfkOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet afkOverlayHtml = document.createElement('div');\r\n\t\tafkOverlayHtml.id = \"afkOverlay\";\r\n\t\tafkOverlayHtml.className = \"clickableState\";\r\n\r\n\t\tlet afkOverlayEvent: EventListener = () => this.onAfkAction();\r\n\r\n\t\tafkOverlayHtml.addEventListener('click', function onOverlayClick(event: Event) {\r\n\t\t\tafkOverlayEvent(event);\r\n\t\t});\r\n\r\n\t\t// build the inner html\r\n\t\tlet afkOverlayHtmlInner = document.createElement('div');\r\n\t\tafkOverlayHtmlInner.id = 'afkOverlayInner';\r\n\t\tafkOverlayHtmlInner.innerHTML = '<center>No activity detected<br>Disconnecting in <span id=\"afkCountDownNumber\"></span> seconds<br>Click to continue<br></center>'\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.afkOverlay = new AfkOverlayBase(this.config.playerElement, afkOverlayHtml, afkOverlayHtmlInner, \"afkCountDownNumber\");\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the info overlay \r\n\t */\r\n\tbuildInfoOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet infoOverlayHtml = document.createElement('div');\r\n\t\tinfoOverlayHtml.id = \"infoOverlay\";\r\n\t\tinfoOverlayHtml.className = \"textDisplayState\";\r\n\r\n\t\t// build the inner html\r\n\t\tlet infoOverlayHtmlInner = document.createElement('div');\r\n\t\tinfoOverlayHtmlInner.id = 'messageOverlayInner';\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.infoOverlay = new TextOverlayBase(this.config.playerElement, infoOverlayHtml, infoOverlayHtmlInner);\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the error overlay \r\n\t */\r\n\tbuildErrorOverlay() {\r\n\t\t// build the overlay base div \r\n\t\tlet errorOverlayHtml = document.createElement('div');\r\n\t\terrorOverlayHtml.id = \"errorOverlay\";\r\n\t\terrorOverlayHtml.className = \"textDisplayState\";\r\n\r\n\t\t// build the inner html\r\n\t\tlet errorOverlayHtmlInner = document.createElement('div');\r\n\t\terrorOverlayHtmlInner.id = 'errorOverlayInner';\r\n\t\terrorOverlayHtmlInner.classList.add(\".text-danger\");\r\n\r\n\t\t// instantiate the overlay\r\n\t\tthis.errorOverlay = new TextOverlayBase(this.config.playerElement, errorOverlayHtml, errorOverlayHtmlInner);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a text overlay to alert the user the stream is currently loading\r\n\t */\r\n\tonStreamLoading() {\r\n\t\t// build the spinner span\r\n\t\tvar spinnerSpan: HTMLSpanElement = document.createElement('span');\r\n\t\tspinnerSpan.className = \"visually-hidden\"\r\n\t\tspinnerSpan.innerHTML = \"Loading\"\r\n\r\n\t\t// build the spinner div\r\n\t\tvar spinnerDiv: HTMLDivElement = document.createElement('div');\r\n\t\tspinnerDiv.id = \"loading-spinner\"\r\n\t\tspinnerDiv.className = \"spinner-border ms-2\"\r\n\t\tspinnerDiv.setAttribute(\"role\", \"status\");\r\n\r\n\t\t// append the spinner to the element\r\n\t\tspinnerDiv.appendChild(spinnerSpan);\r\n\t\tthis.showTextOverlay(\"Loading Stream \" + spinnerDiv.outerHTML);\r\n\t}\r\n\r\n        zoomIn() {\r\n            const scaleFactor = 1.2;\r\n            const currentScale = parseFloat(document.body.style.transform.replace('scale(', '').replace(')', ''));\r\n            const newScale = currentScale ? currentScale * scaleFactor : scaleFactor;\r\n            document.body.style.transform = `scale(${newScale})`;\r\n        }\r\n\r\n\t/**\r\n\t* Set up functionality to happen when an instance state change occurs and updates the info overlay with the response\r\n\t* @param instanceState - the message instance state \r\n\t*/\r\n        onInstanceStateChange(instanceState: libspsfrontend.MessageInstanceState) {\r\n\t\tlet instanceStateMessage = \"\";\r\n\t\tlet isInstancePending = false;\r\n\t\tlet isError = false;\r\n\r\n\t\t// get the response type\r\n\t\tswitch (instanceState.state) {\r\n\t\t\tcase libspsfrontend.InstanceState.UNALLOCATED:\r\n\t\t\t\tinstanceStateMessage = \"Instance Unallocated: \" + instanceState.details;\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.InstanceState.FAILED:\r\n\t\t\t\tinstanceStateMessage = \"UE Instance Failed: \" + instanceState.details;\r\n\t\t\t\tisError = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.InstanceState.PENDING:\r\n\t\t\t\tisInstancePending = true;\r\n\t\t\t\tif (instanceState.details == undefined || instanceState.details == null) {\r\n\t\t\t\t\tinstanceStateMessage = \"Your application is pending\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinstanceStateMessage = instanceState.details;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.InstanceState.READY:\r\n\t\t\t\tif (instanceState.details == undefined || instanceState.details == null) {\r\n\t\t\t\t\tinstanceStateMessage = \"Instance is Ready\";\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tinstanceStateMessage = \"Instance is Ready: \" + instanceState.details;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tinstanceStateMessage = \"Unhandled Instance State\" + instanceState.state + \" \" + instanceState.details;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (isError) {\r\n\t\t\tthis.showErrorOverlay(instanceStateMessage);\r\n\t\t} else if (isInstancePending) {\r\n\t\t\t//check if there is already and instance pending if so return \r\n\t\t\tlet preExistingPendingMessage = document.getElementById('loading-spinner') as HTMLDivElement;\r\n\t\t\tif (preExistingPendingMessage) {\r\n\r\n\t\t\t\t// only update our text div\r\n\t\t\t\tlet textDiv = document.getElementById(\"text-\"+instanceState.id) as HTMLSpanElement;\r\n\t\t\t\ttextDiv.innerHTML = instanceStateMessage;\r\n\t\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// build a wrapper to hold our text and our spinner\r\n\t\t\tvar wrapperDiv: HTMLDivElement = document.createElement('div');\r\n\r\n\t\t\t// build a text div to hold our text message\r\n\t\t\tvar textSpan: HTMLSpanElement = document.createElement('span');\r\n\t\t\ttextSpan.id = \"text-\" + instanceState.id\r\n\t\t\ttextSpan.innerHTML = instanceStateMessage;\r\n\r\n\t\t\t// build the spinner span\r\n\t\t\tvar spinnerSpan: HTMLSpanElement = document.createElement('span');\r\n\t\t\tspinnerSpan.className = \"visually-hidden\"\r\n\t\t\tspinnerSpan.innerHTML = \"Loading...\"\r\n\r\n\t\t\t// build the spinner div\r\n\t\t\tvar spinnerDiv: HTMLDivElement = document.createElement('div');\r\n\t\t\tspinnerDiv.id = \"loading-spinner\"\r\n\t\t\tspinnerDiv.className = \"spinner-border ms-2\"\r\n\t\t\tspinnerDiv.setAttribute(\"role\", \"status\");\r\n\r\n\t\t\t// append wrapper and the spinner to the element\r\n\t\t\twrapperDiv.appendChild(textSpan);\r\n\t\t\twrapperDiv.appendChild(spinnerDiv).appendChild(spinnerSpan);\r\n\r\n\t\t\t// insert the inner html into the base div\r\n\t\t\tthis.showTextOverlay(wrapperDiv.outerHTML);\r\n\t\t} else {\r\n\r\n\t\t}\r\n\r\n                function openFullscreen() {\r\n                        let body = document.documentElement;\r\n                        if (body.requestFullscreen) {\r\n                                body.requestFullscreen();\r\n                        } else if (body.webkitRequestFullscreen) { /* Safari */\r\n                                body.webkitRequestFullscreen();\r\n                        } else if (body.msRequestFullscreen) { /* IE11 */\r\n                                body.msRequestFullscreen();\r\n                        }\r\n                }\r\n\t}\r\n\r\n\t/**\r\n\t * Set up functionality to happen when receiving an auth response and updates an info overlay with the response\r\n\t * @param authResponse - the auth response message type\r\n\t */\r\n\tonAuthenticationResponse(authResponse: libspsfrontend.MessageAuthResponse) {\r\n\t\tlet instanceStateMessage = \"\";\r\n\t\tlet isError = false;\r\n\r\n\t\t// get the response type\r\n\t\tswitch (authResponse.outcome) {\r\n\t\t\tcase libspsfrontend.MessageAuthResponseOutcomeType.AUTHENTICATED:\r\n\t\t\t\tinstanceStateMessage = \"Authentication has succeeded. Requesting Instance\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.MessageAuthResponseOutcomeType.INVALID_TOKEN:\r\n\t\t\t\tinstanceStateMessage = \"Invalid Token: \" + authResponse.error;\r\n\t\t\t\tisError = true;\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.MessageAuthResponseOutcomeType.REDIRECT:\r\n\t\t\t\tinstanceStateMessage = \"Redirecting to: \" + authResponse.redirect;\r\n\t\t\t\tbreak;\r\n\t\t\tcase libspsfrontend.MessageAuthResponseOutcomeType.ERROR:\r\n\t\t\t\tinstanceStateMessage = \"Error: \" + authResponse.error;\r\n\t\t\t\tisError = true;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tinstanceStateMessage = \"Unhandled Auth Response: \" + authResponse.outcome;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// if the response is an error show the error instead of the info \r\n\t\tif (isError) {\r\n\t\t\tthis.showErrorOverlay(instanceStateMessage);\r\n\t\t} else {\r\n\t\t\tthis.showTextOverlay(instanceStateMessage);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set up button click functions and button functionality  \r\n\t */\r\n\tConfigureButtons() {\r\n\r\n\t\t// set up the settings \r\n\t\tdocument.getElementById('settingsBtn').onclick = () => this.settingsClicked();\r\n\t\tdocument.getElementById('settingsClose').onclick = () => this.settingsClicked();\r\n\r\n\t\t// setup the info button\r\n\t\tdocument.getElementById('statsBtn').onclick = () => this.statsClicked();\r\n\t\tdocument.getElementById('statsClose').onclick = () => this.statsClicked();\r\n\r\n\t\t// setup the Force TURN toggle\r\n\t\tthis.setUpToggleWithUrlParams(this.forceTurnToggle, \"ForceTURN\");\r\n\r\n\t\tthis.setUpControlSchemeTypeToggle(this.controlSchemeToggle);\r\n\r\n\t\t// set up the restart stream button\r\n\t\tdocument.getElementById(\"restart-stream-button\").onclick = () => {\r\n\t\t\tthis.settingsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t\t\tthis.iWebRtcController.restartStreamAutomaticity();\r\n\t\t}\r\n\r\n\t\tdocument.getElementById(\"btn-streaming-settings\").onclick = () => {\r\n\t\t\tlibspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), \"--------  Sending Streaming settings  --------\", 7);\r\n\t\t\tlet encode: libspsfrontend.Encoder = {\r\n\t\t\t\tMinQP: Number(this.encoderMinQpText.value),\r\n\t\t\t\tMaxQP: Number(this.encoderMaxQpText.value),\r\n\t\t\t}\r\n\r\n\t\t\tlet webRtcSettings: libspsfrontend.WebRTC = {\r\n\t\t\t\tFPS: Number(this.webRtcFpsText.value),\r\n\t\t\t\tMinBitrate: Number(this.webRtcMinBitrateText.value) * 1000,\r\n\t\t\t\tMaxBitrate: Number(this.webRtcMaxBitrateText.value) * 1000,\r\n\t\t\t}\r\n\r\n\t\t\tthis.iWebRtcController.sendEncoderSettings(encode);\r\n\t\t\tthis.iWebRtcController.sendWebRtcSettings(webRtcSettings);\r\n\t\t\tlibspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), \"-------------------------------------------\", 7);\r\n\t\t}\r\n\r\n\r\n\t\t// sending UI descriptors \r\n\t\tdocument.getElementById(\"sendUiDescriptor\").onclick = () => {\r\n\t\t\tthis.iWebRtcController.sendUeUiDescriptor(this.uiDescriptorText.value);\r\n\r\n\t\t};\r\n\r\n\t\t// show the current fps on screen \r\n\t\tdocument.getElementById(\"show-fps-button\").onclick = () => {\r\n\t\t\tthis.iWebRtcController.sendShowFps();\r\n\t\t};\r\n\r\n\t\t// make the player fill the window\r\n\t\tthis.enlargeDisplayToFillWindow.onchange = () => {\r\n\t\t\tthis.iWebRtcController.resizePlayerStyle();\r\n\t\t\tthis.iWebRtcController.setEnlargeToFillDisplay(this.enlargeDisplayToFillWindow.checked);\r\n\t\t};\r\n\r\n\t\t// make the player match the view port resolution \r\n\t\tthis.toggleMatchViewPortRes.onchange = () => {\r\n\t\t\tthis.iWebRtcController.matchViewportResolution = this.toggleMatchViewPortRes.checked;\r\n\t\t\tthis.iWebRtcController.updateVideoStreamSize();\r\n\t\t};\r\n\r\n\t\t// quality control ownership checkbox \r\n\t\tthis.qualityControlOwnershipCheckBox.onchange = () => {\r\n\t\t\tif (this.qualityControlOwnershipCheckBox.checked === false) {\r\n\t\t\t\tthis.iWebRtcController.sendRequestQualityControlOwnership();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the settings panel if clicked\r\n\t */\r\n\tsettingsClicked() {\r\n\t\t/**\r\n\t\t * Toggle settings panel. If stats panel is already open, close it and then open settings\r\n\t\t */\r\n\t\tif (this.statsPanel.classList.contains(\"panel-wrap-visible\")) {\r\n\t\t\tthis.statsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t\t}\r\n\r\n\t\tthis.settingsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the stats panel if clicked\r\n\t */\r\n\tstatsClicked() {\r\n\t\t/**\r\n\t\t * Toggle stats panel. If settings panel is already open, close it and then open stats\r\n\t\t */\r\n\t\tif (this.settingsPanel.classList.contains(\"panel-wrap-visible\")) {\r\n\t\t\tthis.settingsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t\t}\r\n\r\n\t\tthis.statsPanel.classList.toggle(\"panel-wrap-visible\");\r\n\t}\r\n\r\n\t/**\r\n\t * Set up toggle element for controlling hovering mouse or locked mouse  \r\n\t * @param toggleElement the toggle html element to be set up\r\n\t */\r\n\tsetUpControlSchemeTypeToggle(toggleElement: HTMLInputElement) {\r\n\t\tif (toggleElement) {\r\n\r\n\t\t\t// set the state for the toggle based on the config\r\n\t\t\tif (this.config.controlScheme === libspsfrontend.ControlSchemeType.LockedMouse) {\r\n\t\t\t\tthis.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Locked Mouse\"\r\n\t\t\t\tthis.controlSchemeToggle.checked = false;\r\n\t\t\t} else {\r\n\t\t\t\tthis.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Hovering Mouse\"\r\n\t\t\t\tthis.controlSchemeToggle.checked = true;\r\n\t\t\t}\r\n\r\n\t\t\t// set the onChange event \r\n\t\t\ttoggleElement.onchange = () => {\r\n\t\t\t\tif (toggleElement.checked === true) {\r\n\t\t\t\t\tthis.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Hovering Mouse\"\r\n\t\t\t\t\tthis.config.controlScheme = libspsfrontend.ControlSchemeType.HoveringMouse;\r\n\t\t\t\t\tthis.iWebRtcController.activateRegisterMouse();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.controlSchemeToggleTitle.innerHTML = \"Control Scheme: Locked Mouse\"\r\n\t\t\t\t\tthis.config.controlScheme = libspsfrontend.ControlSchemeType.LockedMouse;\r\n\t\t\t\t\tthis.iWebRtcController.activateRegisterMouse();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Set up url toggle buttons\r\n\t * @param toggleElement the toggle element being activated  \r\n\t * @param urlParameterKey the url key that is being made use of\r\n\t */\r\n\tsetUpToggleWithUrlParams(toggleElement: HTMLInputElement, urlParameterKey: string) {\r\n\t\tif (toggleElement) {\r\n\t\t\t//Check if the element has been set from the URL Params \r\n\t\t\ttoggleElement.checked = new URLSearchParams(window.location.search).has(urlParameterKey);\r\n\r\n\t\t\ttoggleElement.onchange = () => {\r\n\t\t\t\tconst urlParams = new URLSearchParams(window.location.search);\r\n\t\t\t\tif (toggleElement.checked === true) {\r\n\t\t\t\t\turlParams.set(urlParameterKey, \"true\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\turlParams.delete(urlParameterKey);\r\n\t\t\t\t}\r\n\t\t\t\twindow.history.replaceState({}, '', urlParams.toString() !== \"\" ? `${window.location.pathname}?${urlParams}` : `${window.location.pathname}`);\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Disable shared session links for all players\r\n\t * @returns false\r\n\t */\r\n\tasync IsLinkSharingEnabled() {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Handle when the Video has been Initialised\r\n\t */\r\n\tonVideoInitialised() {\r\n\t\tconsole.log('ready!');\r\n\t\tthis.streamReady = true;\r\n\t\t// starting a latency check\r\n\t\tdocument.getElementById(\"btn-start-latency-test\").onclick = () => {\r\n\t\t\tthis.iWebRtcController.sendLatencyTest();\r\n\t\t}\r\n\r\n\t\t// Set up stream tools header functionality\r\n\t\tthis.viewSettingsHeader.onclick = () => {\r\n\t\t\tthis.viewSettingsContainer.classList.contains(\"d-none\") ? this.viewSettingsContainer.classList.remove(\"d-none\") : this.viewSettingsContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\r\n\t\tthis.commandsHeader.onclick = () => {\r\n\t\t\tthis.commandsContainer.classList.contains(\"d-none\") ? this.commandsContainer.classList.remove(\"d-none\") : this.commandsContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\r\n\t\tthis.streamingSettingsHeader.onclick = () => {\r\n\t\t\tthis.streamingSettingsContainer.classList.contains(\"d-none\") ? this.streamingSettingsContainer.classList.remove(\"d-none\") : this.streamingSettingsContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\t\tthis.statsHeader.onclick = () => {\r\n\t\t\tthis.statsContainer.classList.contains(\"d-none\") ? this.statsContainer.classList.remove(\"d-none\") : this.statsContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\t\tthis.latencyHeader.onclick = () => {\r\n\t\t\tthis.latencyContainer.classList.contains(\"d-none\") ? this.latencyContainer.classList.remove(\"d-none\") : this.latencyContainer.classList.add(\"d-none\")\r\n\t\t}\r\n\r\n\t\t// Reveal all the container\r\n\t\tthis.viewSettingsContainer.classList.remove(\"d-none\");\r\n\t\tthis.commandsContainer.classList.remove(\"d-none\");\r\n\t\tthis.streamingSettingsContainer.classList.remove(\"d-none\");\r\n\t\tthis.statsContainer.classList.remove(\"d-none\");\r\n\r\n\t\tthis.videoStartTime = Date.now();\r\n\t}\r\n\r\n\t/**\r\n\t * Extended from the base functionality; displays the error overlay and resets the buttons stream tools upon disconnect \r\n\t * @param eventText \r\n\t */\r\n\tonDisconnect(eventText: string) {\r\n\t\t// display the text overlay by calling its super method so it will use its default behavior first \r\n\t\tsuper.onDisconnect(`${eventText}`);\r\n\r\n\t\t// update all of the tools upon disconnect \r\n\t\tthis.onVideoEncoderAvgQP(0);\r\n\r\n\t\t// starting a latency check\r\n\t\tdocument.getElementById(\"btn-start-latency-test\").onclick = () => { }\r\n\r\n\t\t// Set up stream tools header functionality\r\n\t\tthis.viewSettingsHeader.onclick = () => { }\r\n\t\tthis.commandsHeader.onclick = () => { }\r\n\t\tthis.streamingSettingsHeader.onclick = () => { }\r\n\t\tthis.statsHeader.onclick = () => { }\r\n\t\tthis.latencyHeader.onclick = () => { }\r\n\r\n\t\t// Hide all the containers\r\n\t\tthis.viewSettingsContainer.classList.add(\"d-none\");\r\n\t\tthis.commandsContainer.classList.add(\"d-none\");\r\n\t\tthis.streamingSettingsContainer.classList.add(\"d-none\");\r\n\t\tthis.statsContainer.classList.add(\"d-none\");\t\r\n\t}\r\n\t/**\r\n\t * `Takes the InitialSettings and wired to frontend\r\n\t * @param settings - Settings sent from the UE Instance`\r\n\t */\r\n\tonInitialSettings(settings: libspsfrontend.InitialSettings): void {\r\n\t\tif (settings.Encoder) {\r\n\t\t\tthis.encoderMinQpText.value = settings.Encoder.MinQP.toString();\r\n\t\t\tthis.encoderMaxQpText.value = settings.Encoder.MaxQP.toString();\r\n\t\t}\r\n\t\tif (settings.WebRTC) {\r\n\t\t\tthis.webRtcMinBitrateText.value = settings.WebRTC.MinBitrate.toString();\r\n\t\t\tthis.webRtcMaxBitrateText.value = settings.WebRTC.MaxBitrate.toString();\r\n\t\t\tthis.webRtcFpsText.value = settings.WebRTC.FPS.toString();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Used to handle the Video Stats from the Peer Connection Client\r\n\t* @param stats - Stats generate from the Peer Connection Client\r\n\t*/\r\n\tonVideoStats(stats: libspsfrontend.AggregatedStats): void {\r\n\t\tlet runTime = new Date(Date.now() - this.videoStartTime).toISOString().substr(11, 8);\r\n\t\tlet statsText = \"\";\r\n\t\tlet inboundData = this.formatBytes(stats.inboundVideoStats.bytesReceived, 2);\r\n\r\n\t\t// format numbering based on the browser language\r\n\t\tlet numberFormat = new Intl.NumberFormat(window.navigator.language, {\r\n            maximumFractionDigits: 0\r\n        });\r\n\r\n\t\t// ensure that we have a currentRoundTripTime coming in from stats and format it if it's a number\r\n\t\tlet netRTT = stats.candidatePair.hasOwnProperty('currentRoundTripTime') && stats.isNumber(stats.candidatePair.currentRoundTripTime) ? numberFormat.format(stats.candidatePair.currentRoundTripTime * 1000) : 'Can\\'t calculate';\r\n\r\n\t\tstatsText += `<div>Duration: ${runTime}</div>`;\r\n\t\tstatsText += `<div>Received: ${inboundData}</div>`;\r\n\t\tstatsText += `<div>Packets Lost: ${stats.inboundVideoStats.packetsLost}</div>`;\r\n\t\tstatsText += `<div>Bitrate (kbps): ${stats.inboundVideoStats.bitrate}</div>`;\r\n\t\tstatsText += `<div>Video Resolution: ${\r\n            stats.inboundVideoStats.hasOwnProperty('frameWidth') && stats.inboundVideoStats.frameWidth && stats.inboundVideoStats.hasOwnProperty('frameHeight') && stats.inboundVideoStats.frameHeight ?\r\n                stats.inboundVideoStats.frameWidth + 'x' + stats.inboundVideoStats.frameHeight : 'Chrome only'\r\n            }</div>`;\r\n\t\tstatsText += `<div>Frames Decoded: ${stats.inboundVideoStats.hasOwnProperty('framesDecoded') ? numberFormat.format(stats.inboundVideoStats.framesDecoded) : 'Chrome only'}</div>`;\r\n\t\tstatsText += `<div>Packets Lost: ${stats.inboundVideoStats.hasOwnProperty('packetsLost') ? numberFormat.format(stats.inboundVideoStats.packetsLost) : 'Chrome only'}</div>`;\r\n\t\tstatsText += `<div>Framerate: ${stats.inboundVideoStats.framerate}</div>`;\r\n\t\tstatsText += `<div>Frames dropped: ${stats.inboundVideoStats.framesDropped}</div>`;\r\n\t\tstatsText += `<div>Net RTT (ms): ${netRTT}</div>`;\r\n\t\t//statsText += `<div>Browser receive to composite (ms): ${stats.inboundVideoStats.receiveToCompositeMs}</div>`;\r\n\t\tstatsText += `<div>Video Quantization Parameter: ${this.videoQpIndicator.videoEncoderAvgQP}</div>`;\r\n\r\n\t\tlet statsDiv = document.getElementById(\"statisticsResult\");\r\n\t\tstatsDiv.innerHTML = statsText;\r\n\r\n\t\tlibspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), `--------- Stats ---------\\n ${stats}\\n------------------------`, 6);\r\n\r\n\t\tif (this.sendStatsToServer.checked === true) {\r\n\t\t\tthis.iWebRtcController.sendStatsToSignallingServer(stats);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* formats Bytes coming in for video stats\r\n\t* @param bytes number to convert\r\n\t* @param decimals number of decimal places\r\n\t*/\r\n\tformatBytes(bytes: number, decimals: number): string {\r\n\t\tif (bytes === 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\r\n\t\tconst factor: number = 1024;\r\n\t\tconst dm = decimals < 0 ? 0 : decimals;\r\n\t\tconst sizes = ['Bytes', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\r\n\r\n\t\tconst i = Math.floor(Math.log(bytes) / Math.log(factor));\r\n\r\n\t\treturn parseFloat((bytes / Math.pow(factor, i)).toFixed(dm)) + ' ' + sizes[i];\r\n\t}\r\n\r\n\t/**\r\n\t* Handles the result of the UE Latency Test\r\n\t* @param latencyTimings - Latency Test Timings sent from the UE Instance \r\n\t*/\r\n\tonLatencyTestResult(latencyTimings: libspsfrontend.LatencyTestResults): void {\r\n\t\tlibspsfrontend.Logger.Log(libspsfrontend.Logger.GetStackTrace(), latencyTimings.toString(), 6);\r\n\t\tlet latencyStatsInnerHTML = '';\r\n\t\tlatencyStatsInnerHTML += \"<div>Net latency RTT (ms): \" + latencyTimings.networkLatency + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += \"<div>UE Encode (ms): \" + latencyTimings.EncodeMs + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += \"<div>UE Capture (ms): \" + latencyTimings.CaptureToSendMs + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += \"<div>Browser send latency (ms): \" + latencyTimings.browserSendLatency + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += latencyTimings.frameDisplayDeltaTimeMs && latencyTimings.browserReceiptTimeMs ? \"<div>Browser receive latency (ms): \" + latencyTimings.frameDisplayDeltaTimeMs + \"</div>\" : \"\";\r\n\t\tlatencyStatsInnerHTML += \"<div>Total latency (excluding browser) (ms): \" + latencyTimings.latencyExcludingDecode + \"</div>\";\r\n\t\tlatencyStatsInnerHTML += latencyTimings.endToEndLatency ? \"<div>Total latency (ms): \" + latencyTimings.endToEndLatency + \"</div>\" : \"\";\r\n\r\n\t\tthis.latencyContainer.classList.remove(\"d-none\")\r\n\r\n\t\tdocument.getElementById(\"latencyStatsResults\").innerHTML = latencyStatsInnerHTML;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles when the ownership flag is sent from the signaling server\r\n\t * @param hasQualityOwnership - flag if the user has quality ownership\r\n\t */\r\n\tonQualityControlOwnership(hasQualityOwnership: boolean): void {\r\n\t\tthis.qualityControlOwnershipCheckBox.checked = hasQualityOwnership;\r\n\t}\r\n\r\n\t/**\r\n\t  * Calls updateQpTooltip to update the QP colour light\r\n\t  * @param QP - The video encoder QP number needed to find the average\r\n\t  */\r\n\tonVideoEncoderAvgQP(QP: number): void {\r\n\t\tthis.videoQpIndicator.updateQpTooltip(QP);\r\n\t}\r\n}\r\n\r\n/**\r\n * Declare additions to global html objects that do not exist on the bases\r\n */\r\ndeclare global {\r\n\tinterface Document {\r\n\t\twebkitIsFullScreen?: boolean;\r\n\t\tmozFullScreen?: boolean;\r\n\t\twebkitFullscreenEnabled?: boolean;\r\n\t\tmozCancelFullScreen?: () => Promise<void>;\r\n\t\tmsExitFullscreen?: () => Promise<void>;\r\n\t\twebkitExitFullscreen?: () => Promise<void>;\r\n\t\tmozFullScreenElement?: Element;\r\n\t\tmsFullscreenElement?: Element;\r\n\t\twebkitFullscreenElement?: Element;\r\n\t}\r\n\r\n\tinterface HTMLElement {\r\n\t\tmsRequestFullscreen?: () => Promise<void>;\r\n\t\tmozRequestFullscreen?: () => Promise<void>;\r\n\t\twebkitRequestFullscreen?: () => Promise<void>;\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}