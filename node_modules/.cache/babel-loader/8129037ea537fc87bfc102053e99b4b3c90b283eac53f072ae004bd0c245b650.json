{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\employee\\\\Palatial-Web-Loading\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport 'bootstrap/dist/js/bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap-grid.min.css';\nimport 'bootstrap/dist/css/bootstrap-reboot.min.css';\nimport 'bootstrap/dist/css/bootstrap-utilities.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar libspsfrontend = require(\"backend-dom-components\");\nvar NativeDOMDelegate_1 = require(\"./NativeDOMDelegate\");\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 18,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nvar signallingServerAddress = '';\nif (signallingServerAddress == '') {\n  // define our signallingServerProtocol to be used based on whether\n  // or not we're accessing our frontend via a tls\n  var signallingServerProtocol = 'ws:';\n  if (window.location.protocol === 'https:') {\n    signallingServerProtocol = 'wss:';\n  }\n  var application = window.location.hostname.split('.');\n  if (application.length === 0 || /^[a-zA-Z0-9]+$/.test(application[0])) {\n    application = \"demo\";\n  }\n  // build the websocket endpoint based on the protocol used to load the frontend\n  signallingServerAddress = signallingServerProtocol + '//' + 'sps.tenant-palatial-platform.lga1.ingress.coreweave.cloud/' + application;\n  // if the frontend for an application is served from a base-level domain\n  // it has a trailing slash, so we need to account for this when appending the 'ws' for the websocket ingress\n  signallingServerAddress += '/ws';\n}","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","jsxDEV","_jsxDEV","Object","defineProperty","exports","value","libspsfrontend","require","NativeDOMDelegate_1","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","signallingServerAddress","signallingServerProtocol","window","location","protocol","application","hostname","split","length","test"],"sources":["C:/Users/employee/Palatial-Web-Loading/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport 'bootstrap/dist/js/bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/css/bootstrap-grid.min.css'\nimport 'bootstrap/dist/css/bootstrap-reboot.min.css'\nimport 'bootstrap/dist/css/bootstrap-utilities.min.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar libspsfrontend = require(\"backend-dom-components\");\nvar NativeDOMDelegate_1 = require(\"./NativeDOMDelegate\");\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nvar signallingServerAddress = '';\nif (signallingServerAddress == '') {\n    // define our signallingServerProtocol to be used based on whether\n    // or not we're accessing our frontend via a tls\n    var signallingServerProtocol = 'ws:';\n    if (window.location.protocol ===\n        'https:') {\n        signallingServerProtocol = 'wss:';\n    }\n    var application = window.location.hostname.split('.');\n    if (application.length === 0 || /^[a-zA-Z0-9]+$/.test(application[0])) {\n        application = \"demo\";\n    }\n    // build the websocket endpoint based on the protocol used to load the frontend\n    signallingServerAddress = signallingServerProtocol + '//' + 'sps.tenant-palatial-platform.lga1.ingress.coreweave.cloud/' +\n        application;\n    // if the frontend for an application is served from a base-level domain\n    // it has a trailing slash, so we need to account for this when appending the 'ws' for the websocket ingress\n    signallingServerAddress += '/ws';\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAO,6BAA6B;AACpC,OAAO,sCAAsC;AAC7C,OAAO,2CAA2C;AAClD,OAAO,6CAA6C;AACpD,OAAO,gDAAgD;AACvD,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,eAAe,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhDC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,cAAc,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACtD,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAExD,MAAME,IAAI,GAAGZ,QAAQ,CAACa,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACTZ,OAAA,CAACL,KAAK,CAACkB,UAAU;EAAAC,QAAA,eACfd,OAAA,CAACH,GAAG;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC;;AAED;AACA;AACA;AACApB,eAAe,CAAC,CAAC;AAEjB,IAAIqB,uBAAuB,GAAG,EAAE;AAChC,IAAIA,uBAAuB,IAAI,EAAE,EAAE;EAC/B;EACA;EACA,IAAIC,wBAAwB,GAAG,KAAK;EACpC,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KACxB,QAAQ,EAAE;IACVH,wBAAwB,GAAG,MAAM;EACrC;EACA,IAAII,WAAW,GAAGH,MAAM,CAACC,QAAQ,CAACG,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;EACrD,IAAIF,WAAW,CAACG,MAAM,KAAK,CAAC,IAAI,gBAAgB,CAACC,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;IACnEA,WAAW,GAAG,MAAM;EACxB;EACA;EACAL,uBAAuB,GAAGC,wBAAwB,GAAG,IAAI,GAAG,4DAA4D,GACpHI,WAAW;EACf;EACA;EACAL,uBAAuB,IAAI,KAAK;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}