{"ast":null,"code":"function GetSignallingServerAddress() {\n  var signallingServerAddress = '';\n  if (signallingServerAddress == '') {\n    // define our signallingServerProtocol to be used based on whether\n    // or not we're accessing our frontend via a tls\n    var signallingServerProtocol = 'ws:';\n    if (window.location.protocol === 'https:') {\n      signallingServerProtocol = 'wss:';\n    }\n    var application = window.location.hostname.split('.');\n    if (application.length === 0 || /^[a-zA-Z0-9]+$/.test(application[0])) {\n      application = \"demo\";\n    }\n    // build the websocket endpoint based on the protocol used to load the frontend\n    signallingServerAddress = signallingServerProtocol + '//' + 'sps.tenant-palatial-platform.lga1.ingress.coreweave.cloud/' + application;\n    // if the frontend for an application is served from a base-level domain\n    // it has a trailing slash, so we need to account for this when appending the 'ws' for the websocket ingress\n    signallingServerAddress += '/ws';\n  }\n}\n_c = GetSignallingServerAddress;\nexport default GetSignallingServerAddress;\nvar _c;\n$RefreshReg$(_c, \"GetSignallingServerAddress\");","map":{"version":3,"names":["GetSignallingServerAddress","signallingServerAddress","signallingServerProtocol","window","location","protocol","application","hostname","split","length","test","_c","$RefreshReg$"],"sources":["C:/Users/employee/Palatial-Web-Loading/src/signallingServer.js"],"sourcesContent":["function GetSignallingServerAddress() {\r\n    var signallingServerAddress = '';\r\n    if (signallingServerAddress == '') {\r\n        // define our signallingServerProtocol to be used based on whether\r\n        // or not we're accessing our frontend via a tls\r\n        var signallingServerProtocol = 'ws:';\r\n        if (window.location.protocol ===\r\n            'https:') {\r\n            signallingServerProtocol = 'wss:';\r\n        }\r\n        var application = window.location.hostname.split('.');\r\n        if (application.length === 0 || /^[a-zA-Z0-9]+$/.test(application[0])) {\r\n            application = \"demo\";\r\n        }\r\n        // build the websocket endpoint based on the protocol used to load the frontend\r\n        signallingServerAddress = signallingServerProtocol + '//' + 'sps.tenant-palatial-platform.lga1.ingress.coreweave.cloud/' +\r\n            application;\r\n        // if the frontend for an application is served from a base-level domain\r\n        // it has a trailing slash, so we need to account for this when appending the 'ws' for the websocket ingress\r\n        signallingServerAddress += '/ws';\r\n    }\r\n}\r\n\r\nexport default GetSignallingServerAddress;"],"mappings":"AAAA,SAASA,0BAA0BA,CAAA,EAAG;EAClC,IAAIC,uBAAuB,GAAG,EAAE;EAChC,IAAIA,uBAAuB,IAAI,EAAE,EAAE;IAC/B;IACA;IACA,IAAIC,wBAAwB,GAAG,KAAK;IACpC,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KACxB,QAAQ,EAAE;MACVH,wBAAwB,GAAG,MAAM;IACrC;IACA,IAAII,WAAW,GAAGH,MAAM,CAACC,QAAQ,CAACG,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;IACrD,IAAIF,WAAW,CAACG,MAAM,KAAK,CAAC,IAAI,gBAAgB,CAACC,IAAI,CAACJ,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;MACnEA,WAAW,GAAG,MAAM;IACxB;IACA;IACAL,uBAAuB,GAAGC,wBAAwB,GAAG,IAAI,GAAG,4DAA4D,GACpHI,WAAW;IACf;IACA;IACAL,uBAAuB,IAAI,KAAK;EACpC;AACJ;AAACU,EAAA,GArBQX,0BAA0B;AAuBnC,eAAeA,0BAA0B;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}