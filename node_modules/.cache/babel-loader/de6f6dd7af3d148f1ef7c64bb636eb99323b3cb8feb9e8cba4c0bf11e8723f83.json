{"ast":null,"code":"export let signallingServerAddress = '';\nexport let application = '';\nif (signallingServerAddress == '') {\n  // define our signallingServerProtocol to be used based on whether\n  // or not we're accessing our frontend via a tls\n  var signallingServerProtocol = 'ws:';\n  if (window.location.protocol === 'https:') {\n    signallingServerProtocol = 'wss:';\n  }\n  application = window.location.hostname.split('.');\n  if (application.length === 0) application = \"demo\";else application = application[0];\n  if (!/^[a-zA-Z0-9]+$/.test(application)) {\n    application = \"demo\";\n  }\n  // build the websocket endpoint based on the protocol used to load the frontend\n  signallingServerAddress = signallingServerProtocol + '//' + 'sps.tenant-palatial-platform.lga1.ingress.coreweave.cloud/' + application;\n  // if the frontend for an application is served from a base-level domain\n  // it has a trailing slash, so we need to account for this when appending the 'ws' for the websocket ingress\n  signallingServerAddress += '/ws';\n}","map":{"version":3,"names":["signallingServerAddress","application","signallingServerProtocol","window","location","protocol","hostname","split","length","test"],"sources":["C:/Users/employee/Palatial-Web-Loading/src/signallingServer.js"],"sourcesContent":["    export let signallingServerAddress = '';\r\n    export let application = '';\r\n    if (signallingServerAddress == '') {\r\n        // define our signallingServerProtocol to be used based on whether\r\n        // or not we're accessing our frontend via a tls\r\n        var signallingServerProtocol = 'ws:';\r\n        if (window.location.protocol === 'https:') {\r\n            signallingServerProtocol = 'wss:';\r\n        }\r\n        application = window.location.hostname.split('.');\r\n\r\n        if (application.length === 0)\r\n\t\tapplication = \"demo\";\r\n\telse\r\n\t\tapplication = application[0];\r\n\tif (!/^[a-zA-Z0-9]+$/.test(application)) {\r\n            application = \"demo\";\r\n        }\r\n        // build the websocket endpoint based on the protocol used to load the frontend\r\n        signallingServerAddress = signallingServerProtocol + '//' + 'sps.tenant-palatial-platform.lga1.ingress.coreweave.cloud/' + application;\r\n        // if the frontend for an application is served from a base-level domain\r\n        // it has a trailing slash, so we need to account for this when appending the 'ws' for the websocket ingress\r\n        signallingServerAddress += '/ws';\r\n    }\r\n\r\n"],"mappings":"AAAI,OAAO,IAAIA,uBAAuB,GAAG,EAAE;AACvC,OAAO,IAAIC,WAAW,GAAG,EAAE;AAC3B,IAAID,uBAAuB,IAAI,EAAE,EAAE;EAC/B;EACA;EACA,IAAIE,wBAAwB,GAAG,KAAK;EACpC,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,EAAE;IACvCH,wBAAwB,GAAG,MAAM;EACrC;EACAD,WAAW,GAAGE,MAAM,CAACC,QAAQ,CAACE,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;EAEjD,IAAIN,WAAW,CAACO,MAAM,KAAK,CAAC,EAClCP,WAAW,GAAG,MAAM,CAAC,KAErBA,WAAW,GAAGA,WAAW,CAAC,CAAC,CAAC;EAC7B,IAAI,CAAC,gBAAgB,CAACQ,IAAI,CAACR,WAAW,CAAC,EAAE;IAC9BA,WAAW,GAAG,MAAM;EACxB;EACA;EACAD,uBAAuB,GAAGE,wBAAwB,GAAG,IAAI,GAAG,4DAA4D,GAAGD,WAAW;EACtI;EACA;EACAD,uBAAuB,IAAI,KAAK;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}